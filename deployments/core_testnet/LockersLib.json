{
  "address": "0x8F7E74bC8f1B985D5CD9A8C2189aF7802666a1c1",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "OneHundredPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "HealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "UpperHealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "MaxLockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "NativeTokenDecimal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "NativeToken",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.lockersLibConstants",
          "name": "libConstants",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "coreBTC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ccBurnRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "exchangeConnector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collaterals",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockerPercentageFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceWithDiscountRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slashCompensationRatio",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.lockersLibParam",
          "name": "libParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        }
      ],
      "name": "getNeededCoreBTCToBuyCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "lockerLockingScript",
              "type": "bytes"
            },
            {
              "internalType": "enum ScriptTypes",
              "name": "lockerRescueType",
              "type": "ScriptTypes"
            },
            {
              "internalType": "bytes",
              "name": "lockerRescueScript",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "lockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "netMinted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slashingCoreBTCAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reservedTokenForSlash",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLocker",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCandidate",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isScriptHash",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "lockedToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "inactivationTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.locker",
          "name": "theLocker",
          "type": "tuple"
        }
      ],
      "name": "isLockerActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "OneHundredPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "HealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "UpperHealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "MaxLockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "NativeTokenDecimal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "NativeToken",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.lockersLibConstants",
          "name": "libConstants",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "coreBTC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ccBurnRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "exchangeConnector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collaterals",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockerPercentageFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceWithDiscountRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slashCompensationRatio",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.lockersLibParam",
          "name": "libParams",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceOfCollateral",
          "type": "uint256"
        }
      ],
      "name": "neededCoreBTCToBuyCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "coreBTC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ccBurnRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "exchangeConnector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collaterals",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockerPercentageFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceWithDiscountRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slashCompensationRatio",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.lockersLibParam",
          "name": "libParams",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        }
      ],
      "name": "priceOfOneUnitOfCollateralInBTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb13987740167bea6ce72ad92b6f706ad73348e1b1663f48b8a7476fa31ef1376",
  "receipt": {
    "to": null,
    "from": "0xf13F4E007eB5C8e8201AdE0bE1C8946592818F42",
    "contractAddress": "0x8F7E74bC8f1B985D5CD9A8C2189aF7802666a1c1",
    "transactionIndex": 0,
    "gasUsed": "3671028",
    "logsBloom": "0x
    "blockHash": "0xd3f253fb0a7c8b4707f92185acbd3862a52bef1a53adf6442e19052e52a1d2f9",
    "transactionHash": "0xb13987740167bea6ce72ad92b6f706ad73348e1b1663f48b8a7476fa31ef1376",
    "logs": [],
    "blockNumber": 20706240,
    "cumulativeGasUsed": "3671028",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "938a42722b96cf9909fb074d93a44bf2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"OneHundredPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"HealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UpperHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxLockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NativeTokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NativeToken\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.lockersLibConstants\",\"name\":\"libConstants\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"coreBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collaterals\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWithDiscountRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashCompensationRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.lockersLibParam\",\"name\":\"libParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"}],\"name\":\"getNeededCoreBTCToBuyCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"lockerRescueType\",\"type\":\"ScriptTypes\"},{\"internalType\":\"bytes\",\"name\":\"lockerRescueScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashingCoreBTCAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedTokenForSlash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocker\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCandidate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isScriptHash\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"lockedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inactivationTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.locker\",\"name\":\"theLocker\",\"type\":\"tuple\"}],\"name\":\"isLockerActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"OneHundredPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"HealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UpperHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxLockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NativeTokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NativeToken\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.lockersLibConstants\",\"name\":\"libConstants\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"coreBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collaterals\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWithDiscountRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashCompensationRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.lockersLibParam\",\"name\":\"libParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceOfCollateral\",\"type\":\"uint256\"}],\"name\":\"neededCoreBTCToBuyCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"coreBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collaterals\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWithDiscountRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashCompensationRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.lockersLibParam\",\"name\":\"libParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"}],\"name\":\"priceOfOneUnitOfCollateralInBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/LockersLib.sol\":\"LockersLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/common/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x0b17d7a61c5ba6df420a4293c5313d20eacc2a4a866f39321d6b6f206a171c8e\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ICoreBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ICoreBTC is IERC20Upgradeable {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    event Blacklisted(address indexed account);\\n\\n    event UnBlacklisted(address indexed account);\\n\\n    event BlackListerAdded(address indexed newBlackLister);\\n\\n    event BlackListerRemoved(address indexed blackLister);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function ownerBurn(address _user, uint _amount) external returns (bool);\\n\\n    function setMaxMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n\\n    function addBlackLister(address account) external;\\n\\n    function removeBlackLister(address account) external;\\n\\n    function blacklist(address _account) external;\\n\\n    function unBlacklist(address _account) external;\\n}\",\"keccak256\":\"0xca1956a6e189ef824f8227f4621079b312e6204905d1a29b270f7eeb1cd2085f\",\"license\":\"MIT\"},\"contracts/libraries/LockersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../erc20/interfaces/ICoreBTC.sol\\\";\\nimport \\\"../types/DataTypes.sol\\\";\\nimport \\\"../common/types/ScriptTypesEnum.sol\\\";\\nimport \\\"../lockers/interfaces/ICollaterals.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary LockersLib {\\n\\n    using SafeERC20 for IERC20;\\n\\n    function requestToBecomeLockerValidation(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        address theLockerTargetAddress,\\n        uint _lockedAmount,\\n        address _lockedToken\\n    ) external {\\n\\n        require(\\n            !lockersMapping[msg.sender].isCandidate,\\n            \\\"Lockers: is candidate\\\"\\n        );\\n\\n        require(\\n            !lockersMapping[msg.sender].isLocker,\\n            \\\"Lockers: is locker\\\"\\n        );\\n\\n        ICollaterals(libParams.collaterals).checkLockedAmount(\\n            _lockedToken,\\n            _lockedAmount\\n        );\\n\\n        if (_lockedToken == libConstants.NativeToken) {\\n            require(\\n                msg.value == _lockedAmount,\\n                \\\"Lockers: incorrect CORE amount\\\"\\n            );\\n        }\\n\\n        require(\\n            theLockerTargetAddress == address(0),\\n            \\\"Lockers: used locking script\\\"\\n        );\\n\\n        // Transfer erc20 token to lockers if collateral is not CORE\\n        if (_lockedToken != libConstants.NativeToken) {\\n            IERC20(_lockedToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _lockedAmount\\n            );\\n        }\\n    }\\n\\n    function requestToBecomeLocker(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        bytes calldata _candidateLockingScript,\\n        uint _lockedAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript,\\n        address _lockedToken\\n    ) external {\\n\\n        DataTypes.locker memory locker_;\\n        locker_.lockerLockingScript = _candidateLockingScript;\\n        locker_.lockedAmount = _lockedAmount;\\n        locker_.isCandidate = true;\\n        locker_.lockerRescueType = _lockerRescueType;\\n        locker_.lockerRescueScript = _lockerRescueScript;\\n        locker_.lockedToken = _lockedToken;\\n\\n        lockersMapping[msg.sender] = locker_;\\n\\n    }\\n\\n    function buySlashedCollateralOfLocker(\\n        DataTypes.locker storage theLocker,\\n        uint _collateralAmount\\n    ) external returns (uint neededCoreBTC) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        require(\\n            _collateralAmount <= theLocker.reservedTokenForSlash,\\n            \\\"Lockers: not enough slashed collateral to buy\\\"\\n        );\\n\\n        neededCoreBTC = theLocker.slashingCoreBTCAmount * _collateralAmount / theLocker.reservedTokenForSlash;\\n\\n        if (neededCoreBTC < theLocker.slashingCoreBTCAmount) {\\n            // to avoid precision loss (so buyer cannot profit of it)\\n            neededCoreBTC = neededCoreBTC + 1;\\n        }\\n\\n        // Updates locker's slashing info\\n        theLocker.slashingCoreBTCAmount -= neededCoreBTC;\\n\\n        theLocker.reservedTokenForSlash -= _collateralAmount;\\n\\n    }\\n\\n    function liquidateLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _collateralAmount\\n    ) external view returns (uint neededCoreBTC) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libParams,\\n            theLocker.lockedToken\\n        );\\n\\n        // Checks that the collateral has become unhealthy\\n        require(\\n            calculateHealthFactor(\\n                theLocker,\\n                libParams,\\n                priceOfCollateral\\n            ) < libConstants.HealthFactor,\\n            \\\"Lockers: is healthy\\\"\\n        );\\n\\n        uint _maxBuyableCollateral = maximumBuyableCollateral(\\n            theLocker,\\n            libConstants,\\n            libParams,\\n            priceOfCollateral\\n        );\\n\\n        if (_maxBuyableCollateral > theLocker.lockedAmount) {\\n            _maxBuyableCollateral = theLocker.lockedAmount;\\n        }\\n\\n        require(\\n            _collateralAmount <= _maxBuyableCollateral,\\n            \\\"Lockers: not enough collateral to buy\\\"\\n        );\\n\\n        // Needed amount of CoreBTC to buy collateralAmount\\n        neededCoreBTC = neededCoreBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            theLocker.lockedToken,\\n            _collateralAmount,\\n            priceOfCollateral\\n        );\\n\\n        neededCoreBTC = neededCoreBTC + 1; // to prevent precision loss\\n\\n    }\\n\\n    function slashThiefLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _rewardAmount,\\n        uint _amount\\n    ) external returns (uint rewardInCollateral, uint neededTokenForSlash) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        uint equivalentCollateral = IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            _amount, // Total amount of CoreBTC that is slashed\\n            ICoreBTC(libParams.coreBTC).decimals(), // Decimal of coreBTC\\n            ICollaterals(libParams.collaterals).getDecimals(theLocker.lockedToken), // Decimal of Collateral\\n            libParams.coreBTC, // Input token\\n            theLocker.lockedToken // Output token\\n        );\\n\\n        rewardInCollateral = equivalentCollateral*_rewardAmount/_amount;\\n        neededTokenForSlash = equivalentCollateral*libParams.liquidationRatio/libConstants.OneHundredPercent;\\n\\n        if ((rewardInCollateral + neededTokenForSlash) > theLocker.lockedAmount) {\\n            // Divides total locker's collateral proportional to reward amount and slash amount\\n            rewardInCollateral = rewardInCollateral*theLocker.lockedAmount/\\n                (rewardInCollateral + neededTokenForSlash);\\n            neededTokenForSlash = theLocker.lockedAmount - rewardInCollateral;\\n        }\\n\\n        // Updates locker's bond\\n        theLocker.lockedAmount -= (rewardInCollateral + neededTokenForSlash);\\n\\n        if (_amount > theLocker.netMinted) {\\n            _amount = theLocker.netMinted;\\n        }\\n\\n        theLocker.netMinted -= _amount;\\n\\n        theLocker.slashingCoreBTCAmount += _amount;\\n\\n        theLocker.reservedTokenForSlash += neededTokenForSlash;\\n    }\\n\\n    function slashIdleLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _rewardAmount,\\n        uint _amount\\n    ) external returns (uint equivalentCollateral) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        equivalentCollateral = IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            _rewardAmount + _amount, // Total amount of CoreBTC that is slashed\\n            ICoreBTC(libParams.coreBTC).decimals(), // Decimal of coreBTC\\n            ICollaterals(libParams.collaterals).getDecimals(theLocker.lockedToken), // Decimal of Collateral\\n            libParams.coreBTC, // Input token\\n            theLocker.lockedToken // Output token\\n        );\\n\\n        if (equivalentCollateral > theLocker.lockedAmount) {\\n            equivalentCollateral = theLocker.lockedAmount;\\n        }\\n\\n        // Updates locker's bond\\n        theLocker.lockedAmount -= equivalentCollateral;\\n    }\\n\\n    function maximumBuyableCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral\\n    ) public view returns (uint) {\\n\\n        // maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio/10000 - nativeTokenLockedAmount*nativeTokenPrice)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice)\\n        //  => maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio * 10^18  - nativeTokenLockedAmount*nativeTokenPrice * 10^8)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice * 10^8)\\n\\n        uint coreBTCDecimal = ERC20(libParams.coreBTC).decimals();\\n        uint collateralDecimals = ICollaterals(libParams.collaterals).getDecimals(theLocker.lockedToken);\\n        require(\\n            libConstants.UpperHealthFactor * theLocker.netMinted * libParams.liquidationRatio * (10 ** collateralDecimals) >= theLocker.lockedAmount * _priceOfOneUnitOfCollateral * (10 ** coreBTCDecimal),\\n            \\\"Lockers: invalid antecedent\\\"\\n        );\\n        require(\\n            (libConstants.UpperHealthFactor * libParams.liquidationRatio * _priceOfOneUnitOfCollateral * libParams.priceWithDiscountRatio)/libConstants.OneHundredPercent > _priceOfOneUnitOfCollateral * (10 ** coreBTCDecimal),\\n            \\\"Lockers: invalid consequent\\\"\\n        );\\n\\n        uint antecedent = (libConstants.UpperHealthFactor * theLocker.netMinted * libParams.liquidationRatio * (10 ** collateralDecimals)) -\\n        (theLocker.lockedAmount * _priceOfOneUnitOfCollateral * (10 ** coreBTCDecimal));\\n\\n        uint consequent = ((libConstants.UpperHealthFactor * libParams.liquidationRatio * _priceOfOneUnitOfCollateral * libParams.priceWithDiscountRatio)/libConstants.OneHundredPercent) -\\n        (_priceOfOneUnitOfCollateral * (10 ** coreBTCDecimal));\\n\\n        return antecedent/consequent;\\n    }\\n\\n    function calculateHealthFactor(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral\\n    ) public view returns (uint) {\\n\\n        require(\\n            theLocker.netMinted > 0 && libParams.liquidationRatio > 0,\\n            \\\"Lockers: netMinted or liquidationRatio is zero\\\"\\n        );\\n\\n        return (_priceOfOneUnitOfCollateral * theLocker.lockedAmount *\\n            (10 ** (1 + ERC20(libParams.coreBTC).decimals())))/\\n                (theLocker.netMinted * libParams.liquidationRatio *\\n                    (10 ** (1 + ICollaterals(libParams.collaterals).getDecimals(theLocker.lockedToken))));\\n    }\\n\\n    function neededCoreBTCToBuyCollateral(\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        address _collateralToken,\\n        uint _collateralAmount,\\n        uint _priceOfCollateral\\n    ) public view returns (uint) {\\n        return (_collateralAmount * _priceOfCollateral * libParams.priceWithDiscountRatio)/\\n            (libConstants.OneHundredPercent*(10 ** ICollaterals(libParams.collaterals).getDecimals(_collateralToken)));\\n    }\\n\\n    function addToCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        uint _addingCollateralAmount\\n    ) external {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        // Transfer erc20 token to lockers if collateral is not CORE\\n        if (theLocker.lockedToken != libConstants.NativeToken) {\\n            IERC20(theLocker.lockedToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _addingCollateralAmount\\n            );\\n        }\\n\\n        theLocker.lockedAmount += _addingCollateralAmount;\\n    }\\n\\n    function removeFromCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _removingCollateralAmount\\n    ) external {\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        require(\\n            !isLockerActive(theLocker),\\n            \\\"Lockers: still active\\\"\\n        );\\n\\n        uint _priceOfOneUnitOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libParams,\\n            theLocker.lockedToken\\n        );\\n\\n        uint collateralDecimals = ICollaterals(libParams.collaterals).getDecimals(theLocker.lockedToken);\\n\\n        // Capacity of locker = (locker's collateral value in CoreBTC) * (collateral ratio) - (minted CoreBTC)\\n        uint lockerCapacity = (theLocker.lockedAmount * _priceOfOneUnitOfCollateral *\\n            libConstants.OneHundredPercent)/\\n                (libParams.collateralRatio * (10 ** collateralDecimals)) - theLocker.netMinted;\\n\\n        uint maxRemovableCollateral = (lockerCapacity * (10 ** collateralDecimals))/_priceOfOneUnitOfCollateral;\\n\\n        require(\\n            _removingCollateralAmount <= maxRemovableCollateral,\\n            \\\"Lockers: more than max removable collateral\\\"\\n        );\\n\\n        require(\\n            theLocker.lockedAmount - _removingCollateralAmount >= ICollaterals(libParams.collaterals).getMinLockedAmount(theLocker.lockedToken),\\n            \\\"Lockers: less than min collateral\\\"\\n        );\\n\\n        theLocker.lockedAmount -= _removingCollateralAmount;\\n    }\\n\\n    function priceOfOneUnitOfCollateralInBTC(\\n        DataTypes.lockersLibParam memory libParams,\\n        address _collateralToken\\n    ) public view returns (uint) {\\n        uint collateralDecimals = ICollaterals(libParams.collaterals).getDecimals(_collateralToken);\\n\\n        return IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            (10**collateralDecimals), // 1 Collateral is 10^collateralDecimals\\n            collateralDecimals,\\n            ICoreBTC(libParams.coreBTC).decimals(),\\n            _collateralToken,\\n            libParams.coreBTC\\n        );\\n    }\\n\\n    function lockerCollateralInCoreBTC(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibParam memory libParams\\n    ) public view returns (uint) {\\n\\n        return IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            theLocker.lockedAmount,\\n            ICollaterals(libParams.collaterals).getDecimals(theLocker.lockedToken),\\n            ICoreBTC(libParams.coreBTC).decimals(),\\n            theLocker.lockedToken,\\n            libParams.coreBTC\\n        );\\n    }\\n\\n    function getLockerCapacity(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams\\n    ) external view returns (uint) {\\n        uint _lockerCollateralInCoreBTC = lockerCollateralInCoreBTC(\\n            theLocker,\\n            libParams\\n        )*libConstants.OneHundredPercent/libParams.collateralRatio;\\n\\n        if (_lockerCollateralInCoreBTC > theLocker.netMinted) {\\n            return _lockerCollateralInCoreBTC - theLocker.netMinted;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getHealthFactor(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibParam memory libParams\\n    ) external view returns(uint){\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        // calculate collateral value measured in BTC\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libParams,\\n            theLocker.lockedToken\\n        );\\n\\n        require(\\n            priceOfCollateral > 0,\\n            \\\"Lockers: invalid price\\\"\\n        );\\n\\n        return calculateHealthFactor(\\n            theLocker,\\n            libParams,\\n            priceOfCollateral\\n        );\\n    }\\n\\n    function getMaximumBuyableCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams\\n    ) external view returns (uint) {\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libParams,\\n            theLocker.lockedToken\\n        );\\n\\n        uint _maxBuyableCollateral = maximumBuyableCollateral(\\n            theLocker,\\n            libConstants,\\n            libParams,\\n            priceOfCollateral\\n        );\\n\\n        return Math.min(_maxBuyableCollateral, theLocker.lockedAmount);\\n    }\\n\\n    function getNeededCoreBTCToBuyCollateral(\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _collateralAmount,\\n        address _collateralToken\\n    ) external view returns(uint) {\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libParams,\\n            _collateralToken\\n        );\\n\\n        return neededCoreBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            _collateralToken,\\n            _collateralAmount,\\n            priceOfCollateral\\n        );\\n    }\\n\\n    function isLockerActive(\\n        DataTypes.locker memory theLocker\\n    ) public view returns (bool) {\\n        return theLocker.isLocker && (theLocker.inactivationTimestamp == 0 || theLocker.inactivationTimestamp > block.timestamp);\\n    }\\n\\n    function revokeRequest(\\n         mapping(address => DataTypes.locker) storage lockersMapping,\\n         address[] storage candidateLockers,\\n         address _lockerTargetAddress\\n    ) external returns (DataTypes.locker memory lockerRequest){\\n        require(\\n            lockersMapping[_lockerTargetAddress].isCandidate,\\n            \\\"Lockers: no req\\\"\\n        );\\n\\n        // Loads locker's information\\n        lockerRequest = lockersMapping[_lockerTargetAddress];\\n\\n        // Removes candidate from lockersMapping\\n        delete lockersMapping[_lockerTargetAddress];\\n        _removeLockerFromList(candidateLockers, _lockerTargetAddress);\\n    }\\n\\n    function isCollateralUnused(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        address[] storage targetAddressList,\\n        address _token\\n    ) external view returns (bool) {\\n        uint len = targetAddressList.length;\\n\\n        for(uint i = 0; i < len; i++) {\\n            DataTypes.locker memory theLocker = lockersMapping[targetAddressList[i]];\\n            if (theLocker.lockedToken == _token) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function removeLocker(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        mapping(bytes => address) storage lockerTargetAddress,\\n        address[] storage targetAddressList,\\n        address _lockerTargetAddress\\n    ) external returns (DataTypes.locker memory removingLocker){\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        require(\\n            !isLockerActive(lockersMapping[_lockerTargetAddress]),\\n            \\\"Lockers: still active\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].netMinted == 0,\\n            \\\"Lockers: 0 net minted\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].slashingCoreBTCAmount == 0,\\n            \\\"Lockers: 0 slashing COREBTC\\\"\\n        );\\n\\n        removingLocker = lockersMapping[_lockerTargetAddress];\\n\\n        // Removes locker from lockerTargetAddress and lockersMapping\\n        delete lockerTargetAddress[lockersMapping[_lockerTargetAddress].lockerLockingScript];\\n        delete lockersMapping[_lockerTargetAddress];\\n\\n        _removeLockerFromList(targetAddressList, _lockerTargetAddress);\\n    }\\n\\n    function moveLocker(\\n        address[] storage fromList,\\n        address[] storage toList,\\n        address _lockerTargetAddress\\n    ) external {\\n        _removeLockerFromList(fromList, _lockerTargetAddress);\\n        toList.push(_lockerTargetAddress);\\n    }\\n\\n    function _removeLockerFromList(\\n        address[] storage targetAddressList,\\n        address _lockerTargetAddress\\n    ) private {\\n        // Find the index of the target address in the list\\n        uint len = targetAddressList.length;\\n        uint i = 0;\\n        for (; i < len; i++) {\\n            if (targetAddressList[i] == _lockerTargetAddress) {\\n                break;\\n            }\\n        }\\n\\n        // Exit if the target address cannot be found\\n        if (i == len) return;\\n\\n        // If the target address is not at the end of the list,\\n        // replace it with the last element of the list,\\n        // then the last element of the list will become invalid\\n        if (i < len - 1) {\\n            targetAddressList[i] = targetAddressList[len-1];\\n        }\\n\\n        // Remove the invalid element from the end of the list\\n        targetAddressList.pop();\\n    }\\n\\n    // *************** Handling data compatibility after contract upgrade ***************\\n\\n    function initForMultipleCollateralsFeature(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        mapping(address => uint) storage lockerInactivationTimestamp,\\n        address[] storage candidateLockers,\\n        address[] storage approvedLockers,\\n        address[] memory _initialCandidates,\\n        uint _totalNumberOfCandidates\\n    ) external {\\n        // Initialize the `candidateLockers` list\\n        _initCandidateLockers(lockersMapping, candidateLockers, _initialCandidates, _totalNumberOfCandidates);\\n\\n        // Initialize the `lockedToken` and `inactivationTimestamp` fields of all lockers in the `candidateLockers` list\\n        _initLockerUnknownFields(lockersMapping, lockerInactivationTimestamp, candidateLockers);\\n\\n        // Initialize the `lockedToken` and `inactivationTimestamp` fields of all lockers in the `approvedLockers` list\\n        _initLockerUnknownFields(lockersMapping, lockerInactivationTimestamp, approvedLockers);\\n    }\\n\\n    function _initCandidateLockers(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        address[] storage candidateLockers,\\n        address[] memory _initialCandidates,\\n        uint _totalNumberOfCandidates\\n    ) private {\\n        require(\\n            candidateLockers.length == 0,\\n            \\\"Lockers: candidate lockers is already inited\\\"\\n        );\\n\\n        require(\\n            _initialCandidates.length == _totalNumberOfCandidates,\\n            \\\"Lockers: target address list is invalid\\\"\\n        );\\n\\n        for (uint i = 0; i < _totalNumberOfCandidates; i++) {\\n            address targetAddress = _initialCandidates[i];\\n\\n            require(\\n                lockersMapping[targetAddress].isCandidate,\\n                \\\"Lockers: is not candidate\\\"\\n            );\\n\\n            // Detect duplicate candidate addresses\\n            for (uint j = 0; j < candidateLockers.length; j++) {\\n                require(\\n                    targetAddress != candidateLockers[j],\\n                    \\\"Lockers: duplicate target address\\\"\\n                );\\n            }\\n\\n            candidateLockers.push(targetAddress);\\n        }\\n    }\\n\\n    function _initLockerUnknownFields(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        mapping(address => uint) storage lockerInactivationTimestamp,\\n        address[] storage targetAddressList\\n    ) private {\\n        for (uint i = 0; i < targetAddressList.length; i++) {\\n            DataTypes.locker storage theLocker = lockersMapping[targetAddressList[i]];\\n\\n            // Init locked token\\n            if (theLocker.lockedAmount > 0 && theLocker.lockedToken == address(0)) {\\n                theLocker.lockedToken = address(1);\\n            }\\n\\n            // Init inactivation timestamp\\n            if (theLocker.isLocker && theLocker.inactivationTimestamp == 0 &&\\n                lockerInactivationTimestamp[targetAddressList[i]] > 0) {\\n                theLocker.inactivationTimestamp = lockerInactivationTimestamp[targetAddressList[i]];\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x461b5d14f1e7a4418d5ab044ca51b38065e0f4cf29e05d3edf8a86176e66163a\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ICollaterals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../../types/DataTypes.sol\\\";\\n\\ninterface ICollaterals {\\n    // struct\\n    struct collateral {\\n        address token;\\n        uint minLockedAmount;\\n    }\\n\\n    // Events\\n    event NewMinRequiredLockedAmount(\\n        address indexed token,\\n        uint oldMinRequiredLockedAmount,\\n        uint newMinRequiredLockedAmount\\n    );\\n\\n    event NewLockers(address oldLockers, address newLockers);\\n\\n    event NewSupportedCollateral(address indexed token, uint minLockedAmount);\\n\\n    event RevokeSupportedCollateral(address indexed token);\\n\\n    // Errors\\n    error InsufficientCollateral(address collateralToken, uint lockedAmount, uint minLockedAmount);\\n\\n    // Read-only functions\\n    function lockers() external view returns (address);\\n\\n    function getTotalNumber() external view returns (uint);\\n\\n    function getDecimals(address _token) external view returns (uint);\\n\\n    function getMinLockedAmount(address _token) external view returns (uint);\\n\\n    function getCollateral(uint _index) external view returns (collateral memory);\\n\\n    function checkLockedAmount(address _token, uint _lockedAmount) external view;\\n\\n\\n    // State-changing functions\\n    function setLockers(address _lockers) external;\\n\\n    function setMinLockedAmount(address _token, uint _minLockedAmount) external;\\n\\n    function addCollateral(address _token, uint _minLockedAmount) external;\\n\\n    function removeCollateral(address _token) external;\\n}\",\"keccak256\":\"0x3d29de86c37a78285d48444e6a3f6276eaca56def2bc55d67bfd7e7c36b0338d\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IPriceOracle {\\n\\n    // Events\\n    event NewAcceptableDelay(uint oldAcceptableDelay, uint newAcceptableDelay);\\n\\n    event AddPriceProxy(address indexed priceProxy);\\n\\n    event RemovePriceProxy(address indexed priceProxy);\\n\\n    event NewBestPriceProxy(address oldBestPriceProxy, address newBestPriceProxy);\\n\\n    event NewTokenPricePair(address indexed token, string oldPricePair, string newPricePair);\\n\\n    event NewEarnWrappedToken(address oldEarnWrappedToken, address newEarnWrappedToken);\\n\\n    event NewEarnStrategy(address oldEarnStrategy, address newEarnStrategy);\\n\\n    // Errors\\n    error ExpiredPrice(address token, uint publishTime, uint currentTime);\\n\\n    error FailedQueryPrice(string pairName0, string pairName1, string err);\\n\\n    error InvalidExchangeRate(address token, address anchorToken, uint exchangeRate, uint decimals);\\n\\n    // Read-only functions\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function pricePairMap(address _token) external view returns(string memory);\\n\\n    function priceProxyIdxMap(address _priceOracle) external view returns(uint);\\n\\n    function getPriceProxyListLength() external view returns(uint);\\n\\n    function priceProxyList(uint idx) external view returns(address);\\n\\n    function bestPriceProxy() external view returns(address);\\n\\n    function earnWrappedToken() external view returns(address);\\n\\n    function earnStrategy() external view returns(address);\\n\\n    // State-changing functions\\n\\n    function addPriceProxy(address _priceProxy) external;\\n\\n    function removePriceProxy(address _priceProxy) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n\\n    function selectBestPriceProxy(address _priceProxy) external;\\n\\n    function addTokenPricePair(\\n        address _token,\\n        string memory _pairName\\n    ) external;\\n\\n    function setEarnWrappedToken(address _token) external;\\n\\n    function setEarnStrategy(address _earn) external;\\n\\n    function pauseOracle() external;\\n\\n    function unPauseOracle() external;\\n}\",\"keccak256\":\"0x26a2069de2feb13eeb91f22eb916279acf086522b0d870cb1a65374fa6c0d241\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../common/types/ScriptTypesEnum.sol\\\";\\n\\nlibrary DataTypes {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param lockedAmount                 Bond amount of locker in locked token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingCoreBTCAmount        Total amount of coreBTC a locker must be slashed\\n    /// @param reservedTokenForSlash        Total locked token reserved to support slashing coreBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 This field is not used\\n    /// @param lockedToken                  Address of collateral token\\n    /// @param inactivationTimestamp        Starting time of becoming inactive state\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint lockedAmount;\\n        uint netMinted;\\n        uint slashingCoreBTCAmount;\\n        uint reservedTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n        address lockedToken;\\n        uint inactivationTimestamp;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address coreBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n        address collaterals;\\n\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint slashCompensationRatio;\\n    }\\n}\",\"keccak256\":\"0x82d7a3f2700b5e19f8224886eb92da5221212fac04c9c6b053a49277f4679252\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61417561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101565760003560e01c80635b8914e9116100cd57806397333457116100865780639733345714610340578063b926d8f014610353578063d3f5e2e914610373578063f8783d1214610386578063fb9b4067146103a6578063fe481716146103c657600080fd5b80635b8914e91461029a578063652e98b9146102ba57806367bc33d4146102da578063799d31b4146102ed578063895c8acc1461031a5780638c230aed1461032d57600080fd5b80633a6a84a21161011f5780633a6a84a2146101fc5780633c8ad1bd1461020f5780633e2951a6146102225780634777cda31461024557806351ca3002146102675780635a86f75c1461028757600080fd5b80629941371461015b57806308878a6f146101815780630a91f6541461019457806314442394146101a757806336a24a7b146101c7575b600080fd5b61016e610169366004613b9b565b6103e6565b6040519081526020015b60405180910390f35b61016e61018f366004613983565b6105a1565b61016e6101a236600461394e565b610706565b8180156101b357600080fd5b5061016e6101c2366004613ab6565b610763565b8180156101d357600080fd5b506101e76101e23660046139ca565b610983565b60408051928352602083019190915201610178565b61016e61020a36600461394e565b610c7f565b61016e61021d366004613a7f565b610cf3565b6102356102303660046135eb565b610ee3565b6040519015158152602001610178565b81801561025157600080fd5b506102656102603660046135ff565b611174565b005b81801561027357600080fd5b5061026561028236600461359b565b61138d565b61016e610295366004613b55565b6113cc565b8180156102a657600080fd5b506102656102b5366004613a1c565b6113e8565b8180156102c657600080fd5b506102656102d53660046136a3565b61146e565b61016e6102e8366004613a52565b611498565b8180156102f957600080fd5b5061030d610308366004613783565b611653565b6040516101789190613d90565b61016e610328366004613983565b611c9f565b61016e61033b366004613a52565b611fd6565b61016e61034e366004613b15565b612076565b81801561035f57600080fd5b5061026561036e3660046137c1565b612131565b61023561038136600461382c565b612345565b81801561039257600080fd5b5061030d6103a13660046135eb565b61236b565b8180156103b257600080fd5b506102656103c1366004613983565b612666565b8180156103d257600080fd5b5061016e6103e1366004613af4565b612996565b608082015160405163067aa55560e51b81526001600160a01b038381166004830152600092839291169063cf54aaa09060240160206040518083038186803b15801561043157600080fd5b505afa158015610445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104699190613bc7565b60608501519091506001600160a01b03166316fac92a61048a83600a613f95565b8387600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c857600080fd5b505afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190613bdf565b885160405160e086901b6001600160e01b03191681526004810194909452602484019290925260ff1660448301526001600160a01b03808816606484015216608482015260a40160206040518083038186803b15801561055f57600080fd5b505afa158015610573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105979190613bc7565b9150505b92915050565b600784015460009060ff166105d15760405162461bcd60e51b81526004016105c890613d44565b60405180910390fd5b60006105f4848760070160039054906101000a90046001600160a01b03166103e6565b90508460200151610606878684610cf3565b106106495760405162461bcd60e51b81526020600482015260136024820152724c6f636b6572733a206973206865616c74687960681b60448201526064016105c8565b600061065787878785611c9f565b9050866003015481111561066c575060038601545b808411156106ca5760405162461bcd60e51b815260206004820152602560248201527f4c6f636b6572733a206e6f7420656e6f75676820636f6c6c61746572616c20746044820152646f2062757960d81b60648201526084016105c8565b6106ee86868960070160039054906101000a90046001600160a01b03168786612076565b92506106fb836001613ef5565b979650505050505050565b6000808260c00151846000015161071d8786611498565b610727919061404d565b6107319190613f32565b9050846004015481111561075657600485015461074e908261406c565b91505061075c565b60009150505b9392505050565b600784015460009060ff1661078a5760405162461bcd60e51b81526004016105c890613d44565b60608401516001600160a01b03166316fac92a6107a78486613ef5565b86600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e457600080fd5b505afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c9190613bdf565b608088015160078a015460405163067aa55560e51b81526001600160a01b0363010000009092048216600482015291169063cf54aaa09060240160206040518083038186803b15801561086e57600080fd5b505afa158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a69190613bc7565b885160078b015460405160e087901b6001600160e01b0319168152600481019590955260ff909316602485015260448401919091526001600160a01b039081166064840152630100000090910416608482015260a40160206040518083038186803b15801561091457600080fd5b505afa158015610928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094c9190613bc7565b90508460030154811115610961575060038401545b80856003016000828254610975919061406c565b909155509095945050505050565b6007850154600090819060ff166109ac5760405162461bcd60e51b81526004016105c890613d44565b600085606001516001600160a01b03166316fac92a8588600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ff57600080fd5b505afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a379190613bdf565b60808a015160078d015460405163067aa55560e51b81526001600160a01b0363010000009092048216600482015291169063cf54aaa09060240160206040518083038186803b158015610a8957600080fd5b505afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190613bc7565b8a5160078e015460405160e087901b6001600160e01b0319168152600481019590955260ff909316602485015260448401919091526001600160a01b039081166064840152630100000090910416608482015260a40160206040518083038186803b158015610b2f57600080fd5b505afa158015610b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b679190613bc7565b905083610b74868361404d565b610b7e9190613f32565b875160e088015191945090610b93908361404d565b610b9d9190613f32565b6003890154909250610baf8385613ef5565b1115610bed57610bbf8284613ef5565b6003890154610bce908561404d565b610bd89190613f32565b9250828860030154610bea919061406c565b91505b610bf78284613ef5565b886003016000828254610c0a919061406c565b90915550506004880154841115610c2357876004015493505b83886004016000828254610c37919061406c565b9250508190555083886005016000828254610c529190613ef5565b9250508190555081886006016000828254610c6d9190613ef5565b92505081905550509550959350505050565b600783015460009060ff16610ca65760405162461bcd60e51b81526004016105c890613d18565b6000610cc9838660070160039054906101000a90046001600160a01b03166103e6565b90506000610cd986868685611c9f565b9050610ce9818760030154612a9d565b9695505050505050565b6000808460040154118015610d0c575060008360e00151115b610d6f5760405162461bcd60e51b815260206004820152602e60248201527f4c6f636b6572733a206e65744d696e746564206f72206c69717569646174696f60448201526d6e526174696f206973207a65726f60901b60648201526084016105c8565b6080830151600785015460405163067aa55560e51b81526001600160a01b0363010000009092048216600482015291169063cf54aaa09060240160206040518083038186803b158015610dc157600080fd5b505afa158015610dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df99190613bc7565b610e04906001613ef5565b610e0f90600a613f95565b8360e001518560040154610e23919061404d565b610e2d919061404d565b83600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6a57600080fd5b505afa158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea29190613bdf565b610ead906001613f0d565b610eb890600a613fa1565b6003860154610ec7908561404d565b610ed1919061404d565b610edb9190613f32565b949350505050565b8154600090815b81811015611168576000866000878481548110610f1757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604090810190912081516101808101909252805482908290610f57906140af565b80601f0160208091040260200160405190810160405280929190818152602001828054610f83906140af565b8015610fd05780601f10610fa557610100808354040283529160200191610fd0565b820191906000526020600020905b815481529060010190602001808311610fb357829003601f168201915b5050509183525050600182015460209091019060ff16600581111561100557634e487b7160e01b600052602160045260246000fd5b600581111561102457634e487b7160e01b600052602160045260246000fd5b8152602001600282018054611038906140af565b80601f0160208091040260200160405190810160405280929190818152602001828054611064906140af565b80156110b15780601f10611086576101008083540402835291602001916110b1565b820191906000526020600020905b81548152906001019060200180831161109457829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154606082015260068201546080820152600782015460ff808216151560a08401526101008083048216151560c0850152620100008304909116151560e08401526001600160a01b036301000000909204821690830152600890920154610120909101526101408201519192509081169086161415611155576000935050505061075c565b5080611160816140ea565b915050610eea565b50600195945050505050565b61117c613245565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250606081018690526001610100820152602081018560058111156111e857634e487b7160e01b600052602160045260246000fd5b9081600581111561120957634e487b7160e01b600052602160045260246000fd5b8152505083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040808701959095526001600160a01b03871661014087015233815260208e815294902085518051879692955061127c94508593509101906132b6565b50602082015160018083018054909160ff19909116908360058111156112b257634e487b7160e01b600052602160045260246000fd5b0217905550604082015180516112d29160028401916020909101906132b6565b50606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e08201516007820180546101008086015161012087015161014088015161ffff1990941695151561ff001916959095179015159091021762010000600160b81b03191662010000931515939093026301000000600160b81b0319169290921763010000006001600160a01b039093169290920291909117905561016090910151600890910155505050505050505050565b6113978382612ab3565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905550565b6000806113d985846103e6565b9050610ce98686858785612076565b600783015460ff1661140c5760405162461bcd60e51b81526004016105c890613d18565b60a08201516007840154630100000090046001600160a01b0390811691161461145057600783015461145090630100000090046001600160a01b0316333084612c19565b808360030160008282546114649190613ef5565b9091555050505050565b61147a86858484612c79565b611485868686612eee565b611490868685612eee565b505050505050565b606081015160038301546080830151600785015460405163067aa55560e51b81526001600160a01b036301000000909204821660048201526000948216936316fac92a939092169063cf54aaa09060240160206040518083038186803b15801561150157600080fd5b505afa158015611515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115399190613bc7565b85600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561157657600080fd5b505afa15801561158a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ae9190613bdf565b6007880154875160405160e087901b6001600160e01b03191681526004810195909552602485019390935260ff9091166044840152630100000090046001600160a01b03908116606484015216608482015260a40160206040518083038186803b15801561161b57600080fd5b505afa15801561162f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c9190613bc7565b61165b613245565b6001600160a01b03821660009081526020869052604090206007015460ff166116965760405162461bcd60e51b81526004016105c890613d18565b6118ba856000846001600160a01b03166001600160a01b03168152602001908152602001600020604051806101800160405290816000820180546116d9906140af565b80601f0160208091040260200160405190810160405280929190818152602001828054611705906140af565b80156117525780601f1061172757610100808354040283529160200191611752565b820191906000526020600020905b81548152906001019060200180831161173557829003601f168201915b5050509183525050600182015460209091019060ff16600581111561178757634e487b7160e01b600052602160045260246000fd5b60058111156117a657634e487b7160e01b600052602160045260246000fd5b81526020016002820180546117ba906140af565b80601f01602080910402602001604051908101604052809291908181526020018280546117e6906140af565b80156118335780601f1061180857610100808354040283529160200191611833565b820191906000526020600020905b81548152906001019060200180831161181657829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154606082015260068201546080820152600782015460ff808216151560a08401526101008083048216151560c0850152620100008304909116151560e084015263010000009091046001600160a01b03169082015260089091015461012090910152612345565b156118ff5760405162461bcd60e51b81526020600482015260156024820152744c6f636b6572733a207374696c6c2061637469766560581b60448201526064016105c8565b6001600160a01b038216600090815260208690526040902060040154156119605760405162461bcd60e51b8152602060048201526015602482015274131bd8dad95c9cce880c081b995d081b5a5b9d1959605a1b60448201526064016105c8565b6001600160a01b038216600090815260208690526040902060050154156119c95760405162461bcd60e51b815260206004820152601b60248201527f4c6f636b6572733a203020736c617368696e6720434f5245425443000000000060448201526064016105c8565b6001600160a01b03821660009081526020869052604090819020815161018081019092528054829082906119fc906140af565b80601f0160208091040260200160405190810160405280929190818152602001828054611a28906140af565b8015611a755780601f10611a4a57610100808354040283529160200191611a75565b820191906000526020600020905b815481529060010190602001808311611a5857829003601f168201915b5050509183525050600182015460209091019060ff166005811115611aaa57634e487b7160e01b600052602160045260246000fd5b6005811115611ac957634e487b7160e01b600052602160045260246000fd5b8152602001600282018054611add906140af565b80601f0160208091040260200160405190810160405280929190818152602001828054611b09906140af565b8015611b565780601f10611b2b57610100808354040283529160200191611b56565b820191906000526020600020905b815481529060010190602001808311611b3957829003601f168201915b5050509183525050600382015460208083019190915260048301546040808401919091526005840154606084015260068401546080840152600784015460ff808216151560a08601526101008083048216151560c0870152620100008304909116151560e08601526001600160a01b036301000000909204821690850152600890940154610120909301929092529185166000908152918890529081902090519192508591611c059190613c6a565b908152604080516020928190038301902080546001600160a01b03191690556001600160a01b038416600090815291879052812090611c44828261333a565b60018201805460ff19169055611c5e60028301600061333a565b506000600382018190556004820181905560058201819055600682018190556007820180546001600160b81b0319169055600890910155610edb8383612ab3565b60008083600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611cdf57600080fd5b505afa158015611cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d179190613bdf565b6080850151600788015460405163067aa55560e51b81526001600160a01b0363010000009092048216600482015260ff93909316935060009291169063cf54aaa09060240160206040518083038186803b158015611d7457600080fd5b505afa158015611d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dac9190613bc7565b9050611db982600a613f95565b848860030154611dc9919061404d565b611dd3919061404d565b611dde82600a613f95565b8660e0015189600401548960400151611df7919061404d565b611e01919061404d565b611e0b919061404d565b1015611e595760405162461bcd60e51b815260206004820152601b60248201527f4c6f636b6572733a20696e76616c696420616e7465636564656e74000000000060448201526064016105c8565b611e6482600a613f95565b611e6e908561404d565b865161010087015160e088015160408a01518891611e8b9161404d565b611e95919061404d565b611e9f919061404d565b611ea99190613f32565b11611ef65760405162461bcd60e51b815260206004820152601b60248201527f4c6f636b6572733a20696e76616c696420636f6e73657175656e74000000000060448201526064016105c8565b6000611f0383600a613f95565b858960030154611f13919061404d565b611f1d919061404d565b611f2883600a613f95565b8760e001518a600401548a60400151611f41919061404d565b611f4b919061404d565b611f55919061404d565b611f5f919061406c565b90506000611f6e84600a613f95565b611f78908761404d565b885161010089015160e08a015160408c01518a91611f959161404d565b611f9f919061404d565b611fa9919061404d565b611fb39190613f32565b611fbd919061406c565b9050611fc98183613f32565b9998505050505050505050565b600782015460009060ff16611ffd5760405162461bcd60e51b81526004016105c890613d18565b6000612020838560070160039054906101000a90046001600160a01b03166103e6565b90506000811161206b5760405162461bcd60e51b81526020600482015260166024820152754c6f636b6572733a20696e76616c696420707269636560501b60448201526064016105c8565b610597848483610cf3565b608084015160405163067aa55560e51b81526001600160a01b038581166004830152600092169063cf54aaa09060240160206040518083038186803b1580156120be57600080fd5b505afa1580156120d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f69190613bc7565b61210190600a613f95565b865161210d919061404d565b61010086015161211d848661404d565b612127919061404d565b610ce99190613f32565b33600090815260208790526040902060070154610100900460ff16156121915760405162461bcd60e51b81526020600482015260156024820152744c6f636b6572733a2069732063616e64696461746560581b60448201526064016105c8565b3360009081526020879052604090206007015460ff16156121e95760405162461bcd60e51b81526020600482015260126024820152712637b1b5b2b9399d1034b9903637b1b5b2b960711b60448201526064016105c8565b608084015160405163b12ac2b360e01b81526001600160a01b038381166004830152602482018590529091169063b12ac2b39060440160006040518083038186803b15801561223757600080fd5b505afa15801561224b573d6000803e3d6000fd5b505050508460a001516001600160a01b0316816001600160a01b031614156122bc578134146122bc5760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a20696e636f727265637420434f524520616d6f756e74000060448201526064016105c8565b6001600160a01b038316156123135760405162461bcd60e51b815260206004820152601c60248201527f4c6f636b6572733a2075736564206c6f636b696e67207363726970740000000060448201526064016105c8565b8460a001516001600160a01b0316816001600160a01b031614611490576114906001600160a01b038216333085612c19565b60008160e00151801561059b5750610160820151158061059b5750506101600151421090565b612373613245565b6001600160a01b038216600090815260208590526040902060070154610100900460ff166123d55760405162461bcd60e51b815260206004820152600f60248201526e4c6f636b6572733a206e6f2072657160881b60448201526064016105c8565b6001600160a01b0382166000908152602085905260409081902081516101808101909252805482908290612408906140af565b80601f0160208091040260200160405190810160405280929190818152602001828054612434906140af565b80156124815780601f1061245657610100808354040283529160200191612481565b820191906000526020600020905b81548152906001019060200180831161246457829003601f168201915b5050509183525050600182015460209091019060ff1660058111156124b657634e487b7160e01b600052602160045260246000fd5b60058111156124d557634e487b7160e01b600052602160045260246000fd5b81526020016002820180546124e9906140af565b80601f0160208091040260200160405190810160405280929190818152602001828054612515906140af565b80156125625780601f1061253757610100808354040283529160200191612562565b820191906000526020600020905b81548152906001019060200180831161254557829003601f168201915b5050509183525050600382015460208083019190915260048301546040808401919091526005840154606084015260068401546080840152600784015460ff808216151560a08601526101008083048216151560c0870152620100008304909116151560e08601526001600160a01b03630100000090920482169085015260089094015461012090930192909252918516600090815291879052812091925061260b828261333a565b60018201805460ff1916905561262560028301600061333a565b506000600382018190556004820181905560058201819055600682018190556007820180546001600160b81b031916905560089091015561075c8383612ab3565b600784015460ff1661268a5760405162461bcd60e51b81526004016105c890613d18565b6126aa84604051806101800160405290816000820180546116d9906140af565b156126ef5760405162461bcd60e51b81526020600482015260156024820152744c6f636b6572733a207374696c6c2061637469766560581b60448201526064016105c8565b6000612712838660070160039054906101000a90046001600160a01b03166103e6565b6080840151600787015460405163067aa55560e51b81526001600160a01b0363010000009092048216600482015292935060009291169063cf54aaa09060240160206040518083038186803b15801561276a57600080fd5b505afa15801561277e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a29190613bc7565b90506000866004015482600a6127b89190613f95565b8660c001516127c7919061404d565b875160038a01546127d990879061404d565b6127e3919061404d565b6127ed9190613f32565b6127f7919061406c565b905060008361280784600a613f95565b612811908461404d565b61281b9190613f32565b9050808511156128815760405162461bcd60e51b815260206004820152602b60248201527f4c6f636b6572733a206d6f7265207468616e206d61782072656d6f7661626c6560448201526a0818dbdb1b185d195c985b60aa1b60648201526084016105c8565b608086015160078901546040516374ad74e960e01b81526001600160a01b036301000000909204821660048201529116906374ad74e99060240160206040518083038186803b1580156128d357600080fd5b505afa1580156128e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290b9190613bc7565b85896003015461291b919061406c565b10156129735760405162461bcd60e51b815260206004820152602160248201527f4c6f636b6572733a206c657373207468616e206d696e20636f6c6c61746572616044820152601b60fa1b60648201526084016105c8565b84886003016000828254612987919061406c565b90915550505050505050505050565b600782015460009060ff166129bd5760405162461bcd60e51b81526004016105c890613d44565b8260060154821115612a275760405162461bcd60e51b815260206004820152602d60248201527f4c6f636b6572733a206e6f7420656e6f75676820736c617368656420636f6c6c60448201526c61746572616c20746f2062757960981b60648201526084016105c8565b8260060154828460050154612a3c919061404d565b612a469190613f32565b90508260050154811015612a6257612a5f816001613ef5565b90505b80836005016000828254612a76919061406c565b9250508190555081836006016000828254612a91919061406c565b90915550909392505050565b6000818310612aac578161075c565b5090919050565b815460005b81811015612b1c57826001600160a01b0316848281548110612aea57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415612b0a57612b1c565b80612b14816140ea565b915050612ab8565b81811415612b2a5750505050565b612b3560018361406c565b811015612bd35783612b4860018461406c565b81548110612b6657634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316848281548110612ba457634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b83805480612bf157634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612c7390859061305b565b50505050565b825415612cdd5760405162461bcd60e51b815260206004820152602c60248201527f4c6f636b6572733a2063616e646964617465206c6f636b65727320697320616c60448201526b1c9958591e481a5b9a5d195960a21b60648201526084016105c8565b80825114612d3d5760405162461bcd60e51b815260206004820152602760248201527f4c6f636b6572733a207461726765742061646472657373206c697374206973206044820152661a5b9d985b1a5960ca1b60648201526084016105c8565b60005b81811015612ee7576000838281518110612d6a57634e487b7160e01b600052603260045260246000fd5b60200260200101519050856000826001600160a01b03166001600160a01b0316815260200190815260200160002060070160019054906101000a900460ff16612df55760405162461bcd60e51b815260206004820152601960248201527f4c6f636b6572733a206973206e6f742063616e6469646174650000000000000060448201526064016105c8565b60005b8554811015612ea457858181548110612e2157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0383811691161415612e925760405162461bcd60e51b815260206004820152602160248201527f4c6f636b6572733a206475706c696361746520746172676574206164647265736044820152607360f81b60648201526084016105c8565b80612e9c816140ea565b915050612df8565b5084546001810186556000868152602090200180546001600160a01b0319166001600160a01b039290921691909117905580612edf816140ea565b915050612d40565b5050505050565b60005b8154811015612c73576000846000848481548110612f1f57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020600381015490915015801590612f6b57506007810154630100000090046001600160a01b0316155b15612f8c576007810180546301000000600160b81b03191663010000001790555b600781015460ff168015612fa257506008810154155b8015612ff557506000846000858581548110612fce57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b156130485783600084848154811061301d57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460088201555b5080613053816140ea565b915050612ef1565b60006130b0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131359092919063ffffffff16565b90508051600014806130d15750808060200190518101906130d191906135cf565b6131305760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105c8565b505050565b6060610edb848460008585600080866001600160a01b0316858760405161315c9190613c4e565b60006040518083038185875af1925050503d8060008114613199576040519150601f19603f3d011682016040523d82523d6000602084013e61319e565b606091505b50915091506106fb878383876060831561321657825161320f576001600160a01b0385163b61320f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105c8565b5081610edb565b610edb838381511561322b5781518083602001fd5b8060405162461bcd60e51b81526004016105c89190613d05565b604080516101808101909152606081526020810160008152602001606081526020016000815260200160008152602001600081526020016000815260200160001515815260200160001515815260200160001515815260200160006001600160a01b03168152602001600081525090565b8280546132c2906140af565b90600052602060002090601f0160209004810192826132e4576000855561332a565b82601f106132fd57805160ff191683800117855561332a565b8280016001018555821561332a579182015b8281111561332a57825182559160200191906001019061330f565b50613336929150613377565b5090565b508054613346906140af565b6000825580601f10613356575050565b601f0160209004906000526020600020908101906133749190613377565b50565b5b808211156133365760008155600101613378565b80356001600160a01b03811681146133a357600080fd5b919050565b80356133a381614131565b60008083601f8401126133c4578182fd5b50813567ffffffffffffffff8111156133db578182fd5b6020830191508360208285010111156133f357600080fd5b9250929050565b600082601f83011261340a578081fd5b813567ffffffffffffffff8111156134245761342461411b565b613437601f8201601f1916602001613ec4565b81815284602083860101111561344b578283fd5b816020850160208301379081016020019190915292915050565b8035600681106133a357600080fd5b600060c08284031215613485578081fd5b60405160c0810181811067ffffffffffffffff821117156134a8576134a861411b565b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201526134e860a0840161338c565b60a08201525092915050565b60006101408284031215613506578081fd5b61350e613e76565b90506135198261338c565b81526135276020830161338c565b60208201526135386040830161338c565b60408201526135496060830161338c565b606082015261355a6080830161338c565b608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b6000806000606084860312156135af578283fd5b83359250602084013591506135c66040850161338c565b90509250925092565b6000602082840312156135e0578081fd5b815161075c81614131565b6000806000606084860312156135af578081fd5b60008060008060008060008060c0898b03121561361a578586fd5b88359750602089013567ffffffffffffffff80821115613638578788fd5b6136448c838d016133b3565b909950975060408b0135965087915061365f60608c01613465565b955060808b0135915080821115613674578485fd5b506136818b828c016133b3565b9094509250613694905060a08a0161338c565b90509295985092959890939650565b60008060008060008060c087890312156136bb578384fd5b8635955060208088013595506040880135945060608801359350608088013567ffffffffffffffff808211156136ef578485fd5b818a0191508a601f830112613702578485fd5b8135818111156137145761371461411b565b8060051b9150613725848301613ec4565b8181528481019084860184860187018f101561373f578889fd5b8895505b83861015613768576137548161338c565b835260019590950194918601918601613743565b5080975050505050505060a087013590509295509295509295565b60008060008060808587031215613798578182fd5b8435935060208501359250604085013591506137b66060860161338c565b905092959194509250565b60008060008060008061028087890312156137da578384fd5b863595506137eb8860208901613474565b94506137fa8860e089016134f4565b9350613809610220880161338c565b92506102408701359150613820610260880161338c565b90509295509295509295565b60006020828403121561383d578081fd5b813567ffffffffffffffff80821115613854578283fd5b908301906101808286031215613868578283fd5b613870613ea0565b82358281111561387e578485fd5b61388a878286016133fa565b82525061389960208401613465565b60208201526040830135828111156138af578485fd5b6138bb878286016133fa565b604083015250606083013560608201526080830135608082015260a083013560a082015260c083013560c08201526138f560e084016133a8565b60e0820152610100915061390a8284016133a8565b82820152610120915061391e8284016133a8565b82820152610140915061393282840161338c565b9181019190915261016091820135918101919091529392505050565b60008060006102208486031215613963578081fd5b833592506139748560208601613474565b91506135c68560e086016134f4565b6000806000806102408587031215613999578182fd5b843593506139aa8660208701613474565b92506139b98660e087016134f4565b939692955092936102200135925050565b600080600080600061026086880312156139e2578283fd5b853594506139f38760208801613474565b9350613a028760e088016134f4565b949793965093946102208101359450610240013592915050565b60008060006101008486031215613a31578081fd5b83359250613a428560208601613474565b915060e084013590509250925092565b6000806101608385031215613a65578182fd5b82359150613a7684602085016134f4565b90509250929050565b60008060006101808486031215613a94578081fd5b83359250613aa585602086016134f4565b915061016084013590509250925092565b6000806000806101a08587031215613acc578182fd5b84359350613add86602087016134f4565b939693955050505061016082013591610180013590565b60008060408385031215613b06578182fd5b50508035926020909101359150565b60008060008060006102608688031215613b2d578283fd5b613b378787613474565b9450613b468760c088016134f4565b9350613a02610200870161338c565b6000806000806102408587031215613b6b578182fd5b613b758686613474565b9350613b848660c087016134f4565b925061020085013591506137b6610220860161338c565b6000806101608385031215613bae578182fd5b613bb884846134f4565b9150613a76610140840161338c565b600060208284031215613bd8578081fd5b5051919050565b600060208284031215613bf0578081fd5b815160ff8116811461075c578182fd5b60008151808452613c18816020860160208601614083565b601f01601f19169290920160200192915050565b60068110613c4a57634e487b7160e01b600052602160045260246000fd5b9052565b60008251613c60818460208701614083565b9190910192915050565b600080835482600182811c915080831680613c8657607f831692505b6020808410821415613ca657634e487b7160e01b87526022600452602487fd5b818015613cba5760018114613ccb57613cf7565b60ff19861689528489019650613cf7565b60008a815260209020885b86811015613cef5781548b820152908501908301613cd6565b505084890196505b509498975050505050505050565b60208152600061075c6020830184613c00565b6020808252601290820152712637b1b5b2b9399d103737903637b1b5b2b960711b604082015260600190565b6020808252602c908201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060408201526b3b30b634b2103637b1b5b2b960a11b606082015260800190565b6020815260008251610180806020850152613daf6101a0850183613c00565b91506020850151613dc36040860182613c2c565b506040850151848303601f19016060860152613ddf8382613c00565b92505060608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100613e1f8187018315159052565b8601519050610120613e348682018315159052565b8601519050610140613e498682018315159052565b8601519050610160613e65868201836001600160a01b03169052565b959095015193019290925250919050565b604051610140810167ffffffffffffffff81118282101715613e9a57613e9a61411b565b60405290565b604051610180810167ffffffffffffffff81118282101715613e9a57613e9a61411b565b604051601f8201601f1916810167ffffffffffffffff81118282101715613eed57613eed61411b565b604052919050565b60008219821115613f0857613f08614105565b500190565b600060ff821660ff84168060ff03821115613f2a57613f2a614105565b019392505050565b600082613f4d57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115613f8d578160001904821115613f7357613f73614105565b80851615613f8057918102915b93841c9390800290613f57565b509250929050565b600061075c8383613fac565b600061075c60ff8416835b600082613fbb5750600161059b565b81613fc85750600061059b565b8160018114613fde5760028114613fe857614004565b600191505061059b565b60ff841115613ff957613ff9614105565b50506001821b61059b565b5060208310610133831016604e8410600b8410161715614027575081810a61059b565b6140318383613f52565b806000190482111561404557614045614105565b029392505050565b600081600019048311821515161561406757614067614105565b500290565b60008282101561407e5761407e614105565b500390565b60005b8381101561409e578181015183820152602001614086565b83811115612c735750506000910152565b600181811c908216806140c357607f821691505b602082108114156140e457634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156140fe576140fe614105565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461337457600080fdfea26469706673582212206c9422de8073d3e725c5c11375daa731ce5c1020c7030dd2aea416cb56d8bbbd64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}