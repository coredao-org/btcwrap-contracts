{
  "address": "0xA48f8079DcBe617b4F1Efe558d27d1de564e83E3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_acceptableDelay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_earnWrappedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_earnStrategy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "publishTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        }
      ],
      "name": "ExpiredPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "pairName0",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "pairName1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "err",
          "type": "string"
        }
      ],
      "name": "FailedQueryPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "anchorToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "InvalidExchangeRate",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceProxy",
          "type": "address"
        }
      ],
      "name": "AddPriceProxy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAcceptableDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAcceptableDelay",
          "type": "uint256"
        }
      ],
      "name": "NewAcceptableDelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBestPriceProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBestPriceProxy",
          "type": "address"
        }
      ],
      "name": "NewBestPriceProxy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldEarnStrategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newEarnStrategy",
          "type": "address"
        }
      ],
      "name": "NewEarnStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldEarnWrappedToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newEarnWrappedToken",
          "type": "address"
        }
      ],
      "name": "NewEarnWrappedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldPricePair",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newPricePair",
          "type": "string"
        }
      ],
      "name": "NewTokenPricePair",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceProxy",
          "type": "address"
        }
      ],
      "name": "RemovePriceProxy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EARN_EXCHANGE_RATE_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptableDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceProxy",
          "type": "address"
        }
      ],
      "name": "addPriceProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_pairName",
          "type": "string"
        }
      ],
      "name": "addTokenPricePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bestPriceProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnWrappedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_inputDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outputDecimals",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outputToken",
          "type": "address"
        }
      ],
      "name": "equivalentOutputAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceProxyListLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pricePairMap",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceProxyIdxMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "priceProxyList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceProxy",
          "type": "address"
        }
      ],
      "name": "removePriceProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceProxy",
          "type": "address"
        }
      ],
      "name": "selectBestPriceProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_acceptableDelay",
          "type": "uint256"
        }
      ],
      "name": "setAcceptableDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_earnStrategy",
          "type": "address"
        }
      ],
      "name": "setEarnStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_earnWrappedToken",
          "type": "address"
        }
      ],
      "name": "setEarnWrappedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPauseOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80373b06fbe83e474d2849d3f038ac0d08e3549231c9f5226bbc6da85110b5dc",
  "receipt": {
    "to": null,
    "from": "0xf13F4E007eB5C8e8201AdE0bE1C8946592818F42",
    "contractAddress": "0xA48f8079DcBe617b4F1Efe558d27d1de564e83E3",
    "transactionIndex": 0,
    "gasUsed": "2119973",
    "logsBloom": "0x
    "blockHash": "0x511f5eecf8c27f72e9a1ba31c6cbe49397d032763cccaa509c16b87071b1575c",
    "transactionHash": "0x80373b06fbe83e474d2849d3f038ac0d08e3549231c9f5226bbc6da85110b5dc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20706115,
        "transactionHash": "0x80373b06fbe83e474d2849d3f038ac0d08e3549231c9f5226bbc6da85110b5dc",
        "address": "0xA48f8079DcBe617b4F1Efe558d27d1de564e83E3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f13f4e007eb5c8e8201ade0be1c8946592818f42"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x511f5eecf8c27f72e9a1ba31c6cbe49397d032763cccaa509c16b87071b1575c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20706115,
        "transactionHash": "0x80373b06fbe83e474d2849d3f038ac0d08e3549231c9f5226bbc6da85110b5dc",
        "address": "0xA48f8079DcBe617b4F1Efe558d27d1de564e83E3",
        "topics": [
          "0x61fcc6fa9ba5b3ab5f72b919bc6324527ede6b5d73e12c63bbc4d4e0352e7002"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000096",
        "logIndex": 1,
        "blockHash": "0x511f5eecf8c27f72e9a1ba31c6cbe49397d032763cccaa509c16b87071b1575c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20706115,
        "transactionHash": "0x80373b06fbe83e474d2849d3f038ac0d08e3549231c9f5226bbc6da85110b5dc",
        "address": "0xA48f8079DcBe617b4F1Efe558d27d1de564e83E3",
        "topics": [
          "0xa76a970588e4cc207f50664c8951065866f7aa10d401016b97c2b305341d3b2b"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048c55da8e7d2107ccd8386233090b21f42a58beb",
        "logIndex": 2,
        "blockHash": "0x511f5eecf8c27f72e9a1ba31c6cbe49397d032763cccaa509c16b87071b1575c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20706115,
        "transactionHash": "0x80373b06fbe83e474d2849d3f038ac0d08e3549231c9f5226bbc6da85110b5dc",
        "address": "0xA48f8079DcBe617b4F1Efe558d27d1de564e83E3",
        "topics": [
          "0xd787371050564f7e1f5d4296c175eb9c15b9262213edf07121a386aa75eb7df7"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c2b71e7572476a0db1939fadd755d3dfe6b96374",
        "logIndex": 3,
        "blockHash": "0x511f5eecf8c27f72e9a1ba31c6cbe49397d032763cccaa509c16b87071b1575c"
      }
    ],
    "blockNumber": 20706115,
    "cumulativeGasUsed": "2119973",
    "status": 1,
    "byzantium": true
  },
  "args": [
    150,
    "0x48C55da8E7D2107CcD8386233090b21f42A58bEB",
    "0xC2b71E7572476A0Db1939FAdd755d3dFE6b96374"
  ],
  "numDeployments": 1,
  "solcInputHash": "337ac2624f401c2a057a8406658d0c6c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_acceptableDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_earnWrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_earnStrategy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"ExpiredPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pairName0\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pairName1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"err\",\"type\":\"string\"}],\"name\":\"FailedQueryPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchorToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"InvalidExchangeRate\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceProxy\",\"type\":\"address\"}],\"name\":\"AddPriceProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAcceptableDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAcceptableDelay\",\"type\":\"uint256\"}],\"name\":\"NewAcceptableDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBestPriceProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBestPriceProxy\",\"type\":\"address\"}],\"name\":\"NewBestPriceProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldEarnStrategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEarnStrategy\",\"type\":\"address\"}],\"name\":\"NewEarnStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldEarnWrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEarnWrappedToken\",\"type\":\"address\"}],\"name\":\"NewEarnWrappedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldPricePair\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newPricePair\",\"type\":\"string\"}],\"name\":\"NewTokenPricePair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceProxy\",\"type\":\"address\"}],\"name\":\"RemovePriceProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EARN_EXCHANGE_RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptableDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProxy\",\"type\":\"address\"}],\"name\":\"addPriceProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_pairName\",\"type\":\"string\"}],\"name\":\"addTokenPricePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bestPriceProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnWrappedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inputDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outputDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"}],\"name\":\"equivalentOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceProxyListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pricePairMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceProxyIdxMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceProxyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProxy\",\"type\":\"address\"}],\"name\":\"removePriceProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProxy\",\"type\":\"address\"}],\"name\":\"selectBestPriceProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_acceptableDelay\",\"type\":\"uint256\"}],\"name\":\"setAcceptableDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_earnStrategy\",\"type\":\"address\"}],\"name\":\"setEarnStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_earnWrappedToken\",\"type\":\"address\"}],\"name\":\"setEarnWrappedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPauseOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addPriceProxy(address)\":{\"details\":\"Only owner can call this                             The price proxy is an encapsulation of third-party oracle price retrieval methods                             You can obtain the prices of inputToken/outputToken from price proxy\",\"params\":{\"_priceProxy\":\"The address of the price proxy\"}},\"addTokenPricePair(address,string)\":{\"details\":\"Only owner can call this\",\"params\":{\"_pairName\":\"The price pair name (e.g. CORE/USDT  BTC/USDT)\",\"_token\":\"The address of the token\"}},\"constructor\":{\"params\":{\"_acceptableDelay\":\"Maximum acceptable delay for data given from Oracles\",\"_earnStrategy\":\"The address of the earn strategy contract\",\"_earnWrappedToken\":\"The address of the earn wrapped token (STCORE) contract\"}},\"equivalentOutputAmount(uint256,uint256,uint256,address,address)\":{\"params\":{\"_inputAmount\":\"Amount of the input token\",\"_inputDecimals\":\"Number of input token decimals\",\"_inputToken\":\"Address of the input token\",\"_outputDecimals\":\"Number of output token decimals\",\"_outputToken\":\"Address of output token\"},\"returns\":{\"_outputAmount\":\"          Amount of the output token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseOracle()\":{\"details\":\"Only owner can pause\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"removePriceProxy(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_priceProxy\":\"The address of the price proxy\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"selectBestPriceProxy(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_priceProxy\":\"The address of the price proxy\"}},\"setAcceptableDelay(uint256)\":{\"details\":\"If oracle data has not been updated for a while,                             we will consider the price as invalid\",\"params\":{\"_acceptableDelay\":\"Maximum acceptable delay (in seconds)\"}},\"setEarnStrategy(address)\":{\"params\":{\"_earnStrategy\":\"The address of the earn strategy contract\"}},\"setEarnWrappedToken(address)\":{\"params\":{\"_earnWrappedToken\":\"The address of the earn wrapped token (STCORE) contract\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unPauseOracle()\":{\"details\":\"Only owner can pause\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPriceProxy(address)\":{\"notice\":\"Adds a price proxy\"},\"addTokenPricePair(address,string)\":{\"notice\":\"Adds mapping between token and price pair\"},\"constructor\":{\"notice\":\"This contract is used to get relative price of two assets from available oracles\"},\"equivalentOutputAmount(uint256,uint256,uint256,address,address)\":{\"notice\":\"Finds amount of output token that has equal value                                 as the input amount of the input token from oracle\"},\"getPriceProxyListLength()\":{\"notice\":\"Getter for the length of oracle list\"},\"pauseOracle()\":{\"notice\":\"Pause the oracle, so only the functions can be called which are whenPaused\"},\"removePriceProxy(address)\":{\"notice\":\"Removes a price proxy\"},\"selectBestPriceProxy(address)\":{\"notice\":\"Selects a price proxy as the preferred one\"},\"setAcceptableDelay(uint256)\":{\"notice\":\"Sets acceptable delay for oracle responses\"},\"setEarnStrategy(address)\":{\"notice\":\"Sets the earn strategy contract address\"},\"setEarnWrappedToken(address)\":{\"notice\":\"Sets the earn wrapped token (STCORE) contract address\"},\"unPauseOracle()\":{\"notice\":\"Un-pause the oracle, so only the functions can be called which are whenNotPaused\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xde231558366826d7cb61725af8147965a61c53b77a352cc8c9af38fc5a92ac3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/oracle/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"./interfaces/IPriceProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\ncontract PriceOracle is IPriceOracle, Ownable2Step, Pausable {\\n\\n    using SafeCast for uint;\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"PriceOracle: zero address\\\");\\n        _;\\n    }\\n\\n    modifier notEmptyPairName(string memory _pairName) {\\n        require( bytes(_pairName).length > 0, \\\"PriceOracle: empty pair name\\\" );\\n        _;\\n    }\\n\\n    address public constant NATIVE_TOKEN = address(1);\\n    uint public constant EARN_EXCHANGE_RATE_DECIMALS = 6;\\n\\n    // Public variables\\n    mapping (address => string) public override pricePairMap;\\n    mapping (address => uint) public override priceProxyIdxMap;\\n    address[] public override priceProxyList;\\n    uint public override acceptableDelay;\\n    address public override bestPriceProxy;\\n\\n    address public override earnWrappedToken;\\n    address public override earnStrategy;\\n\\n    /// @notice                         This contract is used to get relative price of two assets from available oracles\\n    /// @param _acceptableDelay         Maximum acceptable delay for data given from Oracles\\n    /// @param _earnWrappedToken        The address of the earn wrapped token (STCORE) contract\\n    /// @param _earnStrategy            The address of the earn strategy contract\\n    constructor(\\n        uint _acceptableDelay,\\n        address _earnWrappedToken,\\n        address _earnStrategy\\n    ) {\\n        _setAcceptableDelay(_acceptableDelay);\\n        _setEarnWrappedToken(_earnWrappedToken);\\n        _setEarnStrategy(_earnStrategy);\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice                 Getter for the length of oracle list\\n    function getPriceProxyListLength() external view override returns (uint) {\\n        return priceProxyList.length;\\n    }\\n\\n    /// @notice                     Adds a price proxy\\n    /// @dev                        Only owner can call this\\n    ///                             The price proxy is an encapsulation of third-party oracle price retrieval methods\\n    ///                             You can obtain the prices of inputToken/outputToken from price proxy\\n    /// @param _priceProxy          The address of the price proxy\\n    function addPriceProxy(\\n        address _priceProxy\\n    ) external override nonZeroAddress(_priceProxy) onlyOwner {\\n        uint idx = priceProxyIdxMap[_priceProxy];\\n        require( idx == 0, \\\"PriceOracle: price proxy already exists\\\" );\\n\\n        priceProxyList.push( _priceProxy );\\n        priceProxyIdxMap[_priceProxy] = priceProxyList.length;\\n\\n        emit AddPriceProxy(_priceProxy);\\n    }\\n\\n    /// @notice                     Removes a price proxy\\n    /// @dev                        Only owner can call this\\n    /// @param _priceProxy          The address of the price proxy\\n    function removePriceProxy(\\n        address _priceProxy\\n    ) external override nonZeroAddress(_priceProxy) onlyOwner {\\n        uint idx = priceProxyIdxMap[_priceProxy];\\n        require(idx != 0, \\\"PriceOracle: price proxy does not exists\\\");\\n\\n        require(_priceProxy != bestPriceProxy, \\\"PriceOracle: can not remove best price proxy\\\");\\n\\n        if (idx < priceProxyList.length) {\\n            priceProxyList[idx - 1] = priceProxyList[priceProxyList.length - 1];\\n            priceProxyIdxMap[priceProxyList[idx - 1]] = idx;\\n        }\\n\\n        priceProxyList.pop();\\n        delete priceProxyIdxMap[_priceProxy];\\n        emit RemovePriceProxy(_priceProxy);\\n    }\\n\\n    /// @notice                         Finds amount of output token that has equal value\\n    ///                                 as the input amount of the input token from oracle\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputDecimals           Number of input token decimals\\n    /// @param _outputDecimals          Number of output token decimals\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return _outputAmount           Amount of the output token\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view nonZeroAddress(_inputToken) nonZeroAddress(_outputToken) override returns (uint _outputAmount) {\\n        bool result;\\n        (result, _outputAmount, /*timestamp*/) = _equivalentOutputAmountFromOracle(\\n            _inputAmount,\\n            _inputDecimals,\\n            _outputDecimals,\\n            _inputToken,\\n            _outputToken\\n        );\\n        require(result == true, \\\"PriceOracle: oracle does not exist or price is not up to date\\\");\\n    }\\n\\n    /// @notice                     Selects a price proxy as the preferred one\\n    /// @dev                        Only owner can call this\\n    /// @param _priceProxy          The address of the price proxy\\n    function selectBestPriceProxy(\\n        address _priceProxy\\n    ) external override nonZeroAddress(_priceProxy) onlyOwner {\\n        uint idx = priceProxyIdxMap[_priceProxy];\\n        require(idx != 0, \\\"PriceOracle: price proxy does not exists\\\");\\n\\n        require(_priceProxy != bestPriceProxy, \\\"PriceOracle: price proxy is already best\\\");\\n\\n        emit NewBestPriceProxy(bestPriceProxy, _priceProxy);\\n        bestPriceProxy = _priceProxy;\\n    }\\n\\n    /// @notice                     Adds mapping between token and price pair\\n    /// @dev                        Only owner can call this\\n    /// @param _token               The address of the token\\n    /// @param _pairName            The price pair name (e.g. CORE/USDT  BTC/USDT)\\n    function addTokenPricePair(\\n        address _token,\\n        string memory _pairName\\n    ) external override nonZeroAddress(_token) notEmptyPairName(_pairName) onlyOwner  {\\n        string memory oldPricePair = pricePairMap[_token];\\n\\n        require(\\n            !Strings.equal(oldPricePair, _pairName),\\n            \\\"PriceOracle: price pair already exists\\\"\\n        );\\n\\n        pricePairMap[_token] = _pairName;\\n        emit NewTokenPricePair(_token, oldPricePair, _pairName);\\n    }\\n\\n    /// @notice                     Sets the earn wrapped token (STCORE) contract address\\n    /// @param _earnWrappedToken    The address of the earn wrapped token (STCORE) contract\\n    function setEarnWrappedToken(address _earnWrappedToken) external override onlyOwner {\\n        _setEarnWrappedToken(_earnWrappedToken);\\n    }\\n\\n    /// @notice                     Sets the earn strategy contract address\\n    /// @param _earnStrategy        The address of the earn strategy contract\\n    function setEarnStrategy(address _earnStrategy) external override onlyOwner {\\n        _setEarnStrategy(_earnStrategy);\\n    }\\n\\n    /// @notice                     Sets acceptable delay for oracle responses\\n    /// @dev                        If oracle data has not been updated for a while,\\n    ///                             we will consider the price as invalid\\n    /// @param _acceptableDelay     Maximum acceptable delay (in seconds)\\n    function setAcceptableDelay(uint _acceptableDelay) external override onlyOwner {\\n        _setAcceptableDelay(_acceptableDelay);\\n    }\\n\\n    /// @notice                     Pause the oracle, so only the functions can be called which are whenPaused\\n    /// @dev                        Only owner can pause\\n    function pauseOracle() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice                     Un-pause the oracle, so only the functions can be called which are whenNotPaused\\n    /// @dev                        Only owner can pause\\n    function unPauseOracle() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice                     Internal setter for the earn wrapped token (STCORE) contract address\\n    /// @param _earnWrappedToken    The address of the earn wrapped token (STCORE) contract\\n    function _setEarnWrappedToken(address _earnWrappedToken) private nonZeroAddress(_earnWrappedToken) {\\n        require(\\n            _earnWrappedToken != earnWrappedToken,\\n            \\\"PriceOracle: earn wrapped token unchanged\\\"\\n        );\\n\\n        emit NewEarnWrappedToken(earnWrappedToken, _earnWrappedToken);\\n        earnWrappedToken = _earnWrappedToken;\\n    }\\n\\n    /// @notice                     Internal setter for the earn strategy contract address\\n    /// @param _earnStrategy        The address of the earn strategy contract\\n    function _setEarnStrategy(address _earnStrategy) private nonZeroAddress(_earnStrategy) {\\n        require(\\n            _earnStrategy != earnStrategy,\\n            \\\"PriceOracle: earn strategy unchanged\\\"\\n        );\\n\\n        emit NewEarnStrategy(earnStrategy, _earnStrategy);\\n        earnStrategy = _earnStrategy;\\n    }\\n\\n    /// @notice                     Internal setter for acceptable delay for oracle responses\\n    /// @dev                        If oracle data has not been updated for a while,\\n    ///                             we will consider the price as invalid\\n    /// @param _acceptableDelay     Maximum acceptable delay (in seconds)\\n    function _setAcceptableDelay(uint _acceptableDelay) private {\\n        emit NewAcceptableDelay(acceptableDelay, _acceptableDelay);\\n        require(\\n            _acceptableDelay > 0,\\n            \\\"PriceOracle: zero amount\\\"\\n        );\\n        acceptableDelay = _acceptableDelay;\\n    }\\n\\n    /// @notice                         Finds amount of output token that is equal as the input amount of the input token\\n    /// @dev                            The oracle is Pyth and Switchboard\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputDecimals           Number of input token decimals\\n    /// @param _outputDecimals          Number of output token decimals\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return _result                 True if getting amount was successful\\n    /// @return _outputAmount           Amount of the output token\\n    /// @return _timestamp              Timestamp of the result\\n    function _equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) private view returns (bool, uint _outputAmount, uint _timestamp) {\\n        if (_inputToken == _outputToken) {\\n            if (_inputDecimals == _outputDecimals) {\\n                return (true, _inputAmount, block.timestamp);\\n            } else {\\n                return (true, _inputAmount * 10 ** (_outputDecimals+1) / 10 ** (_inputDecimals + 1), block.timestamp);\\n            }\\n        }\\n\\n        (IPriceProxy.Price memory price0, uint exchangeRate0, uint exchangeRateDecimals0,\\n            IPriceProxy.Price memory price1, uint exchangeRate1, uint exchangeRateDecimals1) = _getEmaPricesFromOracle(_inputToken, _outputToken);\\n\\n        // convert the above calculation to the below one to eliminate precision loss\\n        uint outputAmount = (uint(price0.price * exchangeRate0) * 10**(price1.decimals + exchangeRateDecimals1))*_inputAmount*(10**(_outputDecimals + 1));\\n        outputAmount = outputAmount/((10**(_inputDecimals + 1))*(uint(price1.price * exchangeRate1) * 10**(price0.decimals + exchangeRateDecimals0)));\\n\\n        if (_abs(block.timestamp.toInt256() - price0.publishTime.toInt256()) > acceptableDelay) {\\n            revert ExpiredPrice(_inputToken, price0.publishTime, block.timestamp);\\n        }\\n\\n        if (_abs(block.timestamp.toInt256() - price1.publishTime.toInt256()) > acceptableDelay) {\\n            revert ExpiredPrice(_outputToken, price1.publishTime, block.timestamp);\\n        }\\n\\n        // choose earlier publishTime\\n        return (true, outputAmount, Math.min(price0.publishTime, price1.publishTime));\\n    }\\n\\n    /// @notice                     Get the EMA prices of two tokens from oracle by their addresses\\n    /// @param _token0              The address of the token0\\n    /// @param _token1              The address of the token1\\n    /// @return price0              The EMA price of the token0\\n    /// @return exchangeRate0       The exchange rate of the token0/anchorToken0 (e.g. stCore/Core)\\n    /// @return decimals0           Decimals of the exchangeRate0\\n    /// @return price1              The EMA price of the token1\\n    /// @return exchangeRate1       The exchange rate of the token1/anchorToken1 (e.g. stCore/Core)\\n    /// @return decimals1           Decimals of the exchangeRate1\\n    function _getEmaPricesFromOracle(\\n        address _token0,\\n        address _token1\\n    ) private nonZeroAddress(_token0) nonZeroAddress(_token1)\\n        view returns(IPriceProxy.Price memory price0, uint exchangeRate0, uint decimals0,\\n            IPriceProxy.Price memory price1, uint exchangeRate1, uint decimals1) {\\n\\n        address anchorToken0;\\n        address anchorToken1;\\n\\n        (exchangeRate0, decimals0, anchorToken0) = _getEarnExchangeRateAndAnchorToken(_token0);\\n        (exchangeRate1, decimals1, anchorToken1) = _getEarnExchangeRateAndAnchorToken(_token1);\\n\\n        (price0, price1) = _getEmaPricesByPairNamesFromOracle(pricePairMap[anchorToken0], pricePairMap[anchorToken1]);\\n    }\\n\\n\\n    /// @notice                     Get the EMA prices of two tokens from oracle by their pair names\\n    /// @param _pairName0           The first price pair name (e.g. CORE/USDT  BTC/USDT)\\n    /// @param _pairName1           The second price pair name (e.g. CORE/USDT  BTC/USDT)\\n    /// @return price0              The EMA price of the first price pair\\n    /// @return price1              The EMA price of the second price pair\\n    function _getEmaPricesByPairNamesFromOracle(\\n        string memory _pairName0,\\n        string memory _pairName1\\n    ) internal notEmptyPairName(_pairName0) notEmptyPairName(_pairName1)\\n        view returns(IPriceProxy.Price memory price0, IPriceProxy.Price memory price1) {\\n\\n        require(bestPriceProxy != address(0), \\\"PriceOracle: best price proxy is empty\\\");\\n\\n        string memory err;\\n\\n        // call best price proxy firstly\\n        (price0, price1, err) = IPriceProxy(bestPriceProxy).getEmaPricesByPairNames(_pairName0, _pairName1);\\n\\n        if (price0.price > 0 && price1.price > 0) {\\n            return (price0, price1);\\n        }\\n\\n        // call spare price proxy when the best one is not worked\\n        for (uint i = 0; i < priceProxyList.length; i++) {\\n\\n            if (priceProxyList[i] != bestPriceProxy) {\\n                (price0, price1, err) = IPriceProxy(priceProxyList[i]).getEmaPricesByPairNames(_pairName0, _pairName1);\\n\\n                if (price0.price > 0 && price1.price > 0) {\\n                    return (price0, price1);\\n                }\\n            }\\n        }\\n\\n        revert FailedQueryPrice(_pairName0, _pairName1, err);\\n    }\\n\\n    function _getEarnExchangeRateAndAnchorToken(address _token) internal view returns (uint exchangeRate, uint decimals, address anchorToken) {\\n        if (_token != earnWrappedToken) {\\n            return (1, 0, _token);\\n        }\\n\\n        bytes memory data = Address.functionStaticCall(\\n            earnStrategy,\\n            abi.encodeWithSignature(\\n                \\\"getCurrentExchangeRate()\\\"\\n            )\\n        );\\n\\n        exchangeRate = abi.decode(data, (uint));\\n        decimals = EARN_EXCHANGE_RATE_DECIMALS;\\n        anchorToken = NATIVE_TOKEN;\\n\\n        if (exchangeRate < 10**decimals) {\\n            revert InvalidExchangeRate(_token, anchorToken, exchangeRate, decimals);\\n        }\\n    }\\n\\n    /// @notice             Returns absolute value\\n    function _abs(int _value) private pure returns (uint) {\\n        return _value >= 0 ? uint(_value) : uint(-_value);\\n    }\\n}\",\"keccak256\":\"0x0aa503360a340f3927da5defc24de77c0d24079f4df921f8980fa07b1775c74f\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IPriceOracle {\\n\\n    // Events\\n    event NewAcceptableDelay(uint oldAcceptableDelay, uint newAcceptableDelay);\\n\\n    event AddPriceProxy(address indexed priceProxy);\\n\\n    event RemovePriceProxy(address indexed priceProxy);\\n\\n    event NewBestPriceProxy(address oldBestPriceProxy, address newBestPriceProxy);\\n\\n    event NewTokenPricePair(address indexed token, string oldPricePair, string newPricePair);\\n\\n    event NewEarnWrappedToken(address oldEarnWrappedToken, address newEarnWrappedToken);\\n\\n    event NewEarnStrategy(address oldEarnStrategy, address newEarnStrategy);\\n\\n    // Errors\\n    error ExpiredPrice(address token, uint publishTime, uint currentTime);\\n\\n    error FailedQueryPrice(string pairName0, string pairName1, string err);\\n\\n    error InvalidExchangeRate(address token, address anchorToken, uint exchangeRate, uint decimals);\\n\\n    // Read-only functions\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function pricePairMap(address _token) external view returns(string memory);\\n\\n    function priceProxyIdxMap(address _priceOracle) external view returns(uint);\\n\\n    function getPriceProxyListLength() external view returns(uint);\\n\\n    function priceProxyList(uint idx) external view returns(address);\\n\\n    function bestPriceProxy() external view returns(address);\\n\\n    function earnWrappedToken() external view returns(address);\\n\\n    function earnStrategy() external view returns(address);\\n\\n    // State-changing functions\\n\\n    function addPriceProxy(address _priceProxy) external;\\n\\n    function removePriceProxy(address _priceProxy) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n\\n    function selectBestPriceProxy(address _priceProxy) external;\\n\\n    function addTokenPricePair(\\n        address _token,\\n        string memory _pairName\\n    ) external;\\n\\n    function setEarnWrappedToken(address _token) external;\\n\\n    function setEarnStrategy(address _earn) external;\\n\\n    function pauseOracle() external;\\n\\n    function unPauseOracle() external;\\n}\",\"keccak256\":\"0x26a2069de2feb13eeb91f22eb916279acf086522b0d870cb1a65374fa6c0d241\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IPriceProxy {\\n    // Structs\\n    struct Price {\\n        // Price\\n        uint price;\\n        // Price exponent\\n        uint32 decimals;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // Events\\n    event NewOracle(address oldOracle, address newOracle);\\n\\n    event AddFeedId(string indexed token, bytes32 oldFeedId, bytes32 newFeedId);\\n\\n    // State-changing functions\\n    function setOracle(address _oracle) external;\\n\\n    // Read-only functions\\n    function oracle() external view returns(address);\\n\\n    function getFeedId(string memory _pairName) external view returns (bytes32 feedId);\\n\\n    function getEmaPriceByPairName(\\n        string memory _pairName\\n    ) external view returns(Price memory price, string memory err);\\n\\n    function getEmaPricesByPairNames(\\n        string memory _pairName0,\\n        string memory _pairName1\\n    ) external view returns(Price memory price0, Price memory price1, string memory err);\\n}\",\"keccak256\":\"0x796e513a2f4f81770ab9affd702c0ac4699adfc26aaab668dce220a8cf94f1f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620027ab380380620027ab833981016040819052620000349162000408565b6200003f3362000076565b6001805460ff60a01b191690556200005783620000a0565b620000628262000137565b6200006d816200026c565b50505062000448565b600180546001600160a01b03191690556200009d816200039b602090811b62000d0817901c565b50565b60055460408051918252602082018390527f61fcc6fa9ba5b3ab5f72b919bc6324527ede6b5d73e12c63bbc4d4e0352e7002910160405180910390a160008111620001325760405162461bcd60e51b815260206004820152601860248201527f50726963654f7261636c653a207a65726f20616d6f756e74000000000000000060448201526064015b60405180910390fd5b600555565b806001600160a01b038116620001905760405162461bcd60e51b815260206004820152601960248201527f50726963654f7261636c653a207a65726f206164647265737300000000000000604482015260640162000129565b6007546001600160a01b0383811691161415620002025760405162461bcd60e51b815260206004820152602960248201527f50726963654f7261636c653a206561726e207772617070656420746f6b656e206044820152681d5b98da185b99d95960ba1b606482015260840162000129565b600754604080516001600160a01b03928316815291841660208301527fa76a970588e4cc207f50664c8951065866f7aa10d401016b97c2b305341d3b2b910160405180910390a150600780546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116620002c55760405162461bcd60e51b815260206004820152601960248201527f50726963654f7261636c653a207a65726f206164647265737300000000000000604482015260640162000129565b6008546001600160a01b0383811691161415620003315760405162461bcd60e51b8152602060048201526024808201527f50726963654f7261636c653a206561726e20737472617465677920756e6368616044820152631b99d95960e21b606482015260840162000129565b600854604080516001600160a01b03928316815291841660208301527fd787371050564f7e1f5d4296c175eb9c15b9262213edf07121a386aa75eb7df7910160405180910390a150600880546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200040357600080fd5b919050565b6000806000606084860312156200041d578283fd5b835192506200042f60208501620003eb565b91506200043f60408501620003eb565b90509250925092565b61235380620004586000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806385098865116100de5780639a505a4f11610097578063e4b43d7511610071578063e4b43d7514610329578063e74dacbf14610349578063ecf56e311461035c578063f2fde38b1461036457600080fd5b80639a505a4f146102f2578063b2b9b6d814610305578063e30c39781461031857600080fd5b8063850988651461027f578063862efd4b146102925780638da5cb5b1461029b5780638f6c159f146102ac578063962bf3ba146102bf578063972ac857146102d257600080fd5b80634b93b2461161014b578063627b241611610125578063627b241614610249578063715018a61461025c57806379ba50971461026457806382f9ec3c1461026c57600080fd5b80634b93b246146102115780635c975abb146102245780635d5e106a1461024157600080fd5b806316fac92a146101935780631d4a7b21146101b95780632527e3f0146101ce578063253ea980146101d657806331f7d964146101de57806349efd169146101fe575b600080fd5b6101a66101a1366004611e74565b610377565b6040519081526020015b60405180910390f35b6101cc6101c7366004611e44565b610468565b005b6101a6600681565b6101cc61047c565b6101e6600181565b6040516001600160a01b0390911681526020016101b0565b6101cc61020c366004611d07565b61048e565b6101cc61021f366004611d07565b6105bc565b600154600160a01b900460ff1660405190151581526020016101b0565b6101cc610815565b6101cc610257366004611d07565b610825565b6101cc610964565b6101cc61096c565b6101cc61027a366004611d07565b6109e3565b6101cc61028d366004611d07565b6109f4565b6101a660055481565b6000546001600160a01b03166101e6565b6101e66102ba366004611e44565b610a05565b6008546101e6906001600160a01b031681565b6102e56102e0366004611d07565b610a2f565b6040516101b09190611f0b565b6101cc610300366004611d21565b610ac9565b6007546101e6906001600160a01b031681565b6001546001600160a01b03166101e6565b6101a6610337366004611d07565b60036020526000908152604090205481565b6006546101e6906001600160a01b031681565b6004546101a6565b6101cc610372366004611d07565b610c97565b6000826001600160a01b0381166103a95760405162461bcd60e51b81526004016103a090611f85565b60405180910390fd5b826001600160a01b0381166103d05760405162461bcd60e51b81526004016103a090611f85565b60006103df8989898989610d58565b509450905060018115151461045c5760405162461bcd60e51b815260206004820152603d60248201527f50726963654f7261636c653a206f7261636c6520646f6573206e6f742065786960448201527f7374206f72207072696365206973206e6f7420757020746f206461746500000060648201526084016103a0565b50505095945050505050565b610470610fac565b61047981611006565b50565b610484610fac565b61048c611097565b565b806001600160a01b0381166104b55760405162461bcd60e51b81526004016103a090611f85565b6104bd610fac565b6001600160a01b03821660009081526003602052604090205480156105345760405162461bcd60e51b815260206004820152602760248201527f50726963654f7261636c653a2070726963652070726f787920616c72656164796044820152662065786973747360c81b60648201526084016103a0565b600480546001810182557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b03861690811790915590546000828152600360205260408082209290925590517f9fd47d80f4e09e8d1fe56965a490c615ceb9b8235b3e3c2cc0e134a5c28037bc9190a2505050565b806001600160a01b0381166105e35760405162461bcd60e51b81526004016103a090611f85565b6105eb610fac565b6001600160a01b038216600090815260036020526040902054806106215760405162461bcd60e51b81526004016103a090611ff3565b6006546001600160a01b03848116911614156106945760405162461bcd60e51b815260206004820152602c60248201527f50726963654f7261636c653a2063616e206e6f742072656d6f7665206265737460448201526b2070726963652070726f787960a01b60648201526084016103a0565b60045481101561078b57600480546106ae90600190612215565b815481106106cc57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031660046106ee600184612215565b8154811061070c57634e487b7160e01b600052603260045260246000fd5b6000918252602082200180546001600160a01b0319166001600160a01b03939093169290921790915581906003906004610747600185612215565b8154811061076557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020555b60048054806107aa57634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038516808352600390915260408083208390555190917ffd28dd8b61e8e16b0a6949fb1f207e5fc8cc7d7e49c8c1ee7f637c88ad860eca91a2505050565b61081d610fac565b61048c6110f7565b806001600160a01b03811661084c5760405162461bcd60e51b81526004016103a090611f85565b610854610fac565b6001600160a01b0382166000908152600360205260409020548061088a5760405162461bcd60e51b81526004016103a090611ff3565b6006546001600160a01b03848116911614156108f95760405162461bcd60e51b815260206004820152602860248201527f50726963654f7261636c653a2070726963652070726f787920697320616c726560448201526718591e4818995cdd60c21b60648201526084016103a0565b600654604080516001600160a01b03928316815291851660208301527ffb54bc03946fcc998e4c3cd2f74f5f651adb3eb9a1367e64cb700e954a46f651910160405180910390a15050600680546001600160a01b0319166001600160a01b0392909216919091179055565b61048c610fac565b60015433906001600160a01b031681146109da5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016103a0565b61047981611133565b6109eb610fac565b6104798161114c565b6109fc610fac565b61047981611247565b60048181548110610a1557600080fd5b6000918252602090912001546001600160a01b0316905081565b60026020526000908152604090208054610a489061225c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a749061225c565b8015610ac15780601f10610a9657610100808354040283529160200191610ac1565b820191906000526020600020905b815481529060010190602001808311610aa457829003601f168201915b505050505081565b816001600160a01b038116610af05760405162461bcd60e51b81526004016103a090611f85565b816000815111610b125760405162461bcd60e51b81526004016103a090611fbc565b610b1a610fac565b6001600160a01b03841660009081526002602052604081208054610b3d9061225c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b699061225c565b8015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b50505050509050610bc78185611348565b15610c235760405162461bcd60e51b815260206004820152602660248201527f50726963654f7261636c653a207072696365207061697220616c72656164792060448201526565786973747360d01b60648201526084016103a0565b6001600160a01b03851660009081526002602090815260409091208551610c4c92870190611bee565b50846001600160a01b03167f6ea5d4c7abd2c9a5a473ef24015c90025b7ac6b38046888b3abb32fbb29efb478286604051610c88929190611f1e565b60405180910390a25050505050565b610c9f610fac565b600180546001600160a01b0383166001600160a01b03199091168117909155610cd06000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000836001600160a01b0316856001600160a01b03161415610dda5785871415610d8d57506001915086905042610fa1565b6001610d998882612094565b610da490600a61210f565b610daf886001612094565b610dba90600a61210f565b610dc4908b6121b7565b610dce91906120ac565b42925092509250610fa1565b600080600080600080610ded8b8b611364565b95509550955095509550955060008c6001610e089190612094565b610e1390600a61210f565b8f83866020015163ffffffff16610e2a9190612094565b610e3590600a61210f565b8951610e42908a906121b7565b610e4c91906121b7565b610e5691906121b7565b610e6091906121b7565b905084876020015163ffffffff16610e789190612094565b610e8390600a61210f565b8451610e909085906121b7565b610e9a91906121b7565b610ea58f6001612094565b610eb090600a61210f565b610eba91906121b7565b610ec490826120ac565b9050600554610ef1610ed98960400151611584565b610ee242611584565b610eec91906121d6565b6115f2565b1115610f2e5760408088015190516301af513360e21b81526001600160a01b038e16600482015260248101919091524260448201526064016103a0565b600554610f41610ed98660400151611584565b1115610f7e5760408085015190516301af513360e21b81526001600160a01b038d16600482015260248101919091524260448201526064016103a0565b600181610f9389604001518760400151611605565b995099509950505050505050505b955095509592505050565b6000546001600160a01b0316331461048c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103a0565b60055460408051918252602082018390527f61fcc6fa9ba5b3ab5f72b919bc6324527ede6b5d73e12c63bbc4d4e0352e7002910160405180910390a1600081116110925760405162461bcd60e51b815260206004820152601860248201527f50726963654f7261636c653a207a65726f20616d6f756e74000000000000000060448201526064016103a0565b600555565b61109f61161d565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110da3390565b6040516001600160a01b03909116815260200160405180910390a1565b6110ff61166a565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336110da565b600180546001600160a01b031916905561047981610d08565b806001600160a01b0381166111735760405162461bcd60e51b81526004016103a090611f85565b6008546001600160a01b03838116911614156111dd5760405162461bcd60e51b8152602060048201526024808201527f50726963654f7261636c653a206561726e20737472617465677920756e6368616044820152631b99d95960e21b60648201526084016103a0565b600854604080516001600160a01b03928316815291841660208301527fd787371050564f7e1f5d4296c175eb9c15b9262213edf07121a386aa75eb7df7910160405180910390a150600880546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b03811661126e5760405162461bcd60e51b81526004016103a090611f85565b6007546001600160a01b03838116911614156112de5760405162461bcd60e51b815260206004820152602960248201527f50726963654f7261636c653a206561726e207772617070656420746f6b656e206044820152681d5b98da185b99d95960ba1b60648201526084016103a0565b600754604080516001600160a01b03928316815291841660208301527fa76a970588e4cc207f50664c8951065866f7aa10d401016b97c2b305341d3b2b910160405180910390a150600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000818051906020012083805190602001201490505b92915050565b61138e604051806060016040528060008152602001600063ffffffff168152602001600081525090565b604080516060810182526000808252602082018190529181018290528190600080876001600160a01b0381166113d65760405162461bcd60e51b81526004016103a090611f85565b876001600160a01b0381166113fd5760405162461bcd60e51b81526004016103a090611f85565b6000806114098c6116ba565b919a50985091506114198b6116ba565b6001600160a01b03851660009081526002602052604090208054939950919750925061156e916114489061225c565b80601f01602080910402602001604051908101604052809291908181526020018280546114749061225c565b80156114c15780601f10611496576101008083540402835291602001916114c1565b820191906000526020600020905b8154815290600101906020018083116114a457829003601f168201915b5050506001600160a01b038516600090815260026020526040902080549092506114eb915061225c565b80601f01602080910402602001604051908101604052809291908181526020018280546115179061225c565b80156115645780601f1061153957610100808354040283529160200191611564565b820191906000526020600020905b81548152906001019060200180831161154757829003601f168201915b505050505061179e565b809850819b505050505050509295509295509295565b60006001600160ff1b038211156115ee5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016103a0565b5090565b6000808212156115ee5761135e826122b2565b60008183106116145781611616565b825b9392505050565b600154600160a01b900460ff161561048c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103a0565b600154600160a01b900460ff1661048c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103a0565b600754600090819081906001600160a01b038581169116146116e55750600191506000905082611797565b6008546040805160048152602481019091526020810180516001600160e01b0316633ca967f360e01b179052600091611729916001600160a01b0390911690611aae565b90508080602001905181019061173f9190611e5c565b9350600692506001915061175483600a61210f565b841015611795576040516327e48d3560e01b81526001600160a01b0380871660048301528316602482015260448101859052606481018490526084016103a0565b505b9193909250565b6117c8604051806060016040528060008152602001600063ffffffff168152602001600081525090565b6117f2604051806060016040528060008152602001600063ffffffff168152602001600081525090565b8360008151116118145760405162461bcd60e51b81526004016103a090611fbc565b8360008151116118365760405162461bcd60e51b81526004016103a090611fbc565b6006546001600160a01b031661189d5760405162461bcd60e51b815260206004820152602660248201527f50726963654f7261636c653a20626573742070726963652070726f787920697360448201526520656d70747960d01b60648201526084016103a0565b60065460405163b1fcb9b360e01b81526060916001600160a01b03169063b1fcb9b3906118d0908a908a90600401611f1e565b60006040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119249190810190611dac565b825192975090955091501580159061193c5750835115155b156119475750611aa5565b60005b600454811015611a8557600654600480546001600160a01b03909216918390811061198557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614611a7357600481815481106119c057634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405163b1fcb9b360e01b81526001600160a01b039091169063b1fcb9b3906119fb908b908b90600401611f1e565b60006040518083038186803b158015611a1357600080fd5b505afa158015611a27573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a4f9190810190611dac565b8251929850909650925015801590611a675750845115155b15611a73575050611aa5565b80611a7d81612297565b91505061194a565b50868682604051630fcf2f5960e41b81526004016103a093929190611f4c565b50509250929050565b606061161683836040518060600160405280602581526020016122f9602591396060600080856001600160a01b031685604051611aeb9190611eef565b600060405180830381855afa9150503d8060008114611b26576040519150601f19603f3d011682016040523d82523d6000602084013e611b2b565b606091505b5091509150611b3c86838387611b46565b9695505050505050565b60608315611bb2578251611bab576001600160a01b0385163b611bab5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103a0565b5081611bbc565b611bbc8383611bc4565b949350505050565b815115611bd45781518083602001fd5b8060405162461bcd60e51b81526004016103a09190611f0b565b828054611bfa9061225c565b90600052602060002090601f016020900481019282611c1c5760008555611c62565b82601f10611c3557805160ff1916838001178555611c62565b82800160010185558215611c62579182015b82811115611c62578251825591602001919060010190611c47565b506115ee9291505b808211156115ee5760008155600101611c6a565b80356001600160a01b0381168114611c9557600080fd5b919050565b600060608284031215611cab578081fd5b6040516060810181811067ffffffffffffffff82111715611cce57611cce6122e2565b806040525080915082518152602083015163ffffffff81168114611cf157600080fd5b6020820152604092830151920191909152919050565b600060208284031215611d18578081fd5b61161682611c7e565b60008060408385031215611d33578081fd5b611d3c83611c7e565b9150602083013567ffffffffffffffff811115611d57578182fd5b8301601f81018513611d67578182fd5b8035611d7a611d758261206c565b61203b565b818152866020838501011115611d8e578384fd5b81602084016020830137908101602001929092525090939092509050565b600080600060e08486031215611dc0578081fd5b611dca8585611c9a565b9250611dd98560608601611c9a565b915060c084015167ffffffffffffffff811115611df4578182fd5b8401601f81018613611e04578182fd5b8051611e12611d758261206c565b818152876020838501011115611e26578384fd5b611e3782602083016020860161222c565b8093505050509250925092565b600060208284031215611e55578081fd5b5035919050565b600060208284031215611e6d578081fd5b5051919050565b600080600080600060a08688031215611e8b578081fd5b853594506020860135935060408601359250611ea960608701611c7e565b9150611eb760808701611c7e565b90509295509295909350565b60008151808452611edb81602086016020860161222c565b601f01601f19169290920160200192915050565b60008251611f0181846020870161222c565b9190910192915050565b6020815260006116166020830184611ec3565b604081526000611f316040830185611ec3565b8281036020840152611f438185611ec3565b95945050505050565b606081526000611f5f6060830186611ec3565b8281036020840152611f718186611ec3565b90508281036040840152611b3c8185611ec3565b60208082526019908201527f50726963654f7261636c653a207a65726f206164647265737300000000000000604082015260600190565b6020808252601c908201527f50726963654f7261636c653a20656d7074792070616972206e616d6500000000604082015260600190565b60208082526028908201527f50726963654f7261636c653a2070726963652070726f787920646f6573206e6f604082015267742065786973747360c01b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715612064576120646122e2565b604052919050565b600067ffffffffffffffff821115612086576120866122e2565b50601f01601f191660200190565b600082198211156120a7576120a76122cc565b500190565b6000826120c757634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156121075781600019048211156120ed576120ed6122cc565b808516156120fa57918102915b93841c93908002906120d1565b509250929050565b600061161683836000826121255750600161135e565b816121325750600061135e565b816001811461214857600281146121525761216e565b600191505061135e565b60ff841115612163576121636122cc565b50506001821b61135e565b5060208310610133831016604e8410600b8410161715612191575081810a61135e565b61219b83836120cc565b80600019048211156121af576121af6122cc565b029392505050565b60008160001904831182151516156121d1576121d16122cc565b500290565b60008083128015600160ff1b8501841216156121f4576121f46122cc565b6001600160ff1b038401831381161561220f5761220f6122cc565b50500390565b600082821015612227576122276122cc565b500390565b60005b8381101561224757818101518382015260200161222f565b83811115612256576000848401525b50505050565b600181811c9082168061227057607f821691505b6020821081141561229157634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156122ab576122ab6122cc565b5060010190565b6000600160ff1b8214156122c8576122c86122cc565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a2646970667358221220f6dd09f5385b9ced0c413b5367f27329de1f45bf293fe55b71a0370492c3a64f64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c806385098865116100de5780639a505a4f11610097578063e4b43d7511610071578063e4b43d7514610329578063e74dacbf14610349578063ecf56e311461035c578063f2fde38b1461036457600080fd5b80639a505a4f146102f2578063b2b9b6d814610305578063e30c39781461031857600080fd5b8063850988651461027f578063862efd4b146102925780638da5cb5b1461029b5780638f6c159f146102ac578063962bf3ba146102bf578063972ac857146102d257600080fd5b80634b93b2461161014b578063627b241611610125578063627b241614610249578063715018a61461025c57806379ba50971461026457806382f9ec3c1461026c57600080fd5b80634b93b246146102115780635c975abb146102245780635d5e106a1461024157600080fd5b806316fac92a146101935780631d4a7b21146101b95780632527e3f0146101ce578063253ea980146101d657806331f7d964146101de57806349efd169146101fe575b600080fd5b6101a66101a1366004611e74565b610377565b6040519081526020015b60405180910390f35b6101cc6101c7366004611e44565b610468565b005b6101a6600681565b6101cc61047c565b6101e6600181565b6040516001600160a01b0390911681526020016101b0565b6101cc61020c366004611d07565b61048e565b6101cc61021f366004611d07565b6105bc565b600154600160a01b900460ff1660405190151581526020016101b0565b6101cc610815565b6101cc610257366004611d07565b610825565b6101cc610964565b6101cc61096c565b6101cc61027a366004611d07565b6109e3565b6101cc61028d366004611d07565b6109f4565b6101a660055481565b6000546001600160a01b03166101e6565b6101e66102ba366004611e44565b610a05565b6008546101e6906001600160a01b031681565b6102e56102e0366004611d07565b610a2f565b6040516101b09190611f0b565b6101cc610300366004611d21565b610ac9565b6007546101e6906001600160a01b031681565b6001546001600160a01b03166101e6565b6101a6610337366004611d07565b60036020526000908152604090205481565b6006546101e6906001600160a01b031681565b6004546101a6565b6101cc610372366004611d07565b610c97565b6000826001600160a01b0381166103a95760405162461bcd60e51b81526004016103a090611f85565b60405180910390fd5b826001600160a01b0381166103d05760405162461bcd60e51b81526004016103a090611f85565b60006103df8989898989610d58565b509450905060018115151461045c5760405162461bcd60e51b815260206004820152603d60248201527f50726963654f7261636c653a206f7261636c6520646f6573206e6f742065786960448201527f7374206f72207072696365206973206e6f7420757020746f206461746500000060648201526084016103a0565b50505095945050505050565b610470610fac565b61047981611006565b50565b610484610fac565b61048c611097565b565b806001600160a01b0381166104b55760405162461bcd60e51b81526004016103a090611f85565b6104bd610fac565b6001600160a01b03821660009081526003602052604090205480156105345760405162461bcd60e51b815260206004820152602760248201527f50726963654f7261636c653a2070726963652070726f787920616c72656164796044820152662065786973747360c81b60648201526084016103a0565b600480546001810182557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b03861690811790915590546000828152600360205260408082209290925590517f9fd47d80f4e09e8d1fe56965a490c615ceb9b8235b3e3c2cc0e134a5c28037bc9190a2505050565b806001600160a01b0381166105e35760405162461bcd60e51b81526004016103a090611f85565b6105eb610fac565b6001600160a01b038216600090815260036020526040902054806106215760405162461bcd60e51b81526004016103a090611ff3565b6006546001600160a01b03848116911614156106945760405162461bcd60e51b815260206004820152602c60248201527f50726963654f7261636c653a2063616e206e6f742072656d6f7665206265737460448201526b2070726963652070726f787960a01b60648201526084016103a0565b60045481101561078b57600480546106ae90600190612215565b815481106106cc57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031660046106ee600184612215565b8154811061070c57634e487b7160e01b600052603260045260246000fd5b6000918252602082200180546001600160a01b0319166001600160a01b03939093169290921790915581906003906004610747600185612215565b8154811061076557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031683528201929092526040019020555b60048054806107aa57634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038516808352600390915260408083208390555190917ffd28dd8b61e8e16b0a6949fb1f207e5fc8cc7d7e49c8c1ee7f637c88ad860eca91a2505050565b61081d610fac565b61048c6110f7565b806001600160a01b03811661084c5760405162461bcd60e51b81526004016103a090611f85565b610854610fac565b6001600160a01b0382166000908152600360205260409020548061088a5760405162461bcd60e51b81526004016103a090611ff3565b6006546001600160a01b03848116911614156108f95760405162461bcd60e51b815260206004820152602860248201527f50726963654f7261636c653a2070726963652070726f787920697320616c726560448201526718591e4818995cdd60c21b60648201526084016103a0565b600654604080516001600160a01b03928316815291851660208301527ffb54bc03946fcc998e4c3cd2f74f5f651adb3eb9a1367e64cb700e954a46f651910160405180910390a15050600680546001600160a01b0319166001600160a01b0392909216919091179055565b61048c610fac565b60015433906001600160a01b031681146109da5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016103a0565b61047981611133565b6109eb610fac565b6104798161114c565b6109fc610fac565b61047981611247565b60048181548110610a1557600080fd5b6000918252602090912001546001600160a01b0316905081565b60026020526000908152604090208054610a489061225c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a749061225c565b8015610ac15780601f10610a9657610100808354040283529160200191610ac1565b820191906000526020600020905b815481529060010190602001808311610aa457829003601f168201915b505050505081565b816001600160a01b038116610af05760405162461bcd60e51b81526004016103a090611f85565b816000815111610b125760405162461bcd60e51b81526004016103a090611fbc565b610b1a610fac565b6001600160a01b03841660009081526002602052604081208054610b3d9061225c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b699061225c565b8015610bb65780601f10610b8b57610100808354040283529160200191610bb6565b820191906000526020600020905b815481529060010190602001808311610b9957829003601f168201915b50505050509050610bc78185611348565b15610c235760405162461bcd60e51b815260206004820152602660248201527f50726963654f7261636c653a207072696365207061697220616c72656164792060448201526565786973747360d01b60648201526084016103a0565b6001600160a01b03851660009081526002602090815260409091208551610c4c92870190611bee565b50846001600160a01b03167f6ea5d4c7abd2c9a5a473ef24015c90025b7ac6b38046888b3abb32fbb29efb478286604051610c88929190611f1e565b60405180910390a25050505050565b610c9f610fac565b600180546001600160a01b0383166001600160a01b03199091168117909155610cd06000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000836001600160a01b0316856001600160a01b03161415610dda5785871415610d8d57506001915086905042610fa1565b6001610d998882612094565b610da490600a61210f565b610daf886001612094565b610dba90600a61210f565b610dc4908b6121b7565b610dce91906120ac565b42925092509250610fa1565b600080600080600080610ded8b8b611364565b95509550955095509550955060008c6001610e089190612094565b610e1390600a61210f565b8f83866020015163ffffffff16610e2a9190612094565b610e3590600a61210f565b8951610e42908a906121b7565b610e4c91906121b7565b610e5691906121b7565b610e6091906121b7565b905084876020015163ffffffff16610e789190612094565b610e8390600a61210f565b8451610e909085906121b7565b610e9a91906121b7565b610ea58f6001612094565b610eb090600a61210f565b610eba91906121b7565b610ec490826120ac565b9050600554610ef1610ed98960400151611584565b610ee242611584565b610eec91906121d6565b6115f2565b1115610f2e5760408088015190516301af513360e21b81526001600160a01b038e16600482015260248101919091524260448201526064016103a0565b600554610f41610ed98660400151611584565b1115610f7e5760408085015190516301af513360e21b81526001600160a01b038d16600482015260248101919091524260448201526064016103a0565b600181610f9389604001518760400151611605565b995099509950505050505050505b955095509592505050565b6000546001600160a01b0316331461048c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103a0565b60055460408051918252602082018390527f61fcc6fa9ba5b3ab5f72b919bc6324527ede6b5d73e12c63bbc4d4e0352e7002910160405180910390a1600081116110925760405162461bcd60e51b815260206004820152601860248201527f50726963654f7261636c653a207a65726f20616d6f756e74000000000000000060448201526064016103a0565b600555565b61109f61161d565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110da3390565b6040516001600160a01b03909116815260200160405180910390a1565b6110ff61166a565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336110da565b600180546001600160a01b031916905561047981610d08565b806001600160a01b0381166111735760405162461bcd60e51b81526004016103a090611f85565b6008546001600160a01b03838116911614156111dd5760405162461bcd60e51b8152602060048201526024808201527f50726963654f7261636c653a206561726e20737472617465677920756e6368616044820152631b99d95960e21b60648201526084016103a0565b600854604080516001600160a01b03928316815291841660208301527fd787371050564f7e1f5d4296c175eb9c15b9262213edf07121a386aa75eb7df7910160405180910390a150600880546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b03811661126e5760405162461bcd60e51b81526004016103a090611f85565b6007546001600160a01b03838116911614156112de5760405162461bcd60e51b815260206004820152602960248201527f50726963654f7261636c653a206561726e207772617070656420746f6b656e206044820152681d5b98da185b99d95960ba1b60648201526084016103a0565b600754604080516001600160a01b03928316815291841660208301527fa76a970588e4cc207f50664c8951065866f7aa10d401016b97c2b305341d3b2b910160405180910390a150600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000818051906020012083805190602001201490505b92915050565b61138e604051806060016040528060008152602001600063ffffffff168152602001600081525090565b604080516060810182526000808252602082018190529181018290528190600080876001600160a01b0381166113d65760405162461bcd60e51b81526004016103a090611f85565b876001600160a01b0381166113fd5760405162461bcd60e51b81526004016103a090611f85565b6000806114098c6116ba565b919a50985091506114198b6116ba565b6001600160a01b03851660009081526002602052604090208054939950919750925061156e916114489061225c565b80601f01602080910402602001604051908101604052809291908181526020018280546114749061225c565b80156114c15780601f10611496576101008083540402835291602001916114c1565b820191906000526020600020905b8154815290600101906020018083116114a457829003601f168201915b5050506001600160a01b038516600090815260026020526040902080549092506114eb915061225c565b80601f01602080910402602001604051908101604052809291908181526020018280546115179061225c565b80156115645780601f1061153957610100808354040283529160200191611564565b820191906000526020600020905b81548152906001019060200180831161154757829003601f168201915b505050505061179e565b809850819b505050505050509295509295509295565b60006001600160ff1b038211156115ee5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016103a0565b5090565b6000808212156115ee5761135e826122b2565b60008183106116145781611616565b825b9392505050565b600154600160a01b900460ff161561048c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103a0565b600154600160a01b900460ff1661048c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103a0565b600754600090819081906001600160a01b038581169116146116e55750600191506000905082611797565b6008546040805160048152602481019091526020810180516001600160e01b0316633ca967f360e01b179052600091611729916001600160a01b0390911690611aae565b90508080602001905181019061173f9190611e5c565b9350600692506001915061175483600a61210f565b841015611795576040516327e48d3560e01b81526001600160a01b0380871660048301528316602482015260448101859052606481018490526084016103a0565b505b9193909250565b6117c8604051806060016040528060008152602001600063ffffffff168152602001600081525090565b6117f2604051806060016040528060008152602001600063ffffffff168152602001600081525090565b8360008151116118145760405162461bcd60e51b81526004016103a090611fbc565b8360008151116118365760405162461bcd60e51b81526004016103a090611fbc565b6006546001600160a01b031661189d5760405162461bcd60e51b815260206004820152602660248201527f50726963654f7261636c653a20626573742070726963652070726f787920697360448201526520656d70747960d01b60648201526084016103a0565b60065460405163b1fcb9b360e01b81526060916001600160a01b03169063b1fcb9b3906118d0908a908a90600401611f1e565b60006040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119249190810190611dac565b825192975090955091501580159061193c5750835115155b156119475750611aa5565b60005b600454811015611a8557600654600480546001600160a01b03909216918390811061198557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614611a7357600481815481106119c057634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405163b1fcb9b360e01b81526001600160a01b039091169063b1fcb9b3906119fb908b908b90600401611f1e565b60006040518083038186803b158015611a1357600080fd5b505afa158015611a27573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a4f9190810190611dac565b8251929850909650925015801590611a675750845115155b15611a73575050611aa5565b80611a7d81612297565b91505061194a565b50868682604051630fcf2f5960e41b81526004016103a093929190611f4c565b50509250929050565b606061161683836040518060600160405280602581526020016122f9602591396060600080856001600160a01b031685604051611aeb9190611eef565b600060405180830381855afa9150503d8060008114611b26576040519150601f19603f3d011682016040523d82523d6000602084013e611b2b565b606091505b5091509150611b3c86838387611b46565b9695505050505050565b60608315611bb2578251611bab576001600160a01b0385163b611bab5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103a0565b5081611bbc565b611bbc8383611bc4565b949350505050565b815115611bd45781518083602001fd5b8060405162461bcd60e51b81526004016103a09190611f0b565b828054611bfa9061225c565b90600052602060002090601f016020900481019282611c1c5760008555611c62565b82601f10611c3557805160ff1916838001178555611c62565b82800160010185558215611c62579182015b82811115611c62578251825591602001919060010190611c47565b506115ee9291505b808211156115ee5760008155600101611c6a565b80356001600160a01b0381168114611c9557600080fd5b919050565b600060608284031215611cab578081fd5b6040516060810181811067ffffffffffffffff82111715611cce57611cce6122e2565b806040525080915082518152602083015163ffffffff81168114611cf157600080fd5b6020820152604092830151920191909152919050565b600060208284031215611d18578081fd5b61161682611c7e565b60008060408385031215611d33578081fd5b611d3c83611c7e565b9150602083013567ffffffffffffffff811115611d57578182fd5b8301601f81018513611d67578182fd5b8035611d7a611d758261206c565b61203b565b818152866020838501011115611d8e578384fd5b81602084016020830137908101602001929092525090939092509050565b600080600060e08486031215611dc0578081fd5b611dca8585611c9a565b9250611dd98560608601611c9a565b915060c084015167ffffffffffffffff811115611df4578182fd5b8401601f81018613611e04578182fd5b8051611e12611d758261206c565b818152876020838501011115611e26578384fd5b611e3782602083016020860161222c565b8093505050509250925092565b600060208284031215611e55578081fd5b5035919050565b600060208284031215611e6d578081fd5b5051919050565b600080600080600060a08688031215611e8b578081fd5b853594506020860135935060408601359250611ea960608701611c7e565b9150611eb760808701611c7e565b90509295509295909350565b60008151808452611edb81602086016020860161222c565b601f01601f19169290920160200192915050565b60008251611f0181846020870161222c565b9190910192915050565b6020815260006116166020830184611ec3565b604081526000611f316040830185611ec3565b8281036020840152611f438185611ec3565b95945050505050565b606081526000611f5f6060830186611ec3565b8281036020840152611f718186611ec3565b90508281036040840152611b3c8185611ec3565b60208082526019908201527f50726963654f7261636c653a207a65726f206164647265737300000000000000604082015260600190565b6020808252601c908201527f50726963654f7261636c653a20656d7074792070616972206e616d6500000000604082015260600190565b60208082526028908201527f50726963654f7261636c653a2070726963652070726f787920646f6573206e6f604082015267742065786973747360c01b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715612064576120646122e2565b604052919050565b600067ffffffffffffffff821115612086576120866122e2565b50601f01601f191660200190565b600082198211156120a7576120a76122cc565b500190565b6000826120c757634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156121075781600019048211156120ed576120ed6122cc565b808516156120fa57918102915b93841c93908002906120d1565b509250929050565b600061161683836000826121255750600161135e565b816121325750600061135e565b816001811461214857600281146121525761216e565b600191505061135e565b60ff841115612163576121636122cc565b50506001821b61135e565b5060208310610133831016604e8410600b8410161715612191575081810a61135e565b61219b83836120cc565b80600019048211156121af576121af6122cc565b029392505050565b60008160001904831182151516156121d1576121d16122cc565b500290565b60008083128015600160ff1b8501841216156121f4576121f46122cc565b6001600160ff1b038401831381161561220f5761220f6122cc565b50500390565b600082821015612227576122276122cc565b500390565b60005b8381101561224757818101518382015260200161222f565b83811115612256576000848401525b50505050565b600181811c9082168061227057607f821691505b6020821081141561229157634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156122ab576122ab6122cc565b5060010190565b6000600160ff1b8214156122c8576122c86122cc565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a2646970667358221220f6dd09f5385b9ced0c413b5367f27329de1f45bf293fe55b71a0370492c3a64f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addPriceProxy(address)": {
        "details": "Only owner can call this                             The price proxy is an encapsulation of third-party oracle price retrieval methods                             You can obtain the prices of inputToken/outputToken from price proxy",
        "params": {
          "_priceProxy": "The address of the price proxy"
        }
      },
      "addTokenPricePair(address,string)": {
        "details": "Only owner can call this",
        "params": {
          "_pairName": "The price pair name (e.g. CORE/USDT  BTC/USDT)",
          "_token": "The address of the token"
        }
      },
      "constructor": {
        "params": {
          "_acceptableDelay": "Maximum acceptable delay for data given from Oracles",
          "_earnStrategy": "The address of the earn strategy contract",
          "_earnWrappedToken": "The address of the earn wrapped token (STCORE) contract"
        }
      },
      "equivalentOutputAmount(uint256,uint256,uint256,address,address)": {
        "params": {
          "_inputAmount": "Amount of the input token",
          "_inputDecimals": "Number of input token decimals",
          "_inputToken": "Address of the input token",
          "_outputDecimals": "Number of output token decimals",
          "_outputToken": "Address of output token"
        },
        "returns": {
          "_outputAmount": "          Amount of the output token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseOracle()": {
        "details": "Only owner can pause"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "removePriceProxy(address)": {
        "details": "Only owner can call this",
        "params": {
          "_priceProxy": "The address of the price proxy"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "selectBestPriceProxy(address)": {
        "details": "Only owner can call this",
        "params": {
          "_priceProxy": "The address of the price proxy"
        }
      },
      "setAcceptableDelay(uint256)": {
        "details": "If oracle data has not been updated for a while,                             we will consider the price as invalid",
        "params": {
          "_acceptableDelay": "Maximum acceptable delay (in seconds)"
        }
      },
      "setEarnStrategy(address)": {
        "params": {
          "_earnStrategy": "The address of the earn strategy contract"
        }
      },
      "setEarnWrappedToken(address)": {
        "params": {
          "_earnWrappedToken": "The address of the earn wrapped token (STCORE) contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unPauseOracle()": {
        "details": "Only owner can pause"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPriceProxy(address)": {
        "notice": "Adds a price proxy"
      },
      "addTokenPricePair(address,string)": {
        "notice": "Adds mapping between token and price pair"
      },
      "constructor": {
        "notice": "This contract is used to get relative price of two assets from available oracles"
      },
      "equivalentOutputAmount(uint256,uint256,uint256,address,address)": {
        "notice": "Finds amount of output token that has equal value                                 as the input amount of the input token from oracle"
      },
      "getPriceProxyListLength()": {
        "notice": "Getter for the length of oracle list"
      },
      "pauseOracle()": {
        "notice": "Pause the oracle, so only the functions can be called which are whenPaused"
      },
      "removePriceProxy(address)": {
        "notice": "Removes a price proxy"
      },
      "selectBestPriceProxy(address)": {
        "notice": "Selects a price proxy as the preferred one"
      },
      "setAcceptableDelay(uint256)": {
        "notice": "Sets acceptable delay for oracle responses"
      },
      "setEarnStrategy(address)": {
        "notice": "Sets the earn strategy contract address"
      },
      "setEarnWrappedToken(address)": {
        "notice": "Sets the earn wrapped token (STCORE) contract address"
      },
      "unPauseOracle()": {
        "notice": "Un-pause the oracle, so only the functions can be called which are whenNotPaused"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 213,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3462,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "pricePairMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 3467,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "priceProxyIdxMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3471,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "priceProxyList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3474,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "acceptableDelay",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3477,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "bestPriceProxy",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3480,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "earnWrappedToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3483,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "earnStrategy",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}