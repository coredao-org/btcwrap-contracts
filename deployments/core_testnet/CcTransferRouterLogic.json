{
  "address": "0x5CfB8c61c57686AF71018A1035f6f6d06cD7fa17",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockerScriptType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "porter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "porterFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bitcoinTxId",
          "type": "bytes32"
        }
      ],
      "name": "CCTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldCoreBTC",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCoreBTC",
          "type": "address"
        }
      ],
      "name": "NewCoreBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLockers",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLockers",
          "type": "address"
        }
      ],
      "name": "NewLockers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolPercentageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "NewProtocolPercentageFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRelay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRelay",
          "type": "address"
        }
      ],
      "name": "NewRelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "NewTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "ccTransferRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isUsed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coreBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startingBlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_appId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockers",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_coreBTC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_txId",
          "type": "bytes32"
        }
      ],
      "name": "isRequestUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_tx",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_intermediateNodes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        }
      ],
      "name": "lockProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coreBTC",
          "type": "address"
        }
      ],
      "name": "setCoreBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockers",
          "type": "address"
        }
      ],
      "name": "setLockers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolPercentageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "setRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startingBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "setStartingBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startingBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9b270b8d12af7fb865d1071a2988cc43fb69c872a29ddc2ec4e6621ed4b96c6f",
  "receipt": {
    "to": null,
    "from": "0xf13F4E007eB5C8e8201AdE0bE1C8946592818F42",
    "contractAddress": "0x5CfB8c61c57686AF71018A1035f6f6d06cD7fa17",
    "transactionIndex": 0,
    "gasUsed": "3640361",
    "logsBloom": "0x
    "blockHash": "0xb2a8f171aec865cd0c72a27bc81d0a2bbfafa3390b5d0ae3744e3ccec52b65c5",
    "transactionHash": "0x9b270b8d12af7fb865d1071a2988cc43fb69c872a29ddc2ec4e6621ed4b96c6f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17879634,
        "transactionHash": "0x9b270b8d12af7fb865d1071a2988cc43fb69c872a29ddc2ec4e6621ed4b96c6f",
        "address": "0x5CfB8c61c57686AF71018A1035f6f6d06cD7fa17",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xb2a8f171aec865cd0c72a27bc81d0a2bbfafa3390b5d0ae3744e3ccec52b65c5"
      }
    ],
    "blockNumber": 17879634,
    "cumulativeGasUsed": "3640361",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ac9518c8ccc368e962d7847f9baaffac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockerScriptType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"porter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"porterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bitcoinTxId\",\"type\":\"bytes32\"}],\"name\":\"CCTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCoreBTC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCoreBTC\",\"type\":\"address\"}],\"name\":\"NewCoreBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLockers\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLockers\",\"type\":\"address\"}],\"name\":\"NewLockers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolPercentageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"NewProtocolPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRelay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRelay\",\"type\":\"address\"}],\"name\":\"NewRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ccTransferRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_appId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coreBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txId\",\"type\":\"bytes32\"}],\"name\":\"isRequestUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_tx\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_intermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"lockProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreBTC\",\"type\":\"address\"}],\"name\":\"setCoreBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"}],\"name\":\"setLockers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"setRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingBlockNumber\",\"type\":\"uint256\"}],\"name\":\"setStartingBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address)\":{\"params\":{\"_appId\":\"Id of ccTransfer dApp\",\"_chainId\":\"Id of the underlying chain\",\"_coreBTC\":\"CoreDAO BTC ERC20 token address\",\"_lockers\":\"Lockers' contract address\",\"_protocolPercentageFee\":\"Percentage amount of protocol fee (min: %0.01)\",\"_relay\":\"The Relay address to validate data from source chain\",\"_startingBlockNumber\":\"Requests that are included in a block older than _startingBlockNumber cannot be executed\",\"_treasury\":\"Address of treasury that collects protocol fees\",\"_version\":\"Version of op return payload\"}},\"isRequestUsed(bytes32)\":{\"details\":\"This is to avoid re-submitting a used request\",\"params\":{\"_txId\":\"The txId of request on the source chain\"},\"returns\":{\"_0\":\"True if the request has been executed\"}},\"lockProof(bytes,uint256,bytes,uint256,bytes)\":{\"details\":\"Validates the transfer request\",\"params\":{\"_blockNumber\":\"The block number of the request tx\",\"_index\":\"Index of tx in the block\",\"_intermediateNodes\":\"Merkle proof for tx\",\"_lockerLockingScript\":\"Locking script of locker that user has sent BTC to it\",\"_tx\":\"Bitcoin tx\"},\"returns\":{\"_0\":\"True if the transfer is successful\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCoreBTC(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_coreBTC\":\"CoreDAO BTC ERC20 token address\"}},\"setLockers(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_lockers\":\"Address of the lockers contract\"}},\"setProtocolPercentageFee(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_protocolPercentageFee\":\"Percentage amount of protocol fee\"}},\"setRelay(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_relay\":\"Address of the relay contract\"}},\"setTreasury(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_treasury\":\"Treasury address\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"CCTransfer(bytes,uint256,address,address,uint256,uint256,address,uint256,uint256,bytes32)\":{\"notice\":\"Emits when a cc transfer request gets done\"},\"NewCoreBTC(address,address)\":{\"notice\":\"Emits when changes made to CoreBTC address\"},\"NewLockers(address,address)\":{\"notice\":\"Emits when changes made to Lockers address\"},\"NewProtocolPercentageFee(uint256,uint256)\":{\"notice\":\"Emits when changes made to protocol percentage fee\"},\"NewRelay(address,address)\":{\"notice\":\"Emits when changes made to relay address\"},\"NewTreasury(address,address)\":{\"notice\":\"Emits when changes made to Treasury address\"}},\"kind\":\"user\",\"methods\":{\"initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address)\":{\"notice\":\"Gives default params to initiate cc transfer router\"},\"isRequestUsed(bytes32)\":{\"notice\":\"Check if the request has been executed before\"},\"lockProof(bytes,uint256,bytes,uint256,bytes)\":{\"notice\":\"Executes the cross chain transfer request\"},\"setCoreBTC(address)\":{\"notice\":\"Setter for coreBTC\"},\"setLockers(address)\":{\"notice\":\"Setter for lockers\"},\"setProtocolPercentageFee(uint256)\":{\"notice\":\"Setter for protocol percentage fee\"},\"setRelay(address)\":{\"notice\":\"Setter for relay\"},\"setStartingBlockNumber(uint256)\":{\"notice\":\"Setter for starting block number\"},\"setTreasury(address)\":{\"notice\":\"Setter for treasury\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/routers/CcTransferRouterLogic.sol\":\"CcTransferRouterLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/common/libraries/BitcoinHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary BitcoinHelper {\\n\\n    using SafeCast for uint96;\\n    using SafeCast for uint256;\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    /// @notice             requires `memView` to be of a specified type\\n    /// @dev                passes if it is the correct type, errors if not\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, ref.len().toUint8()));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    /// @notice             reads a compact int from the view at the specified index\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param _index       the index\\n    /// @return number      returns the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return flag.toUint64();\\n        } else if (flag == 0xfd) {\\n            number = memView.indexLEUint(_index + 1, 2).toUint64();\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = memView.indexLEUint(_index + 1, 4).toUint64();\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = memView.indexLEUint(_index + 1, 8).toUint64();\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    /// @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    /// @param number   the number as uint64\\n    /// @return         the compact integer length as uint8\\n    function compactIntLength(uint64 number) private pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    /// @notice             extracts the LE txid from an outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _tx                   The Bitcoin transaction\\n    /// @return                      Transaction Id of the transaction (in LE form)\\n    function calculateTxId(bytes memory _tx) internal pure returns (bytes32) {\\n        bytes32 inputHash1 = sha256(_tx);\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return inputHash2;\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function reverseBytes32(bytes32 _input) private pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                           Parses outpoint info from an input\\n    /// @dev                              Reverts if vin is null\\n    /// @param _vin                       The vin of a Bitcoin transaction\\n    /// @param _index                     Index of the input that we are looking at\\n    /// @return _txId                     Output tx id\\n    /// @return _outputIndex              Output tx index\\n    function extractOutpoint(\\n        bytes memory _vin,\\n        uint _index\\n    ) internal pure returns (bytes32, uint) {\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n        return extractOutpoint(vin, _index);\\n    }\\n\\n    /// @notice                           Parses outpoint info from an input\\n    /// @dev                              Reverts if vin is null\\n    /// @param _vinView                   The vin of a Bitcoin transaction\\n    /// @param _index                     Index of the input that we are looking at\\n    /// @return _txId                     Output tx id\\n    /// @return _outputIndex              Output tx index\\n    function extractOutpoint(\\n        bytes29 _vinView,\\n        uint _index\\n    ) internal pure typeAssert(_vinView, BTCTypes.Vin) returns (bytes32 _txId, uint _outputIndex) {\\n        bytes29 input = indexVin(_vinView, _index);\\n        bytes29 _outpoint = outpoint(input);\\n        _txId = txidLE(_outpoint);\\n        _outputIndex = outpointIdx(_outpoint);\\n    }\\n\\n    /// @notice             extracts the index as an integer from the outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return _outpoint.indexLEUint(32, 4).toUint32();\\n    }\\n\\n    /// @notice          extracts the outpoint from an input\\n    /// @param _input    the input\\n    /// @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    /// @notice           extracts the script sig from an input\\n    /// @param _input     the input\\n    /// @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    /// @notice         determines the length of the first input in an array of inputs\\n    /// @param _inputs  the vin without its length prefix\\n    /// @return         the input length\\n    function inputLength(bytes29 _inputs) private pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    /// @notice         extracts the input at a specified index\\n    /// @param _vin     the vin\\n    /// @param _index   the index of the desired input\\n    /// @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    /// @notice         extracts the value from an output\\n    /// @param _output  the output\\n    /// @return         the value\\n    function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n        return _output.indexLEUint(0, 8).toUint64();\\n    }\\n\\n    /// @notice                   Finds the value of a specific output\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @param _index             Index of output\\n    /// @return _value            Value of the specified output\\n    function parseOutputValue(bytes memory _vout, uint _index) internal pure returns (uint64) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        return parseOutputValue(voutView, _index);\\n    }\\n\\n    /// @notice              Finds the value of a specific output\\n    /// @dev                 Reverts if vout is null\\n    /// @param _voutView     The vout of a Bitcoin transaction\\n    /// @param _index        Index of output\\n    /// @return _value       Value of the specified output\\n    function parseOutputValue(bytes29 _voutView, uint _index) internal pure typeAssert(_voutView, BTCTypes.Vout) returns (uint64 _value) {\\n        bytes29 output;\\n        output = indexVout(_voutView, _index);\\n        _value = value(output);\\n    }\\n\\n    /// @notice                   Finds total outputs value\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @return _totalValue       Total vout value\\n    function parseOutputsTotalValue(bytes memory _vout) internal pure returns (uint64) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        return parseOutputsTotalValue(_vout);\\n    }\\n\\n    /// @notice                   Finds total outputs value\\n    /// @dev                      Reverts if vout is null\\n    /// @param _voutView          The vout of a Bitcoin transaction\\n    /// @return _totalValue       Total vout value\\n    function parseOutputsTotalValue(bytes29 _voutView) internal pure typeAssert(_voutView, BTCTypes.Vout) returns (uint64 _totalValue) {\\n        bytes29 output;\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(_voutView, 0));\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(_voutView, index);\\n            _totalValue = _totalValue + value(output);\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount that has been sent to\\n    ///                                   a specific script in a specific output\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _voutIndex                 Index of the output that we are looking at\\n    /// @param _script                    Desired recipient script\\n    /// @param _scriptType                Type of the script (e.g. P2PK)\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _script\\n    function parseValueFromSpecificOutputHavingScript(\\n        bytes memory _vout,\\n        uint _voutIndex,\\n        bytes memory _script,\\n        ScriptTypes _scriptType\\n    ) internal pure returns (uint64) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        return parseValueFromSpecificOutputHavingScript(voutView, _voutIndex, _script, _scriptType);\\n    }\\n\\n    /// @notice                           Parses the BTC amount that has been sent to\\n    ///                                   a specific script in a specific output\\n    /// @param _voutView                  The vout of a Bitcoin transaction\\n    /// @param _voutIndex                 Index of the output that we are looking at\\n    /// @param _script                    Desired recipient script\\n    /// @param _scriptType                Type of the script (e.g. P2PK)\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _script\\n    function parseValueFromSpecificOutputHavingScript(\\n        bytes29 _voutView,\\n        uint _voutIndex,\\n        bytes memory _script,\\n        ScriptTypes _scriptType\\n    ) internal pure typeAssert(_voutView, BTCTypes.Vout)  returns (uint64 bitcoinAmount) {\\n        bytes29 output = indexVout(_voutView, _voutIndex);\\n        bytes29 _scriptPubkey = scriptPubkey(output);\\n\\n        if (_scriptType == ScriptTypes.P2TR) {\\n            // note: first two bytes are OP_1 and Pushdata Bytelength.\\n            // note: script hash length is 32.\\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PK) {\\n            // note: first byte is Pushdata Bytelength.\\n            // note: public key length is 32.\\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(1, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PKH) {\\n            // note: first three bytes are OP_DUP, OP_HASH160, Pushdata Bytelength.\\n            // note: public key hash length is 20.\\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(3))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2SH) {\\n            // note: first two bytes are OP_HASH160, Pushdata Bytelength\\n            // note: script hash length is 20.\\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WPKH) {\\n            // note: first two bytes are OP_0, Pushdata Bytelength\\n            // note: segwit public key hash length is 20.\\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WSH) {\\n            // note: first two bytes are OP_0, Pushdata Bytelength\\n            // note: segwit script hash length is 32.\\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        }\\n\\n    }\\n\\n    /// @notice                           Parses the BTC amount of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Returns zero if no matching locking scrip is found\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    function parseValueHavingLockingScript(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        return parseValueHavingLockingScript(voutView, _lockingScript);\\n    }\\n\\n        /// @notice                           Parses the BTC amount of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Returns zero if no matching locking scrip is found\\n    /// @param _voutView                  The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    function parseValueHavingLockingScript(\\n        bytes29 _voutView,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount) {\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(_voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(_voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n\\n            if (\\n                keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n            ) {\\n                bitcoinAmount = value(output);\\n                // Stops searching after finding the desired locking script\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is less than 76 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScript(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64, bytes memory) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        return parseValueAndDataHavingLockingScript(voutView, _lockingScript);\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is less than 80 bytes\\n    /// @param _voutView                  The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScript(\\n        bytes29 _voutView,\\n        bytes memory _lockingScript\\n    ) internal view typeAssert(_voutView, BTCTypes.Vout) returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(_voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(_voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayload(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8 + compactIntLength(scriptLength), scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkeyWithLength(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice                           Parses locking script from an output\\n    /// @dev                              Reverts if vout is null\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _index                     Index of the output that we are looking at\\n    /// @return _lockingScript            Parsed locking script\\n    function getLockingScript(\\n        bytes memory _vout,\\n        uint _index\\n    ) internal view returns (bytes memory) {\\n        bytes29 vout = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!vout.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        return getLockingScript(vout, _index);\\n    }\\n\\n    /// @notice                           Parses locking script from an output\\n    /// @dev                              Reverts if vout is null\\n    /// @param _voutView                  The vout of a Bitcoin transaction\\n    /// @param _index                     Index of the output that we are looking at\\n    /// @return _lockingScript            Parsed locking script\\n    function getLockingScript(\\n        bytes29 _voutView,\\n        uint _index\\n    ) internal view returns (bytes memory _lockingScript) {\\n        bytes29 output = indexVout(_voutView, _index);\\n        bytes29 _lockingScriptBytes29 = scriptPubkey(output);\\n        _lockingScript = _lockingScriptBytes29.clone();\\n    }\\n\\n    /// @notice                   Returns number of outputs in a vout\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    function numberOfOutputs(bytes memory _vout) internal pure returns (uint) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        return numberOfOutputs(voutView);\\n    }\\n\\n    /// @notice                   Returns number of outputs in a vout\\n    /// @param _voutView          The vout of a Bitcoin transaction\\n    function numberOfOutputs(bytes29 _voutView) internal pure typeAssert(_voutView, BTCTypes.Vout) returns (uint _numberOfOutputs) {\\n        _numberOfOutputs = uint256(indexCompactInt(_voutView, 0));\\n    }\\n\\n    /// @notice             determines the length of the first output in an array of outputs\\n    /// @param _outputs     the vout without its length prefix\\n    /// @return             the output length\\n    function outputLength(bytes29 _outputs) private pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    /// @notice         extracts the output at a specified index\\n    /// @param _vout    the vout\\n    /// @param _index   the index of the desired output\\n    /// @return         the desired output\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 2 bytes indicating the length of payload + max length for op return payload is 80 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayload(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(2, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(2, 1) != _bodyLength - 2) {\\n            // This means that this output is not OP_RETURN\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 83 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\");\\n        return _spk.slice(3, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice     verifies the vin and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _vin the vin\\n    /// @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (getVinLength(_vin) != _vin.len()) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n\\n    /// @notice         verifies the vout and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _vout    the vout\\n    /// @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (getVoutLength(_vout) != _vout.len()) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    /// @notice         verifies the header and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _header  the header\\n    /// @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice         Index a header array.\\n    /// @dev            Errors on overruns\\n    /// @param _arr     The header array\\n    /// @param index    The 0-indexed location of the header to get\\n    /// @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * 80;\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice     verifies the header array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the header array\\n    /// @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    /// @notice     verifies the merkle array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the merkle array\\n    /// @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    /// @notice         extracts the merkle root from the header\\n    /// @param _header  the header\\n    /// @return         the merkle root\\n    function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    /// @notice         extracts the target from the header\\n    /// @param _header  the header\\n    /// @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice         calculates the difficulty from a target\\n    /// @param _target  the target\\n    /// @return         the difficulty\\n    function toDiff(uint256  _target) private pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    /// @notice         extracts the difficulty from the header\\n    /// @param _header  the header\\n    /// @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    /// @notice         extracts the timestamp from the header\\n    /// @param _header  the header\\n    /// @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    /// @notice         extracts the parent hash from the header\\n    /// @param _header  the header\\n    /// @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    /// @notice                     Checks validity of header chain\\n    /// @dev                        Compares current header parent to previous header's digest\\n    /// @param _header              The raw bytes header\\n    /// @param _prevHeaderDigest    The previous header's digest\\n    /// @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) internal pure typeAssert(_header, BTCTypes.Header) returns (bool) {\\n        return parent(_header) == _prevHeaderDigest;\\n    }\\n\\n    /// @notice                     Validates a tx inclusion in the block\\n    /// @dev                        `index` is not a reliable indicator of location within a block\\n    /// @param _txid                The txid (LE)\\n    /// @param _merkleRoot          The merkle root\\n    /// @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    /// @param _index               The leaf's index in the tree (0-indexed)\\n    /// @return                     true if fully valid, false otherwise\\n    function prove(\\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) internal view typeAssert(_intermediateNodes, BTCTypes.MerkleArray) returns (bool) {\\n        // Shortcut the empty-block case\\n        if (\\n            _txid == _merkleRoot &&\\n                _index == 0 &&\\n                    _intermediateNodes.len() == 0\\n        ) {\\n            return true;\\n        }\\n\\n        return checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    /// @notice         verifies a merkle proof\\n    /// @dev            leaf, proof, and root are in LE format\\n    /// @param _leaf    the leaf\\n    /// @param _proof   the proof nodes\\n    /// @param _root    the merkle root\\n    /// @param _index   the index\\n    /// @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) private view typeAssert(_proof, BTCTypes.MerkleArray) returns (bool) {\\n        require(_root != bytes32(0), \\\"BitcoinHelper: zero root\\\");\\n\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = merkleStep(_next, _current);\\n            } else {\\n                _current = merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return _current == _root;\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @dev             Not recommended to call directly.\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return digest   The double-sha256 of the concatenated hashes\\n    function merkleStep(bytes32 _a, bytes32 _b) private view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha256 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha256 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / 4) {\\n            _elapsedTime = RETARGET_PERIOD / 4;\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * 4) {\\n            _elapsedTime = RETARGET_PERIOD * 4;\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / 65536 * _elapsedTime;\\n        return _adjusted / RETARGET_PERIOD * 65536;\\n    }\\n\\n    /// @notice             returns size of vin\\n    /// @param _vinView     the vin\\n    /// @return             the size of vin\\n    function getVinLength(bytes29 _vinView) internal pure returns (uint256) {\\n        if (_vinView.len() == 0) {\\n            return 0;\\n        }\\n        uint64 _nIns = indexCompactInt(_vinView, 0);\\n        uint256 _viewLen = _vinView.len();\\n        if (_nIns == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return 0;\\n            }\\n            bytes29 _remaining = _vinView.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        return _offset;\\n    }\\n\\n    /// @notice             returns size of vout\\n    /// @param _voutView    the vout\\n    /// @return             the size of vout\\n    function getVoutLength(bytes29 _voutView) internal pure returns (uint256) {\\n        if (_voutView.len() == 0) {\\n            return 0;\\n        }\\n        uint64 _nOuts = indexCompactInt(_voutView, 0);\\n\\n        uint256 _viewLen = _voutView.len();\\n        if (_nOuts == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return 0;\\n            }\\n            bytes29 _remaining = _voutView.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        return _offset;\\n    }\\n\\n    /// @notice             extracts tx details from the given tx bytes\\n    /// @param _tx          the transaction bytes\\n    /// @return _version    parsed tx version\\n    /// @return _vinView    parsed tx vin\\n    /// @return _voutView   parsed tx vout\\n    /// @return _lockTime   parsed tx lock time\\n    function extractTx(bytes memory _tx) internal pure returns (uint32 _version, bytes29 _vinView, bytes29 _voutView, uint32 _lockTime) {\\n        bytes29 _txView = _tx.ref(uint40(BTCTypes.Unknown));\\n\\n        _version = _txView.indexLEUint(0, 4).toUint32();\\n        uint256 _offset = 4;\\n\\n        bytes29 _remaining = _txView.postfix(_txView.len() - _offset, uint40(BTCTypes.Unknown));\\n        uint256 _vinLen = getVinLength(_remaining);\\n        _vinView = _txView.slice(_offset, _vinLen, uint40(BTCTypes.Vin));\\n        _offset += _vinLen;\\n\\n        _remaining = _txView.postfix(_txView.len() - _offset, uint40(BTCTypes.Unknown));\\n        uint256 _voutLen = getVoutLength(_remaining);\\n        _voutView = _txView.slice(_offset, _voutLen, uint40(BTCTypes.Vout));\\n        _offset += _voutLen;\\n\\n        _lockTime = _txView.indexLEUint(_offset, 4).toUint32();\\n        require(_offset + 4 == _txView.len(), \\\"BitcoinHelper: invalid tx\\\");\\n    }\\n}\",\"keccak256\":\"0x697fdf6aa17dac9db533c165f2cfb8ccfb642fbf5de6354e2776640cd6651d65\",\"license\":\"MIT\"},\"contracts/common/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/** @author Summa (https://summa.one) */\\n\\n/*\\n    Original version: https://github.com/summa-tx/memview-sol/blob/main/contracts/TypedMemView.sol\\n    We made few changes to the original version:\\n    1. Use solidity version 8 compiler\\n    2. Remove SafeMath library\\n    3. Add unchecked in line 522\\n*/\\n\\nlibrary TypedMemView {\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        unchecked {\\n            // abusing underflow here =_=\\n            for (uint8 i = 15; i < 255 ; i -= 1) {\\n                uint8 _byte = uint8(_b >> (i * 8));\\n                second |= byteHex(_byte);\\n                if (i != 0) {\\n                    second <<= 16;\\n                }\\n            }\\n        }\\n        \\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc + _len;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower (12 + 12 + 3) bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return (uint256(len(memView)) + 32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc + _index + _len > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc + _index;\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index + _bytes > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view has >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0xd3da86bebf2f55aed38f4d1fc84ac618bc94ab8951dea3d188b9a5e36f949c64\",\"license\":\"MIT\"},\"contracts/common/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IBitcoinRelay {\\n    // Events\\n\\n    event NewFinalizationParameter (\\n        uint oldFinalizationParameter,\\n        uint newFinalizationParameter\\n    );\\n\\n    // Read-only functions\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function btcLightClient() external view returns(address);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unpauseRelay() external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external view returns (bool);\\n}\",\"keccak256\":\"0x201f8b0a3afe0138554e76e46462b7ed8cd8881164b1489c8bc563600c5b3f4f\",\"license\":\"MIT\"},\"contracts/common/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x0b17d7a61c5ba6df420a4293c5313d20eacc2a4a866f39321d6b6f206a171c8e\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ICoreBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ICoreBTC is IERC20Upgradeable {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    event Blacklisted(address indexed account);\\n\\n    event UnBlacklisted(address indexed account);\\n\\n    event BlackListerAdded(address indexed newBlackLister);\\n\\n    event BlackListerRemoved(address indexed blackLister);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function ownerBurn(address _user, uint _amount) external returns (bool);\\n\\n    function setMaxMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n\\n    function addBlackLister(address account) external;\\n\\n    function removeBlackLister(address account) external;\\n\\n    function blacklist(address _account) external;\\n\\n    function unBlacklist(address _account) external;\\n}\",\"keccak256\":\"0xca1956a6e189ef824f8227f4621079b312e6204905d1a29b270f7eeb1cd2085f\",\"license\":\"MIT\"},\"contracts/libraries/RequestHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n// A library for parsing cc transfer and cc exchange requests\\nlibrary RequestHelper {\\n\\n    /// @notice                     Returns version of the request\\n    /// @dev                        Determines the version that request belongs to\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of version\\n    function parseVersion(bytes memory _arbitraryData) internal pure returns (uint8 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 0, 0);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    /// @notice                     Returns chain id of the request\\n    /// @dev                        Determines the chain that request belongs to\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of chain id\\n    function parseChainId(bytes memory _arbitraryData) internal pure returns (uint16 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 1, 2);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    /// @notice                     Returns app id of the request\\n    /// @dev                        Determines the app that request belongs to (e.g. cross-chain transfer app id is 0)\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of app id\\n    function parseAppId(bytes memory _arbitraryData) internal pure returns (uint16 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 3, 4);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    /// @notice                     Returns recipient address\\n    /// @dev                        Minted CoreBTC or exchanged tokens will be sent to this address\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of recipient address\\n    function parseRecipientAddress(bytes memory _arbitraryData) internal pure returns (address parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 5, 24);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    /// @notice                     Returns percentage fee (from total minted CoreBTC)\\n    /// @dev                        This fee goes to Porter who submitted the request\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of percentage fee\\n    function parsePercentageFee(bytes memory _arbitraryData) internal pure returns (uint16 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 25, 26);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    /// @notice                 Returns a sliced bytes\\n    /// @param _data            Data that is sliced\\n    /// @param _start           Start index of slicing\\n    /// @param _end             End index of slicing\\n    /// @return _result         The result of slicing\\n    function sliceBytes(\\n        bytes memory _data,\\n        uint _start,\\n        uint _end\\n    ) internal pure returns (bytes memory _result) {\\n        bytes1 temp;\\n        for (uint i = _start; i < _end + 1; i++) {\\n            temp = _data[i];\\n            _result = abi.encodePacked(_result, temp);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2a075c2ee580c5c7c24d55a13a46de14e246c6968836cdb95903bdf65e289511\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./ILockersStorage.sol\\\";\\n\\ninterface ILockers is ILockersStorage {\\n\\n     // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint amount,\\n        address indexed recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        uint collateralAmount,\\n        uint coreBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        uint slashingAmount,\\n        uint coreBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        bytes32 bitcoinTxId,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    event MinterAdded(\\n        address indexed account\\n    );\\n\\n    event MinterRemoved(\\n        address indexed account\\n    );\\n\\n    event BurnerAdded(\\n        address indexed account\\n    );\\n\\n    event BurnerRemoved(\\n        address indexed account\\n    );\\n\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint oldPriceWithDiscountRatio,\\n        uint newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint oldMinRequiredTNTLockedAmount,\\n        uint newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(\\n        address oldPriceOracle,\\n        address newPriceOracle\\n    );\\n\\n    event NewCCBurnRouter(\\n        address oldCCBurnRouter,\\n        address newCCBurnRouter\\n    );\\n\\n    event NewCoreBTC(\\n        address oldCoreBTC,\\n        address newCoreBTC\\n    );\\n\\n    event NewCollateralRatio(\\n        uint oldCollateralRatio,\\n        uint newCollateralRatio\\n    );\\n\\n    event NewLiquidationRatio(\\n        uint oldLiquidationRatio,\\n        uint newLiquidationRatio\\n    );\\n\\n    event NewSlashCompensationRatio(\\n        uint oldSlashCompensationRatio,\\n        uint newSlashCompensationRatio\\n    );\\n\\n    // Read-only functions\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isLockerActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function getLockerCapacity(address _lockerTargetAddress) external view returns (uint);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    function isMinter(address account) external view returns(bool);\\n\\n    function isBurner(address account) external view returns(bool);\\n\\n    function getHealthFactor(address _lockerTargetAddress) external view returns(uint);\\n\\n    function getMaximumBuyableCollateral(address _lockerTargetAddress) external view returns (uint);\\n\\n    function getNeededCoreBTCToBuyCollateral(uint _collateralAmount) external view returns(uint);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, bytes32 _txId, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setCoreBTC(address _coreBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function setSlashCompensationRatio(uint _slashCompensationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x40a3f4621b495e8342188e80992cf817b6fc7e94c3c16115f926bb674ff20abf\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../../types/DataTypes.sol\\\";\\n\\ninterface ILockersStorage {\\n    // Read-only functions\\n\\n    function coreBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function slashCompensationRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n\\n    function approvedLockers(uint index) external view returns(address);\\n}\\n\",\"keccak256\":\"0x2fde8a7309702eda6b845fe5e72c4b27cc5b62cc6322a9cbb0f9c28187d464ec\",\"license\":\"MIT\"},\"contracts/routers/CcTransferRouterLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./CcTransferRouterStorage.sol\\\";\\nimport \\\"./interfaces/ICcTransferRouter.sol\\\";\\nimport \\\"../libraries/RequestHelper.sol\\\";\\nimport \\\"../lockers/interfaces/ILockers.sol\\\";\\nimport \\\"../erc20/interfaces/ICoreBTC.sol\\\";\\nimport \\\"../common/libraries/BitcoinHelper.sol\\\";\\nimport \\\"../common/relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract CcTransferRouterLogic is ICcTransferRouter, CcTransferRouterStorage,\\n    Ownable2StepUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {\\n\\n    using BitcoinHelper for bytes;\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"CCTransferRouter: address is zero\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice                             Gives default params to initiate cc transfer router\\n    /// @param _startingBlockNumber         Requests that are included in a block older than _startingBlockNumber cannot be executed\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee (min: %0.01)\\n    /// @param _version                     Version of op return payload\\n    /// @param _chainId                     Id of the underlying chain\\n    /// @param _appId                       Id of ccTransfer dApp\\n    /// @param _relay                       The Relay address to validate data from source chain\\n    /// @param _lockers                     Lockers' contract address\\n    /// @param _coreBTC                     CoreDAO BTC ERC20 token address\\n    /// @param _treasury                    Address of treasury that collects protocol fees\\n    function initialize(\\n        uint _startingBlockNumber,\\n        uint _protocolPercentageFee,\\n        uint _version,\\n        uint _chainId,\\n        uint _appId,\\n        address _relay,\\n        address _lockers,\\n        address _coreBTC,\\n        address _treasury\\n    ) public initializer {\\n        Ownable2StepUpgradeable.__Ownable2Step_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        UUPSUpgradeable.__UUPSUpgradeable_init();\\n\\n        version = _version;\\n        chainId = _chainId;\\n        appId = _appId;\\n        _setStartingBlockNumber(_startingBlockNumber);\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n        _setRelay(_relay);\\n        _setLockers(_lockers);\\n        _setCoreBTC(_coreBTC);\\n        _setTreasury(_treasury);\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    /// @notice Setter for starting block number\\n    function setStartingBlockNumber(uint _startingBlockNumber) external override onlyOwner {\\n        _setStartingBlockNumber(_startingBlockNumber);\\n    }\\n\\n    /// @notice                             Setter for protocol percentage fee\\n    /// @dev                                Only owner can call this\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external override onlyOwner {\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n    }\\n\\n    /// @notice                             Setter for relay\\n    /// @dev                                Only owner can call this\\n    /// @param _relay                       Address of the relay contract\\n    function setRelay(address _relay) external override nonZeroAddress(_relay) onlyOwner {\\n        _setRelay(_relay);\\n    }\\n\\n    /// @notice                             Setter for lockers\\n    /// @dev                                Only owner can call this\\n    /// @param _lockers                     Address of the lockers contract\\n    function setLockers(address _lockers) external override nonZeroAddress(_lockers) onlyOwner {\\n        _setLockers(_lockers);\\n    }\\n\\n    /// @notice                             Setter for coreBTC\\n    /// @dev                                Only owner can call this\\n    /// @param _coreBTC                     CoreDAO BTC ERC20 token address\\n    function setCoreBTC(address _coreBTC) external override nonZeroAddress(_coreBTC) onlyOwner {\\n        _setCoreBTC(_coreBTC);\\n    }\\n\\n    /// @notice                             Setter for treasury\\n    /// @dev                                Only owner can call this\\n    /// @param _treasury                    Treasury address\\n    function setTreasury(address _treasury) external override nonZeroAddress(_treasury) onlyOwner {\\n        _setTreasury(_treasury);\\n    }\\n\\n    /// @notice                             Internal setter for protocol percentage fee\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee\\n    function _setProtocolPercentageFee(uint _protocolPercentageFee) private {\\n        require(\\n            MAX_PROTOCOL_FEE >= _protocolPercentageFee,\\n            \\\"CCTransferRouter: protocol fee is out of range\\\"\\n        );\\n        emit NewProtocolPercentageFee(protocolPercentageFee, _protocolPercentageFee);\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice Internal setter for starting block number\\n    function _setStartingBlockNumber(uint _startingBlockNumber) private {\\n        require(\\n            _startingBlockNumber > startingBlockNumber,\\n            \\\"CCTransferRouter: low startingBlockNumber\\\"\\n        );\\n        startingBlockNumber = _startingBlockNumber;\\n    }\\n\\n    /// @notice                             Internal setter for relay\\n    /// @param _relay                       Address of the relay contract\\n    function _setRelay(address _relay) private nonZeroAddress(_relay) {\\n        emit NewRelay(relay, _relay);\\n        relay = _relay;\\n    }\\n\\n    /// @notice                             Internal setter for relay\\n    /// @param _lockers                     Address of the lockers contract\\n    function _setLockers(address _lockers) private nonZeroAddress(_lockers) {\\n        emit NewLockers(lockers, _lockers);\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice                             Internal setter for coreBTC\\n    /// @param _coreBTC                     CoreDAO BTC ERC20 token address\\n    function _setCoreBTC(address _coreBTC) private nonZeroAddress(_coreBTC) {\\n        emit NewCoreBTC(coreBTC, _coreBTC);\\n        coreBTC = _coreBTC;\\n    }\\n\\n    /// @notice                             Internal setter for treasury\\n    /// @param _treasury                    Treasury address\\n    function _setTreasury(address _treasury) private nonZeroAddress(_treasury) {\\n        emit NewTreasury(treasury, _treasury);\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice                             Check if the request has been executed before\\n    /// @dev                                This is to avoid re-submitting a used request\\n    /// @param _txId                        The txId of request on the source chain\\n    /// @return                             True if the request has been executed\\n    function isRequestUsed(bytes32 _txId) external view override returns (bool) {\\n        return ccTransferRequests[_txId].isUsed ? true : false;\\n    }\\n\\n    /// @notice                             Executes the cross chain transfer request\\n    /// @dev                                Validates the transfer request\\n    /// @param _tx                          Bitcoin tx\\n    /// @param _blockNumber                 The block number of the request tx\\n    /// @param _intermediateNodes           Merkle proof for tx\\n    /// @param _index                       Index of tx in the block\\n    /// @param _lockerLockingScript         Locking script of locker that user has sent BTC to it\\n    /// @return                             True if the transfer is successful\\n    function lockProof(\\n        // Bitcoin tx\\n        bytes calldata _tx,\\n        // Bitcoin block number\\n        uint256 _blockNumber,\\n        // Merkle proof\\n        bytes calldata _intermediateNodes,\\n        uint _index,\\n        bytes calldata _lockerLockingScript\\n    ) external nonReentrant override returns (bool) {\\n        require(_blockNumber >= startingBlockNumber, \\\"CCTransferRouter: request is too old\\\");\\n\\n        // Finds txId on the source chain\\n        bytes32 txId = BitcoinHelper.calculateTxId(_tx);\\n\\n        require(\\n            !ccTransferRequests[txId].isUsed,\\n            \\\"CCTransferRouter: request has been used before\\\"\\n        );\\n\\n        (, , bytes29 voutView, uint32 lockTime) = _tx.extractTx();\\n        require(lockTime == 0, \\\"CCTransferRouter: lock time is non -zero\\\");\\n\\n        // Extracts information from the request\\n        _saveCCTransferRequest(_lockerLockingScript, voutView, txId);\\n\\n        // Checks if tx has been confirmed on source chain\\n        require(\\n            _isConfirmed(\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCTransferRouter: transaction has not been finalized yet\\\"\\n        );\\n\\n        // Normal cc transfer request\\n        (uint receivedAmount, uint _protocolFee, uint _porterFee) = _sendCoreBTC(\\n            _lockerLockingScript,\\n            txId\\n        );\\n        emit CCTransfer(\\n            _lockerLockingScript,\\n            0,\\n            ILockers(lockers).getLockerTargetAddress(_lockerLockingScript),\\n            ccTransferRequests[txId].recipientAddress,\\n            ccTransferRequests[txId].inputAmount,\\n            receivedAmount,\\n            _msgSender(),\\n            _porterFee,\\n            _protocolFee,\\n            txId\\n        );\\n        return true;\\n    }\\n\\n    /// @notice                             Sends minted coreBTC to the user\\n    /// @param _lockerLockingScript         Locker's locking script\\n    /// @param _txId                        The transaction ID of the request\\n    /// @return _remainedAmount             Amount of coreBTC that user receives after reducing fees\\n    function _sendCoreBTC(bytes memory _lockerLockingScript, bytes32 _txId) private returns (\\n        uint _remainedAmount,\\n        uint _protocolFee,\\n        uint _porterFee\\n    ) {\\n        // Gets remained amount after reducing fees\\n        (_remainedAmount, _protocolFee, _porterFee) = _mintAndReduceFees(_lockerLockingScript, _txId);\\n\\n        // Transfers rest of tokens to recipient\\n        ICoreBTC(coreBTC).transfer(\\n            ccTransferRequests[_txId].recipientAddress,\\n            _remainedAmount\\n        );\\n    }\\n\\n    /// @notice                             Parses and saves the request\\n    /// @dev                                Checks that user has sent BTC to a valid locker\\n    /// @param _lockerLockingScript         Locker's locking script\\n    /// @param _voutView                    The outputs view of the tx\\n    /// @param _txId                        The txID of the request\\n    function _saveCCTransferRequest(\\n        bytes memory _lockerLockingScript,\\n        bytes29 _voutView,\\n        bytes32 _txId\\n    ) private {\\n\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCTransferRouter: no locker with the given locking script exists\\\"\\n        );\\n\\n        // Extracts value and opreturn data from request\\n        ccTransferRequest memory request; // Defines it to save gas\\n        bytes memory arbitraryData;\\n\\n        (request.inputAmount, arbitraryData) = BitcoinHelper.parseValueAndDataHavingLockingScript(\\n            _voutView,\\n            _lockerLockingScript\\n        );\\n\\n        require(arbitraryData.length == 27, \\\"CCTransferRouter: invalid len\\\");\\n\\n        // Checks that input amount is not zero\\n        require(request.inputAmount > 0, \\\"CCTransferRouter: input amount is zero\\\");\\n\\n        // Checks version, chain id and app id\\n        require(RequestHelper.parseVersion(arbitraryData) == version, \\\"CCTransferRouter: version is not correct\\\");\\n        require(RequestHelper.parseChainId(arbitraryData) == chainId, \\\"CCTransferRouter: chain id is not correct\\\");\\n        require(RequestHelper.parseAppId(arbitraryData) == appId, \\\"CCTransferRouter: app id is not correct\\\");\\n\\n        // Calculates fee\\n        uint percentageFee = RequestHelper.parsePercentageFee(arbitraryData);\\n        require(percentageFee <= MAX_PROTOCOL_FEE, \\\"CCTransferRouter: percentage fee is out of range\\\");\\n        request.fee = percentageFee*request.inputAmount/MAX_PROTOCOL_FEE;\\n\\n        // Parses recipient address\\n        request.recipientAddress = RequestHelper.parseRecipientAddress(arbitraryData);\\n\\n        // Marks the request as used\\n        request.isUsed = true;\\n\\n        // Saves the request data\\n        ccTransferRequests[_txId] = request;\\n    }\\n\\n    /// @notice                             Checks if tx has been finalized on source chain\\n    /// @dev                                Pays relay fee using included ETH in the transaction\\n    /// @param _txId                        The request tx\\n    /// @param _blockNumber                 The block number of the tx\\n    /// @param _intermediateNodes           Merkle proof for tx\\n    /// @param _index                       Index of tx in the block\\n    /// @return                             True if the tx is finalized on the source chain\\n    function _isConfirmed(\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) private view returns (bool) {\\n\\n        // Calls relay contract (transfers all msg.value to it)\\n        bytes memory data = Address.functionStaticCall(\\n            relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            )\\n        );\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice                       Mints coreBTC by calling lockers contract\\n    /// @param _lockerLockingScript   Locker's locking script\\n    /// @param _txId                  The transaction ID of the request\\n    /// @return _remainedAmount       Amount of coreBTC that user receives after reducing all fees (protocol, locker, porter)\\n    function _mintAndReduceFees(\\n        bytes memory _lockerLockingScript,\\n        bytes32 _txId\\n    ) private returns (uint _remainedAmount, uint _protocolFee, uint _porterFee) {\\n\\n        // Mints coreBTC for cc transfer router\\n        // Lockers contract gets locker's fee\\n        uint mintedAmount = ILockers(lockers).mint(\\n            _lockerLockingScript,\\n            address(this),\\n            _txId,\\n            ccTransferRequests[_txId].inputAmount\\n        );\\n\\n        // Calculates fees\\n        _protocolFee = ccTransferRequests[_txId].inputAmount*protocolPercentageFee/MAX_PROTOCOL_FEE;\\n        _porterFee = ccTransferRequests[_txId].fee;\\n\\n        // Pays Porter fee\\n        if (_porterFee > 0) {\\n            ICoreBTC(coreBTC).transfer(_msgSender(), _porterFee);\\n        }\\n\\n        // Pays protocol fee\\n        if (_protocolFee > 0) {\\n            ICoreBTC(coreBTC).transfer(treasury, _protocolFee);\\n        }\\n\\n        _remainedAmount = mintedAmount - _protocolFee - _porterFee;\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0xe8d7e3fc5825783debb42c07b5c5179aa2ae0ee6c92927a93d257a77c72d08c4\",\"license\":\"MIT\"},\"contracts/routers/CcTransferRouterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/ICcTransferRouterStorage.sol\\\";\\n\\ncontract CcTransferRouterStorage is ICcTransferRouterStorage {\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n\\n    // Public variables\\n    uint public override startingBlockNumber;\\n    uint public override version;\\n    uint public override chainId;\\n    uint public override appId;\\n    uint public override protocolPercentageFee; // A number between 0 to 10000\\n    address public override relay;\\n    address public override lockers;\\n    address public override coreBTC;\\n    address public override treasury;\\n    mapping(bytes32 => ccTransferRequest) public ccTransferRequests; // TxId to ccTransferRequest structure\\n\\n}\",\"keccak256\":\"0xadac005db0151c2e83ea38d7bb1b7857d6a5c3f7e4ccae016a9e98e842b8f729\",\"license\":\"MIT\"},\"contracts/routers/interfaces/ICcTransferRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ICcTransferRouter {\\n\\n\\t// Events\\n\\n\\t/// @notice                    \\tEmits when a cc transfer request gets done\\n\\t/// @param lockerLockingScript  Locking script of the locker on bitcoin network\\n\\t/// @param lockerScriptType     Script type of the locker locking script\\n\\t/// @param lockerTargetAddress  Address of the locker on EVM based target chain\\n\\t/// @param user                \\tAddress of coreBTC recipient\\n\\t/// @param inputAmount         \\tAmount of tokens that user locked on source chain\\n\\t/// @param receivedAmount      \\tAmount of tokens that user receives\\n\\t/// @param porter          \\tAddress of porter who submitted the request\\n\\t/// @param porterFee       \\tAmount of fee that is paid to Porter (tx, relayer and porter fees)\\n\\t/// @param protocolFee         \\tAmount of fee that is paid to the protocol\\n\\t/// @param bitcoinTxId         \\tAddress of porter who submitted the request\\n\\tevent CCTransfer(\\n\\t\\tbytes indexed lockerLockingScript,\\n\\t\\tuint lockerScriptType,\\n\\t\\taddress lockerTargetAddress,\\n\\t\\taddress indexed user,\\n\\t\\tuint inputAmount,\\n\\t\\tuint receivedAmount,\\n\\t\\taddress porter,\\n\\t\\tuint porterFee,\\n\\t\\tuint protocolFee,\\n\\t\\tbytes32 bitcoinTxId\\n\\t);\\n\\n\\t/// @notice                     Emits when changes made to relay address\\n    event NewRelay (\\n        address oldRelay,\\n        address newRelay\\n    );\\n\\n    /// @notice                     Emits when changes made to Lockers address\\n    event NewLockers (\\n        address oldLockers,\\n        address newLockers\\n    );\\n\\n    /// @notice                     Emits when changes made to CoreBTC address\\n    event NewCoreBTC (\\n        address oldCoreBTC,\\n        address newCoreBTC\\n    );\\n\\n    /// @notice                     Emits when changes made to protocol percentage fee\\n    event NewProtocolPercentageFee (\\n        uint oldProtocolPercentageFee,\\n        uint newProtocolPercentageFee\\n    );\\n\\n    /// @notice                     Emits when changes made to Treasury address\\n    event NewTreasury (\\n        address oldTreasury,\\n        address newTreasury\\n    );\\n\\n\\t// Read-only functions\\n\\n\\tfunction isRequestUsed(bytes32 _txId) external view returns (bool);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setCoreBTC(address _coreBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\n\\tfunction lockProof(\\n\\t\\t// Bitcoin tx\\n\\t\\tbytes calldata _tx,\\n\\t\\t// Bitcoin block number\\n\\t\\tuint256 _blockNumber,\\n\\t\\t// Merkle proof\\n\\t\\tbytes calldata _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes calldata _lockerLockingScript\\n\\t) external returns (bool);\\n}\",\"keccak256\":\"0xd5f86875744bd0b4f70dcb54d2b09bedb641d4656047e6b4de3a051b5435fbfd\",\"license\":\"MIT\"},\"contracts/routers/interfaces/ICcTransferRouterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ICcTransferRouterStorage {\\n\\n\\t// // Structures\\n\\n\\t/// @notice                    Structure for recording cross-chain transfer requests\\n\\t/// @param inputAmount         Amount of locked BTC on source chain\\n\\t/// @param recipientAddress    Address of transfer recipient\\n\\t/// @param fee                 Amount of fee that is paid to Porter (tx, relayer and porter fees)\\n\\t/// @param isUsed              Whether the tx is used or not\\n\\tstruct ccTransferRequest {\\n\\t\\tuint inputAmount;\\n\\t\\taddress recipientAddress;\\n\\t\\tuint fee;\\n\\t\\tbool isUsed;\\n\\t}\\n\\n\\t// Read-only functions\\n\\n\\tfunction startingBlockNumber() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction version() external view returns (uint);\\n\\n\\tfunction chainId() external view returns (uint);\\n\\n\\tfunction appId() external view returns (uint);\\n\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction coreBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n}\",\"keccak256\":\"0xc09380a75bb7b9cabfa8a30e262e67aebb024228254a7c7acfac5b0dd661ff74\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../common/types/ScriptTypesEnum.sol\\\";\\n\\nlibrary DataTypes {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingCoreBTCAmount        Total amount of coreBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing coreBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 Shows if it's script hash\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingCoreBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address coreBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint slashCompensationRatio;\\n    }\\n}\",\"keccak256\":\"0xb813c88c366a51419f7138c11190c0a569c2711876b9231c15505c3ced415e05\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b506200002362000029565b620000eb565b600a54610100900460ff1615620000965760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b600a5460ff9081161015620000e957600a805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805160601c61406e6200012660003960008181610b5001528181610b9001528181610c6901528181610ca90152610d38015261406e6000f3fe6080604052600436106101a05760003560e01c8063715018a6116100ec5780639a8a05921161008a578063c805f68b11610064578063c805f68b146104c0578063e30c3978146104e0578063f0f44260146104fe578063f2fde38b1461051e57600080fd5b80639a8a05921461046a578063b14d353214610480578063b59589d1146104a057600080fd5b80637ed55748116100c65780637ed55748146103f657806380afdea81461041657806380bc47261461042c5780638da5cb5b1461044c57600080fd5b8063715018a614610353578063765f02331461036857806379ba5097146103e157600080fd5b80633659cfe61161015957806352d1902d1161013357806352d1902d146102f257806354fd4d501461030757806361d027b31461031d57806370872aa51461033d57600080fd5b80633659cfe61461029f5780634be50e57146102bf5780634f1ef286146102df57600080fd5b806309fd0473146101ac578063136dfb63146101e15780631812adb6146102035780631876dec4146102275780631a2783f21461025f5780631e7107c71461027f57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004613a65565b61053e565b60405190151581526020015b60405180910390f35b3480156101ed57600080fd5b506102016101fc366004613b0d565b6109c2565b005b34801561020f57600080fd5b5061021960045481565b6040519081526020016101d8565b34801561023357600080fd5b50600654610247906001600160a01b031681565b6040516001600160a01b0390911681526020016101d8565b34801561026b57600080fd5b50600754610247906001600160a01b031681565b34801561028b57600080fd5b5061020161029a366004613a35565b610b31565b3480156102ab57600080fd5b506102016102ba36600461391f565b610b45565b3480156102cb57600080fd5b506102016102da36600461391f565b610c22565b6102016102ed366004613957565b610c5e565b3480156102fe57600080fd5b50610219610d2b565b34801561031357600080fd5b5061021960015481565b34801561032957600080fd5b50600854610247906001600160a01b031681565b34801561034957600080fd5b5061021960005481565b34801561035f57600080fd5b50610201610dde565b34801561037457600080fd5b506103b7610383366004613a35565b600960205260009081526040902080546001820154600283015460039093015491926001600160a01b039091169160ff1684565b604080519485526001600160a01b03909316602085015291830152151560608201526080016101d8565b3480156103ed57600080fd5b50610201610de8565b34801561040257600080fd5b50610201610411366004613a35565b610e5f565b34801561042257600080fd5b5061021960035481565b34801561043857600080fd5b506101cc610447366004613a35565b610e70565b34801561045857600080fd5b50603d546001600160a01b0316610247565b34801561047657600080fd5b5061021960025481565b34801561048c57600080fd5b5061020161049b36600461391f565b610e99565b3480156104ac57600080fd5b50600554610247906001600160a01b031681565b3480156104cc57600080fd5b506102016104db36600461391f565b610ed1565b3480156104ec57600080fd5b50606f546001600160a01b0316610247565b34801561050a57600080fd5b5061020161051936600461391f565b610f09565b34801561052a57600080fd5b5061020161053936600461391f565b610f41565b6000610548610fb2565b6000548710156105ab5760405162461bcd60e51b8152602060048201526024808201527f43435472616e73666572526f757465723a207265717565737420697320746f6f604482015263081bdb1960e21b60648201526084015b60405180910390fd5b60006105ec8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061100c92505050565b60008181526009602052604090206003015490915060ff16156106685760405162461bcd60e51b815260206004820152602e60248201527f43435472616e73666572526f757465723a20726571756573742068617320626560448201526d656e2075736564206265666f726560901b60648201526084016105a2565b6000806106aa8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110da92505050565b9350935050508063ffffffff166000146107175760405162461bcd60e51b815260206004820152602860248201527f43435472616e73666572526f757465723a206c6f636b2074696d65206973206e6044820152676f6e202d7a65726f60c01b60648201526084016105a2565b61075a86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525086925087915061124c9050565b61079d838b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611689915050565b61080f5760405162461bcd60e51b815260206004820152603860248201527f43435472616e73666572526f757465723a207472616e73616374696f6e20686160448201527f73206e6f74206265656e2066696e616c697a656420796574000000000000000060648201526084016105a2565b600080600061085589898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611705915050565b6000898152600960205260409081902060010154905193965091945092506001600160a01b03169061088a908b908b90613bc7565b60405180910390207f93a42f3ea040dae7046a151abb57face220c19ba7d358aa383bc7552d289b31b6000600660009054906101000a90046001600160a01b03166001600160a01b031663c4d10b6a8e8e6040518363ffffffff1660e01b81526004016108f8929190613c52565b60206040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610948919061393b565b60008b8152600960205260409020548833604080519586526001600160a01b039485166020870152850192909252606084015216608082015260a0810185905260c0810186905260e081018a90526101000160405180910390a3600196505050505050506109b6600160a155565b98975050505050505050565b600a54610100900460ff16158080156109e25750600a54600160ff909116105b806109fc5750303b1580156109fc5750600a5460ff166001145b610a5f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105a2565b600a805460ff191660011790558015610a8257600a805461ff0019166101001790555b610a8a6117c3565b610a926117f2565b610a9a611821565b600188905560028790556003869055610ab28a611848565b610abb896118b0565b610ac48561195a565b610acd846119eb565b610ad683611a7c565b610adf82611b0d565b8015610b2557600a805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b610b39611b9e565b610b4281611848565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b8e5760405162461bcd60e51b81526004016105a290613ccc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bd7600080516020613fcd833981519152546001600160a01b031690565b6001600160a01b031614610bfd5760405162461bcd60e51b81526004016105a290613d18565b610c0681611bf8565b60408051600080825260208201909252610b4291839190611c00565b806001600160a01b038116610c495760405162461bcd60e51b81526004016105a290613d64565b610c51611b9e565b610c5a82611a7c565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ca75760405162461bcd60e51b81526004016105a290613ccc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610cf0600080516020613fcd833981519152546001600160a01b031690565b6001600160a01b031614610d165760405162461bcd60e51b81526004016105a290613d18565b610d1f82611bf8565b610c5a82826001611c00565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610dcb5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105a2565b50600080516020613fcd83398151915290565b610de6611b9e565b565b606f5433906001600160a01b03168114610e565760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016105a2565b610b4281611d7f565b610e67611b9e565b610b42816118b0565b60008181526009602052604081206003015460ff16610e90576000610e93565b60015b92915050565b806001600160a01b038116610ec05760405162461bcd60e51b81526004016105a290613d64565b610ec8611b9e565b610c5a826119eb565b806001600160a01b038116610ef85760405162461bcd60e51b81526004016105a290613d64565b610f00611b9e565b610c5a8261195a565b806001600160a01b038116610f305760405162461bcd60e51b81526004016105a290613d64565b610f38611b9e565b610c5a82611b0d565b610f49611b9e565b606f80546001600160a01b0383166001600160a01b03199091168117909155610f7a603d546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600260a15414156110055760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105a2565b600260a155565b60008060028360405161101f9190613bd7565b602060405180830381855afa15801561103c573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061105f9190613a4d565b9050600060028260405160200161107891815260200190565b60408051601f198184030181529082905261109291613bd7565b602060405180830381855afa1580156110af573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906110d29190613a4d565b949350505050565b6000808080806110ea8682611d98565b905061110761110262ffffff19831660006004611dbc565b611f13565b94506004600061113661112783601886901c6001600160601b0316613ee2565b62ffffff198516906000611f7c565b9050600061114382611fb0565b905061115862ffffff1985168483600661208c565b96506111648184613df0565b925061118f61118084601887901c6001600160601b0316613ee2565b62ffffff198616906000611f7c565b9150600061119c836120fc565b90506111b58482600f5b62ffffff19891692919061208c565b96506111c18185613df0565b93506111d861110262ffffff198716866004611dbc565b9550601885901c6001600160601b03166111f3856004613df0565b146112405760405162461bcd60e51b815260206004820152601960248201527f426974636f696e48656c7065723a20696e76616c69642074780000000000000060448201526064016105a2565b50505050509193509193565b60065460405163aff2faa360e01b81526001600160a01b039091169063aff2faa39061127c908690600401613c81565b60206040518083038186803b15801561129457600080fd5b505afa1580156112a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cc9190613a15565b611340576040805162461bcd60e51b81526020600482015260248101919091527f43435472616e73666572526f757465723a206e6f206c6f636b6572207769746860448201527f2074686520676976656e206c6f636b696e67207363726970742065786973747360648201526084016105a2565b604080516080810182526000808252602082018190529181018290526060810191909152606061137084866121c5565b6001600160401b0390911683528051909150601b146113d15760405162461bcd60e51b815260206004820152601d60248201527f43435472616e73666572526f757465723a20696e76616c6964206c656e00000060448201526064016105a2565b815161142e5760405162461bcd60e51b815260206004820152602660248201527f43435472616e73666572526f757465723a20696e70757420616d6f756e74206960448201526573207a65726f60d01b60648201526084016105a2565b60015461143a826122e9565b60ff161461149b5760405162461bcd60e51b815260206004820152602860248201527f43435472616e73666572526f757465723a2076657273696f6e206973206e6f746044820152670818dbdc9c9958dd60c21b60648201526084016105a2565b6002546114a782612303565b61ffff161461150a5760405162461bcd60e51b815260206004820152602960248201527f43435472616e73666572526f757465723a20636861696e206964206973206e6f6044820152681d0818dbdc9c9958dd60ba1b60648201526084016105a2565b6003546115168261231e565b61ffff16146115775760405162461bcd60e51b815260206004820152602760248201527f43435472616e73666572526f757465723a20617070206964206973206e6f742060448201526618dbdc9c9958dd60ca1b60648201526084016105a2565b60006115828261232e565b61ffff1690506127108111156115f35760405162461bcd60e51b815260206004820152603060248201527f43435472616e73666572526f757465723a2070657263656e746167652066656560448201526f206973206f7574206f662072616e676560801b60648201526084016105a2565b8251612710906116039083613e9a565b61160d9190613e7a565b604084015261161b8261233e565b6001600160a01b0390811660208581019182526001606087018181526000988952600990925260409788902087518155925190830180546001600160a01b0319169190941617909255949093015160028501555050516003909101805460ff19169115159190911790555050565b60055460405160009182916116e5916001600160a01b0316906116b6908990899089908990602401613c22565b60408051601f198184030181529190526020810180516001600160e01b0316634354da2560e01b179052612359565b9050808060200190518101906116fb9190613a15565b9695505050505050565b6000806000611714858561237e565b6007546000888152600960205260409081902060010154905163a9059cbb60e01b81526001600160a01b03918216600482015260248101869052949750929550909350169063a9059cbb90604401602060405180830381600087803b15801561177c57600080fd5b505af1158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b49190613a15565b509250925092565b600160a155565b600a54610100900460ff166117ea5760405162461bcd60e51b81526004016105a290613da5565b610de66125a7565b600a54610100900460ff166118195760405162461bcd60e51b81526004016105a290613da5565b610de66125d7565b600a54610100900460ff16610de65760405162461bcd60e51b81526004016105a290613da5565b60005481116118ab5760405162461bcd60e51b815260206004820152602960248201527f43435472616e73666572526f757465723a206c6f77207374617274696e67426c60448201526837b1b5a73ab6b132b960b91b60648201526084016105a2565b600055565b8061271010156119195760405162461bcd60e51b815260206004820152602e60248201527f43435472616e73666572526f757465723a2070726f746f636f6c20666565206960448201526d73206f7574206f662072616e676560901b60648201526084016105a2565b60045460408051918252602082018390527f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b910160405180910390a1600455565b806001600160a01b0381166119815760405162461bcd60e51b81526004016105a290613d64565b600554604080516001600160a01b03928316815291841660208301527f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f4910160405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116611a125760405162461bcd60e51b81526004016105a290613d64565b600654604080516001600160a01b03928316815291841660208301527ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c3910160405180910390a150600680546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116611aa35760405162461bcd60e51b81526004016105a290613d64565b600754604080516001600160a01b03928316815291841660208301527ff1253c5d33616f62c4ae5b08481b0df4900a6eb1391d7d96098bf578bb314c52910160405180910390a150600780546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116611b345760405162461bcd60e51b81526004016105a290613d64565b600854604080516001600160a01b03928316815291841660208301527f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b228225910160405180910390a150600880546001600160a01b0319166001600160a01b0392909216919091179055565b603d546001600160a01b03163314610de65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105a2565b610b42611b9e565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c3857611c33836125fe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7157600080fd5b505afa925050508015611ca1575060408051601f3d908101601f19168201909252611c9e91810190613a4d565b60015b611d045760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105a2565b600080516020613fcd8339815191528114611d735760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105a2565b50611c3383838361269a565b606f80546001600160a01b0319169055610b42816126c5565b815160009060208401611db364ffffffffff85168284612717565b95945050505050565b6000611f09611dcc85858561275b565b60008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff1617905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b604082901c77ffffffffffffffff0000000000000000ffffffffffffffff16179050608081901b608082901c179050919050565b90505b9392505050565b600063ffffffff821115611f785760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016105a2565b5090565b6000611f098484611f968760181c6001600160601b031690565b6001600160601b0316611fa99190613ee2565b858561208c565b6000601882901c6001600160601b0316611fcc57506000919050565b6000611fd98360006128b4565b9050601883901c6001600160601b03166001600160401b038216612001575060009392505050565b600061200c836129fd565b60ff16905060005b836001600160401b0316811015612083578282106120385750600095945050505050565b60006120586120478486613ee2565b60055b62ffffff198a169190611f7c565b905061206381612a56565b61206d9084613df0565b925050808061207b90613f70565b915050612014565b50949350505050565b6000806120a28660781c6001600160601b031690565b6001600160601b031690506120b686612ab5565b846120c18784613df0565b6120cb9190613df0565b11156120de5762ffffff199150506110d2565b6120e88582613df0565b90506116fb8364ffffffffff168286612717565b6000601882901c6001600160601b031661211857506000919050565b60006121258360006128b4565b9050601883901c6001600160601b03166001600160401b03821661214d575060009392505050565b6000612158836129fd565b60ff16905060005b836001600160401b0316811015612083578282106121845750600095945050505050565b600061219a6121938486613ee2565b600e61204a565b90506121a581612af6565b6121af9084613df0565b92505080806121bd90613f70565b915050612160565b6000606083600f6121de815b62ffffff19841690612b3f565b5060008060008060006121f28b60006128b4565b6001600160401b0316905060005b818110156122da576122128c82612c19565b955061221d86612d3f565b945061222886612d88565b935061223384612dd2565b925062ffffff1980841614156122b6578a6040516020016122549190613bd7565b604051602081830303815290604052805190602001206122798662ffffff1916612ef0565b6040516020016122899190613bd7565b6040516020818303038152906040528051906020012014156122b1576122ae86612f40565b99505b6122c8565b6122c562ffffff198416612ef0565b98505b806122d281613f70565b915050612200565b50505050505050509250929050565b6000806122f883600080612f65565b600101519392505050565b6000806123138360016002612f65565b600201519392505050565b6000806123138360036004612f65565b600080612313836019601a612f65565b60008061234e8360056018612f65565b601401519392505050565b6060611f0c8383604051806060016040528060258152602001613fed60259139612fea565b60065460008281526009602052604080822054905163536bdec160e11b815291928392839283926001600160a01b03169163a6d7bd82916123c8918a9130918b9190600401613c94565b602060405180830381600087803b1580156123e257600080fd5b505af11580156123f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241a9190613a4d565b6004546000878152600960205260409020549192506127109161243d9190613e9a565b6124479190613e7a565b600086815260096020526040902060020154909350915081156124f8576007546001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b1580156124be57600080fd5b505af11580156124d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f69190613a15565b505b82156125885760075460085460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291169063a9059cbb90604401602060405180830381600087803b15801561254e57600080fd5b505af1158015612562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125869190613a15565b505b816125938483613ee2565b61259d9190613ee2565b9350509250925092565b600a54610100900460ff166125ce5760405162461bcd60e51b81526004016105a290613da5565b610de633611d7f565b600a54610100900460ff166117bc5760405162461bcd60e51b81526004016105a290613da5565b6001600160a01b0381163b61266b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105a2565b600080516020613fcd83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6126a383613058565b6000825111806126b05750805b15611c33576126bf8383613098565b50505050565b603d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806127248385613df0565b9050604051811115612734575060005b806127465762ffffff19915050611f0c565b5050606092831b9190911790911b1760181b90565b600060ff821661276d57506000611f0c565b6127808460181c6001600160601b031690565b6001600160601b031661279660ff841685613df0565b11156127fa576127e16127b28560781c6001600160601b031690565b6001600160601b03166127ce8660181c6001600160601b031690565b6001600160601b0316858560ff16613183565b60405162461bcd60e51b81526004016105a29190613c81565b60208260ff1611156128745760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e20333220627974657300000000000060648201526084016105a2565b60088202600061288d8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000806128c962ffffff1985168460016132ad565b905060fc81116128e4576128dc816132dd565b915050610e93565b8060fd141561294a5761291261290d6128fe856001613df0565b62ffffff198716906002611dbc565b6132dd565b915061291d826129fd565b60ff166003146129455761294361293e62ffffff198616856003600061208c565b613345565b505b6129f6565b8060fe141561299f5761297361290d612964856001613df0565b62ffffff198716906004611dbc565b915061297e826129fd565b60ff166005146129455761294361293e62ffffff198616856005600061208c565b8060ff14156129f6576129c861290d6129b9856001613df0565b62ffffff198716906008611dbc565b91506129d3826129fd565b60ff166009146129f6576129f461293e62ffffff198616856009600061208c565b505b5092915050565b600060fc826001600160401b031611612a1857506001919050565b61ffff826001600160401b031611612a3257506003919050565b63ffffffff826001600160401b031611612a4e57506005919050565b506009919050565b6000816005612a64816121d1565b506000612a728560246128b4565b9050806001600160401b0316612a87826129fd565b60ff16612a949190613df0565b612a9f906024613df0565b612aaa906004613df0565b9350505b5050919050565b6000612aca8260181c6001600160601b031690565b612add8360781c6001600160601b031690565b612ae79190613e58565b6001600160601b031692915050565b600081600e612b04816121d1565b506000612b128560086128b4565b9050806001600160401b0316612b27826129fd565b60ff16612b349190613df0565b612aaa906008613df0565b6000612b4b83836133cc565b612c12576000612b6a612b5e8560d81c90565b64ffffffffff166133ef565b9150506000612b7f8464ffffffffff166133ef565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016105a29190613c81565b5090919050565b600082600f612c27816121d1565b506000612c358660006128b4565b6001600160401b03169050601886901c6001600160601b0316818610612c915760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b60448201526064016105a2565b6000612c9c836129fd565b60ff1690506000805b88811015612cf257612cc9612cba8486613ee2565b62ffffff198c1690600e611f7c565b9150612cd482612af6565b612cde9084613df0565b9250612ceb600182613df0565b9050612ca5565b50612d0f612d008385613ee2565b62ffffff198b1690600e611f7c565b90506000612d1c82612af6565b9050612d3162ffffff198b168483600d61208c565b9a9950505050505050505050565b600081600d612d4d816121d1565b506000612d5b8560086128b4565b9050612aaa612d69826129fd565b612d74906008613e33565b60ff166001600160401b03831660076111a6565b600081600d612d96816121d1565b506000612da48560086128b4565b9050612aaa600882612db5846129fd565b60ff16612dc29190613e08565b6001600160401b031660076111a6565b6000816007612de0816121d1565b506000612dee8560006128b4565b90506000612e0861290d62ffffff198816600260016132ad565b9050612e1c62ffffff1987166001806132ad565b606a141580612e505750612e31600283613ef9565b6001600160401b0316612e4d62ffffff198816600260016132ad565b14155b15612e635762ffffff1994505050612aae565b6053826001600160401b031611158015612e8757506004826001600160401b031610155b612ed35760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e48656c7065723a20696e76616c6964206f7072657475726e0060448201526064016105a2565b6116fb62ffffff19871660036001600160401b038416600c61208c565b6060600080612f088460181c6001600160601b031690565b60405193508392506001600160601b03169050612f2f84612f2a846020613df0565b61349b565b508181016020016040529052919050565b600081600d612f4e816121d1565b506110d261290d62ffffff19861660006008611dbc565b60606000835b612f76846001613df0565b811015612fe157858181518110612f9d57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b91508282604051602001612fbd929190613bf3565b60405160208183030381529060405292508080612fd990613f70565b915050612f6b565b50509392505050565b6060600080856001600160a01b0316856040516130079190613bd7565b600060405180830381855afa9150503d8060008114613042576040519150601f19603f3d011682016040523d82523d6000602084013e613047565b606091505b50915091506116fb868383876135f3565b613061816125fe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6131005760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105a2565b600080846001600160a01b03168460405161311b9190613bd7565b600060405180830381855af49150503d8060008114613156576040519150601f19603f3d011682016040523d82523d6000602084013e61315b565b606091505b5091509150611db3828260405180606001604052806027815260200161401260279139613669565b60606000613190866133ef565b915050600061319e866133ef565b91505060006131ac866133ef565b91505060006131ba866133ef565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b60006132ba826020613f21565b6132c5906008613eb9565b60ff166132d385858561275b565b901c949350505050565b60006001600160401b03821115611f785760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016105a2565b6060600061337961337482613366601887901c6001600160601b0316613682565b62ffffff19871691906132ad565b6133ef565b6040517f4e6f6e2d6d696e696d616c2076617220696e742e20476f74203078000000000060208201526dffffffffffffffffffffffffffff19607083901b16603b82015290925060009150604d01612be7565b60008164ffffffffff166133e08460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111561344d57600061340e826008613eb9565b60ff1685901c905061341f816136e3565b61ffff16841793508160ff1660101461343a57601084901b93505b50613446600182613f21565b90506133f5565b50600f5b60ff8160ff1610156134955760ff600882021684901c613470816136e3565b61ffff16831792508160ff1660001461348b57601083901b92505b5060001901613451565b50915091565b600062ffffff1980841614156135045760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b60648201526084016105a2565b61350d83613715565b61356d5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b60648201526084016105a2565b60006135828460181c6001600160601b031690565b6001600160601b0316905060006135a28560781c6001600160601b031690565b6001600160601b0316905060006040519050848111156135c25760206060fd5b8285848460045afa506116fb6135d88760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b6060831561365f578251613658576001600160a01b0385163b6136585760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105a2565b50816110d2565b6110d28383613753565b60608315613678575081611f0c565b611f0c8383613753565b600060ff821115611f785760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b60648201526084016105a2565b60006136f560048360ff16901c61377d565b60ff1661ffff919091161760081b61370c8261377d565b60ff1617919050565b60006137218260d81c90565b64ffffffffff1664ffffffffff141561373c57506000919050565b600061374783612ab5565b60405110199392505050565b8151156137635781518083602001fd5b8060405162461bcd60e51b81526004016105a29190613c81565b600060f08083179060ff821614156137985750603092915050565b8060ff1660f114156137ad5750603192915050565b8060ff1660f214156137c25750603292915050565b8060ff1660f314156137d75750603392915050565b8060ff1660f414156137ec5750603492915050565b8060ff1660f514156138015750603592915050565b8060ff1660f614156138165750603692915050565b8060ff1660f7141561382b5750603792915050565b8060ff1660f814156138405750603892915050565b8060ff1660f914156138555750603992915050565b8060ff1660fa141561386a5750606192915050565b8060ff1660fb141561387f5750606292915050565b8060ff1660fc14156138945750606392915050565b8060ff1660fd14156138a95750606492915050565b8060ff1660fe14156138be5750606592915050565b8060ff1660ff14156138d35750606692915050565b50919050565b60008083601f8401126138ea578182fd5b5081356001600160401b03811115613900578182fd5b60208301915083602082850101111561391857600080fd5b9250929050565b600060208284031215613930578081fd5b8135611f0c81613fb7565b60006020828403121561394c578081fd5b8151611f0c81613fb7565b60008060408385031215613969578081fd5b823561397481613fb7565b915060208301356001600160401b038082111561398f578283fd5b818501915085601f8301126139a2578283fd5b8135818111156139b4576139b4613fa1565b604051601f8201601f19908116603f011681019083821181831017156139dc576139dc613fa1565b816040528281528860208487010111156139f4578586fd5b82602086016020830137856020848301015280955050505050509250929050565b600060208284031215613a26578081fd5b81518015158114611f0c578182fd5b600060208284031215613a46578081fd5b5035919050565b600060208284031215613a5e578081fd5b5051919050565b60008060008060008060008060a0898b031215613a80578384fd5b88356001600160401b0380821115613a96578586fd5b613aa28c838d016138d9565b909a50985060208b0135975060408b0135915080821115613ac1578586fd5b613acd8c838d016138d9565b909750955060608b0135945060808b0135915080821115613aec578384fd5b50613af98b828c016138d9565b999c989b5096995094979396929594505050565b60008060008060008060008060006101208a8c031215613b2b578081fd5b8935985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135613b5981613fb7565b935060c08a0135613b6981613fb7565b925060e08a0135613b7981613fb7565b91506101008a0135613b8a81613fb7565b809150509295985092959850929598565b60008151808452613bb3816020860160208601613f44565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251613be9818460208701613f44565b9190910192915050565b60008351613c05818460208801613f44565b6001600160f81b0319939093169190920190815260010192915050565b848152836020820152608060408201526000613c416080830185613b9b565b905082606083015295945050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b602081526000611f0c6020830184613b9b565b608081526000613ca76080830187613b9b565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526021908201527f43435472616e73666572526f757465723a2061646472657373206973207a65726040820152606f60f81b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008219821115613e0357613e03613f8b565b500190565b60006001600160401b03808316818516808303821115613e2a57613e2a613f8b565b01949350505050565b600060ff821660ff84168060ff03821115613e5057613e50613f8b565b019392505050565b60006001600160601b03808316818516808303821115613e2a57613e2a613f8b565b600082613e9557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613eb457613eb4613f8b565b500290565b600060ff821660ff84168160ff0481118215151615613eda57613eda613f8b565b029392505050565b600082821015613ef457613ef4613f8b565b500390565b60006001600160401b0383811690831681811015613f1957613f19613f8b565b039392505050565b600060ff821660ff841680821015613f3b57613f3b613f8b565b90039392505050565b60005b83811015613f5f578181015183820152602001613f47565b838111156126bf5750506000910152565b6000600019821415613f8457613f84613f8b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b4257600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122014a86c818f57ba5f40d6653c3bd0aeec01fab70b28f9c024d4535355eb1b22d564736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c8063715018a6116100ec5780639a8a05921161008a578063c805f68b11610064578063c805f68b146104c0578063e30c3978146104e0578063f0f44260146104fe578063f2fde38b1461051e57600080fd5b80639a8a05921461046a578063b14d353214610480578063b59589d1146104a057600080fd5b80637ed55748116100c65780637ed55748146103f657806380afdea81461041657806380bc47261461042c5780638da5cb5b1461044c57600080fd5b8063715018a614610353578063765f02331461036857806379ba5097146103e157600080fd5b80633659cfe61161015957806352d1902d1161013357806352d1902d146102f257806354fd4d501461030757806361d027b31461031d57806370872aa51461033d57600080fd5b80633659cfe61461029f5780634be50e57146102bf5780634f1ef286146102df57600080fd5b806309fd0473146101ac578063136dfb63146101e15780631812adb6146102035780631876dec4146102275780631a2783f21461025f5780631e7107c71461027f57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004613a65565b61053e565b60405190151581526020015b60405180910390f35b3480156101ed57600080fd5b506102016101fc366004613b0d565b6109c2565b005b34801561020f57600080fd5b5061021960045481565b6040519081526020016101d8565b34801561023357600080fd5b50600654610247906001600160a01b031681565b6040516001600160a01b0390911681526020016101d8565b34801561026b57600080fd5b50600754610247906001600160a01b031681565b34801561028b57600080fd5b5061020161029a366004613a35565b610b31565b3480156102ab57600080fd5b506102016102ba36600461391f565b610b45565b3480156102cb57600080fd5b506102016102da36600461391f565b610c22565b6102016102ed366004613957565b610c5e565b3480156102fe57600080fd5b50610219610d2b565b34801561031357600080fd5b5061021960015481565b34801561032957600080fd5b50600854610247906001600160a01b031681565b34801561034957600080fd5b5061021960005481565b34801561035f57600080fd5b50610201610dde565b34801561037457600080fd5b506103b7610383366004613a35565b600960205260009081526040902080546001820154600283015460039093015491926001600160a01b039091169160ff1684565b604080519485526001600160a01b03909316602085015291830152151560608201526080016101d8565b3480156103ed57600080fd5b50610201610de8565b34801561040257600080fd5b50610201610411366004613a35565b610e5f565b34801561042257600080fd5b5061021960035481565b34801561043857600080fd5b506101cc610447366004613a35565b610e70565b34801561045857600080fd5b50603d546001600160a01b0316610247565b34801561047657600080fd5b5061021960025481565b34801561048c57600080fd5b5061020161049b36600461391f565b610e99565b3480156104ac57600080fd5b50600554610247906001600160a01b031681565b3480156104cc57600080fd5b506102016104db36600461391f565b610ed1565b3480156104ec57600080fd5b50606f546001600160a01b0316610247565b34801561050a57600080fd5b5061020161051936600461391f565b610f09565b34801561052a57600080fd5b5061020161053936600461391f565b610f41565b6000610548610fb2565b6000548710156105ab5760405162461bcd60e51b8152602060048201526024808201527f43435472616e73666572526f757465723a207265717565737420697320746f6f604482015263081bdb1960e21b60648201526084015b60405180910390fd5b60006105ec8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061100c92505050565b60008181526009602052604090206003015490915060ff16156106685760405162461bcd60e51b815260206004820152602e60248201527f43435472616e73666572526f757465723a20726571756573742068617320626560448201526d656e2075736564206265666f726560901b60648201526084016105a2565b6000806106aa8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110da92505050565b9350935050508063ffffffff166000146107175760405162461bcd60e51b815260206004820152602860248201527f43435472616e73666572526f757465723a206c6f636b2074696d65206973206e6044820152676f6e202d7a65726f60c01b60648201526084016105a2565b61075a86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525086925087915061124c9050565b61079d838b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611689915050565b61080f5760405162461bcd60e51b815260206004820152603860248201527f43435472616e73666572526f757465723a207472616e73616374696f6e20686160448201527f73206e6f74206265656e2066696e616c697a656420796574000000000000000060648201526084016105a2565b600080600061085589898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611705915050565b6000898152600960205260409081902060010154905193965091945092506001600160a01b03169061088a908b908b90613bc7565b60405180910390207f93a42f3ea040dae7046a151abb57face220c19ba7d358aa383bc7552d289b31b6000600660009054906101000a90046001600160a01b03166001600160a01b031663c4d10b6a8e8e6040518363ffffffff1660e01b81526004016108f8929190613c52565b60206040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610948919061393b565b60008b8152600960205260409020548833604080519586526001600160a01b039485166020870152850192909252606084015216608082015260a0810185905260c0810186905260e081018a90526101000160405180910390a3600196505050505050506109b6600160a155565b98975050505050505050565b600a54610100900460ff16158080156109e25750600a54600160ff909116105b806109fc5750303b1580156109fc5750600a5460ff166001145b610a5f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105a2565b600a805460ff191660011790558015610a8257600a805461ff0019166101001790555b610a8a6117c3565b610a926117f2565b610a9a611821565b600188905560028790556003869055610ab28a611848565b610abb896118b0565b610ac48561195a565b610acd846119eb565b610ad683611a7c565b610adf82611b0d565b8015610b2557600a805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b610b39611b9e565b610b4281611848565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b8e5760405162461bcd60e51b81526004016105a290613ccc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bd7600080516020613fcd833981519152546001600160a01b031690565b6001600160a01b031614610bfd5760405162461bcd60e51b81526004016105a290613d18565b610c0681611bf8565b60408051600080825260208201909252610b4291839190611c00565b806001600160a01b038116610c495760405162461bcd60e51b81526004016105a290613d64565b610c51611b9e565b610c5a82611a7c565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ca75760405162461bcd60e51b81526004016105a290613ccc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610cf0600080516020613fcd833981519152546001600160a01b031690565b6001600160a01b031614610d165760405162461bcd60e51b81526004016105a290613d18565b610d1f82611bf8565b610c5a82826001611c00565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610dcb5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105a2565b50600080516020613fcd83398151915290565b610de6611b9e565b565b606f5433906001600160a01b03168114610e565760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016105a2565b610b4281611d7f565b610e67611b9e565b610b42816118b0565b60008181526009602052604081206003015460ff16610e90576000610e93565b60015b92915050565b806001600160a01b038116610ec05760405162461bcd60e51b81526004016105a290613d64565b610ec8611b9e565b610c5a826119eb565b806001600160a01b038116610ef85760405162461bcd60e51b81526004016105a290613d64565b610f00611b9e565b610c5a8261195a565b806001600160a01b038116610f305760405162461bcd60e51b81526004016105a290613d64565b610f38611b9e565b610c5a82611b0d565b610f49611b9e565b606f80546001600160a01b0383166001600160a01b03199091168117909155610f7a603d546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600260a15414156110055760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105a2565b600260a155565b60008060028360405161101f9190613bd7565b602060405180830381855afa15801561103c573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061105f9190613a4d565b9050600060028260405160200161107891815260200190565b60408051601f198184030181529082905261109291613bd7565b602060405180830381855afa1580156110af573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906110d29190613a4d565b949350505050565b6000808080806110ea8682611d98565b905061110761110262ffffff19831660006004611dbc565b611f13565b94506004600061113661112783601886901c6001600160601b0316613ee2565b62ffffff198516906000611f7c565b9050600061114382611fb0565b905061115862ffffff1985168483600661208c565b96506111648184613df0565b925061118f61118084601887901c6001600160601b0316613ee2565b62ffffff198616906000611f7c565b9150600061119c836120fc565b90506111b58482600f5b62ffffff19891692919061208c565b96506111c18185613df0565b93506111d861110262ffffff198716866004611dbc565b9550601885901c6001600160601b03166111f3856004613df0565b146112405760405162461bcd60e51b815260206004820152601960248201527f426974636f696e48656c7065723a20696e76616c69642074780000000000000060448201526064016105a2565b50505050509193509193565b60065460405163aff2faa360e01b81526001600160a01b039091169063aff2faa39061127c908690600401613c81565b60206040518083038186803b15801561129457600080fd5b505afa1580156112a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cc9190613a15565b611340576040805162461bcd60e51b81526020600482015260248101919091527f43435472616e73666572526f757465723a206e6f206c6f636b6572207769746860448201527f2074686520676976656e206c6f636b696e67207363726970742065786973747360648201526084016105a2565b604080516080810182526000808252602082018190529181018290526060810191909152606061137084866121c5565b6001600160401b0390911683528051909150601b146113d15760405162461bcd60e51b815260206004820152601d60248201527f43435472616e73666572526f757465723a20696e76616c6964206c656e00000060448201526064016105a2565b815161142e5760405162461bcd60e51b815260206004820152602660248201527f43435472616e73666572526f757465723a20696e70757420616d6f756e74206960448201526573207a65726f60d01b60648201526084016105a2565b60015461143a826122e9565b60ff161461149b5760405162461bcd60e51b815260206004820152602860248201527f43435472616e73666572526f757465723a2076657273696f6e206973206e6f746044820152670818dbdc9c9958dd60c21b60648201526084016105a2565b6002546114a782612303565b61ffff161461150a5760405162461bcd60e51b815260206004820152602960248201527f43435472616e73666572526f757465723a20636861696e206964206973206e6f6044820152681d0818dbdc9c9958dd60ba1b60648201526084016105a2565b6003546115168261231e565b61ffff16146115775760405162461bcd60e51b815260206004820152602760248201527f43435472616e73666572526f757465723a20617070206964206973206e6f742060448201526618dbdc9c9958dd60ca1b60648201526084016105a2565b60006115828261232e565b61ffff1690506127108111156115f35760405162461bcd60e51b815260206004820152603060248201527f43435472616e73666572526f757465723a2070657263656e746167652066656560448201526f206973206f7574206f662072616e676560801b60648201526084016105a2565b8251612710906116039083613e9a565b61160d9190613e7a565b604084015261161b8261233e565b6001600160a01b0390811660208581019182526001606087018181526000988952600990925260409788902087518155925190830180546001600160a01b0319169190941617909255949093015160028501555050516003909101805460ff19169115159190911790555050565b60055460405160009182916116e5916001600160a01b0316906116b6908990899089908990602401613c22565b60408051601f198184030181529190526020810180516001600160e01b0316634354da2560e01b179052612359565b9050808060200190518101906116fb9190613a15565b9695505050505050565b6000806000611714858561237e565b6007546000888152600960205260409081902060010154905163a9059cbb60e01b81526001600160a01b03918216600482015260248101869052949750929550909350169063a9059cbb90604401602060405180830381600087803b15801561177c57600080fd5b505af1158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b49190613a15565b509250925092565b600160a155565b600a54610100900460ff166117ea5760405162461bcd60e51b81526004016105a290613da5565b610de66125a7565b600a54610100900460ff166118195760405162461bcd60e51b81526004016105a290613da5565b610de66125d7565b600a54610100900460ff16610de65760405162461bcd60e51b81526004016105a290613da5565b60005481116118ab5760405162461bcd60e51b815260206004820152602960248201527f43435472616e73666572526f757465723a206c6f77207374617274696e67426c60448201526837b1b5a73ab6b132b960b91b60648201526084016105a2565b600055565b8061271010156119195760405162461bcd60e51b815260206004820152602e60248201527f43435472616e73666572526f757465723a2070726f746f636f6c20666565206960448201526d73206f7574206f662072616e676560901b60648201526084016105a2565b60045460408051918252602082018390527f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b910160405180910390a1600455565b806001600160a01b0381166119815760405162461bcd60e51b81526004016105a290613d64565b600554604080516001600160a01b03928316815291841660208301527f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f4910160405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116611a125760405162461bcd60e51b81526004016105a290613d64565b600654604080516001600160a01b03928316815291841660208301527ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c3910160405180910390a150600680546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116611aa35760405162461bcd60e51b81526004016105a290613d64565b600754604080516001600160a01b03928316815291841660208301527ff1253c5d33616f62c4ae5b08481b0df4900a6eb1391d7d96098bf578bb314c52910160405180910390a150600780546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116611b345760405162461bcd60e51b81526004016105a290613d64565b600854604080516001600160a01b03928316815291841660208301527f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b228225910160405180910390a150600880546001600160a01b0319166001600160a01b0392909216919091179055565b603d546001600160a01b03163314610de65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105a2565b610b42611b9e565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c3857611c33836125fe565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7157600080fd5b505afa925050508015611ca1575060408051601f3d908101601f19168201909252611c9e91810190613a4d565b60015b611d045760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105a2565b600080516020613fcd8339815191528114611d735760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105a2565b50611c3383838361269a565b606f80546001600160a01b0319169055610b42816126c5565b815160009060208401611db364ffffffffff85168284612717565b95945050505050565b6000611f09611dcc85858561275b565b60008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff1617905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b604082901c77ffffffffffffffff0000000000000000ffffffffffffffff16179050608081901b608082901c179050919050565b90505b9392505050565b600063ffffffff821115611f785760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016105a2565b5090565b6000611f098484611f968760181c6001600160601b031690565b6001600160601b0316611fa99190613ee2565b858561208c565b6000601882901c6001600160601b0316611fcc57506000919050565b6000611fd98360006128b4565b9050601883901c6001600160601b03166001600160401b038216612001575060009392505050565b600061200c836129fd565b60ff16905060005b836001600160401b0316811015612083578282106120385750600095945050505050565b60006120586120478486613ee2565b60055b62ffffff198a169190611f7c565b905061206381612a56565b61206d9084613df0565b925050808061207b90613f70565b915050612014565b50949350505050565b6000806120a28660781c6001600160601b031690565b6001600160601b031690506120b686612ab5565b846120c18784613df0565b6120cb9190613df0565b11156120de5762ffffff199150506110d2565b6120e88582613df0565b90506116fb8364ffffffffff168286612717565b6000601882901c6001600160601b031661211857506000919050565b60006121258360006128b4565b9050601883901c6001600160601b03166001600160401b03821661214d575060009392505050565b6000612158836129fd565b60ff16905060005b836001600160401b0316811015612083578282106121845750600095945050505050565b600061219a6121938486613ee2565b600e61204a565b90506121a581612af6565b6121af9084613df0565b92505080806121bd90613f70565b915050612160565b6000606083600f6121de815b62ffffff19841690612b3f565b5060008060008060006121f28b60006128b4565b6001600160401b0316905060005b818110156122da576122128c82612c19565b955061221d86612d3f565b945061222886612d88565b935061223384612dd2565b925062ffffff1980841614156122b6578a6040516020016122549190613bd7565b604051602081830303815290604052805190602001206122798662ffffff1916612ef0565b6040516020016122899190613bd7565b6040516020818303038152906040528051906020012014156122b1576122ae86612f40565b99505b6122c8565b6122c562ffffff198416612ef0565b98505b806122d281613f70565b915050612200565b50505050505050509250929050565b6000806122f883600080612f65565b600101519392505050565b6000806123138360016002612f65565b600201519392505050565b6000806123138360036004612f65565b600080612313836019601a612f65565b60008061234e8360056018612f65565b601401519392505050565b6060611f0c8383604051806060016040528060258152602001613fed60259139612fea565b60065460008281526009602052604080822054905163536bdec160e11b815291928392839283926001600160a01b03169163a6d7bd82916123c8918a9130918b9190600401613c94565b602060405180830381600087803b1580156123e257600080fd5b505af11580156123f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241a9190613a4d565b6004546000878152600960205260409020549192506127109161243d9190613e9a565b6124479190613e7a565b600086815260096020526040902060020154909350915081156124f8576007546001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b1580156124be57600080fd5b505af11580156124d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f69190613a15565b505b82156125885760075460085460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291169063a9059cbb90604401602060405180830381600087803b15801561254e57600080fd5b505af1158015612562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125869190613a15565b505b816125938483613ee2565b61259d9190613ee2565b9350509250925092565b600a54610100900460ff166125ce5760405162461bcd60e51b81526004016105a290613da5565b610de633611d7f565b600a54610100900460ff166117bc5760405162461bcd60e51b81526004016105a290613da5565b6001600160a01b0381163b61266b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105a2565b600080516020613fcd83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6126a383613058565b6000825111806126b05750805b15611c33576126bf8383613098565b50505050565b603d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806127248385613df0565b9050604051811115612734575060005b806127465762ffffff19915050611f0c565b5050606092831b9190911790911b1760181b90565b600060ff821661276d57506000611f0c565b6127808460181c6001600160601b031690565b6001600160601b031661279660ff841685613df0565b11156127fa576127e16127b28560781c6001600160601b031690565b6001600160601b03166127ce8660181c6001600160601b031690565b6001600160601b0316858560ff16613183565b60405162461bcd60e51b81526004016105a29190613c81565b60208260ff1611156128745760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e20333220627974657300000000000060648201526084016105a2565b60088202600061288d8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000806128c962ffffff1985168460016132ad565b905060fc81116128e4576128dc816132dd565b915050610e93565b8060fd141561294a5761291261290d6128fe856001613df0565b62ffffff198716906002611dbc565b6132dd565b915061291d826129fd565b60ff166003146129455761294361293e62ffffff198616856003600061208c565b613345565b505b6129f6565b8060fe141561299f5761297361290d612964856001613df0565b62ffffff198716906004611dbc565b915061297e826129fd565b60ff166005146129455761294361293e62ffffff198616856005600061208c565b8060ff14156129f6576129c861290d6129b9856001613df0565b62ffffff198716906008611dbc565b91506129d3826129fd565b60ff166009146129f6576129f461293e62ffffff198616856009600061208c565b505b5092915050565b600060fc826001600160401b031611612a1857506001919050565b61ffff826001600160401b031611612a3257506003919050565b63ffffffff826001600160401b031611612a4e57506005919050565b506009919050565b6000816005612a64816121d1565b506000612a728560246128b4565b9050806001600160401b0316612a87826129fd565b60ff16612a949190613df0565b612a9f906024613df0565b612aaa906004613df0565b9350505b5050919050565b6000612aca8260181c6001600160601b031690565b612add8360781c6001600160601b031690565b612ae79190613e58565b6001600160601b031692915050565b600081600e612b04816121d1565b506000612b128560086128b4565b9050806001600160401b0316612b27826129fd565b60ff16612b349190613df0565b612aaa906008613df0565b6000612b4b83836133cc565b612c12576000612b6a612b5e8560d81c90565b64ffffffffff166133ef565b9150506000612b7f8464ffffffffff166133ef565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016105a29190613c81565b5090919050565b600082600f612c27816121d1565b506000612c358660006128b4565b6001600160401b03169050601886901c6001600160601b0316818610612c915760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b60448201526064016105a2565b6000612c9c836129fd565b60ff1690506000805b88811015612cf257612cc9612cba8486613ee2565b62ffffff198c1690600e611f7c565b9150612cd482612af6565b612cde9084613df0565b9250612ceb600182613df0565b9050612ca5565b50612d0f612d008385613ee2565b62ffffff198b1690600e611f7c565b90506000612d1c82612af6565b9050612d3162ffffff198b168483600d61208c565b9a9950505050505050505050565b600081600d612d4d816121d1565b506000612d5b8560086128b4565b9050612aaa612d69826129fd565b612d74906008613e33565b60ff166001600160401b03831660076111a6565b600081600d612d96816121d1565b506000612da48560086128b4565b9050612aaa600882612db5846129fd565b60ff16612dc29190613e08565b6001600160401b031660076111a6565b6000816007612de0816121d1565b506000612dee8560006128b4565b90506000612e0861290d62ffffff198816600260016132ad565b9050612e1c62ffffff1987166001806132ad565b606a141580612e505750612e31600283613ef9565b6001600160401b0316612e4d62ffffff198816600260016132ad565b14155b15612e635762ffffff1994505050612aae565b6053826001600160401b031611158015612e8757506004826001600160401b031610155b612ed35760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e48656c7065723a20696e76616c6964206f7072657475726e0060448201526064016105a2565b6116fb62ffffff19871660036001600160401b038416600c61208c565b6060600080612f088460181c6001600160601b031690565b60405193508392506001600160601b03169050612f2f84612f2a846020613df0565b61349b565b508181016020016040529052919050565b600081600d612f4e816121d1565b506110d261290d62ffffff19861660006008611dbc565b60606000835b612f76846001613df0565b811015612fe157858181518110612f9d57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b91508282604051602001612fbd929190613bf3565b60405160208183030381529060405292508080612fd990613f70565b915050612f6b565b50509392505050565b6060600080856001600160a01b0316856040516130079190613bd7565b600060405180830381855afa9150503d8060008114613042576040519150601f19603f3d011682016040523d82523d6000602084013e613047565b606091505b50915091506116fb868383876135f3565b613061816125fe565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6131005760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105a2565b600080846001600160a01b03168460405161311b9190613bd7565b600060405180830381855af49150503d8060008114613156576040519150601f19603f3d011682016040523d82523d6000602084013e61315b565b606091505b5091509150611db3828260405180606001604052806027815260200161401260279139613669565b60606000613190866133ef565b915050600061319e866133ef565b91505060006131ac866133ef565b91505060006131ba866133ef565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b60006132ba826020613f21565b6132c5906008613eb9565b60ff166132d385858561275b565b901c949350505050565b60006001600160401b03821115611f785760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016105a2565b6060600061337961337482613366601887901c6001600160601b0316613682565b62ffffff19871691906132ad565b6133ef565b6040517f4e6f6e2d6d696e696d616c2076617220696e742e20476f74203078000000000060208201526dffffffffffffffffffffffffffff19607083901b16603b82015290925060009150604d01612be7565b60008164ffffffffff166133e08460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111561344d57600061340e826008613eb9565b60ff1685901c905061341f816136e3565b61ffff16841793508160ff1660101461343a57601084901b93505b50613446600182613f21565b90506133f5565b50600f5b60ff8160ff1610156134955760ff600882021684901c613470816136e3565b61ffff16831792508160ff1660001461348b57601083901b92505b5060001901613451565b50915091565b600062ffffff1980841614156135045760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b60648201526084016105a2565b61350d83613715565b61356d5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b60648201526084016105a2565b60006135828460181c6001600160601b031690565b6001600160601b0316905060006135a28560781c6001600160601b031690565b6001600160601b0316905060006040519050848111156135c25760206060fd5b8285848460045afa506116fb6135d88760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b6060831561365f578251613658576001600160a01b0385163b6136585760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105a2565b50816110d2565b6110d28383613753565b60608315613678575081611f0c565b611f0c8383613753565b600060ff821115611f785760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b60648201526084016105a2565b60006136f560048360ff16901c61377d565b60ff1661ffff919091161760081b61370c8261377d565b60ff1617919050565b60006137218260d81c90565b64ffffffffff1664ffffffffff141561373c57506000919050565b600061374783612ab5565b60405110199392505050565b8151156137635781518083602001fd5b8060405162461bcd60e51b81526004016105a29190613c81565b600060f08083179060ff821614156137985750603092915050565b8060ff1660f114156137ad5750603192915050565b8060ff1660f214156137c25750603292915050565b8060ff1660f314156137d75750603392915050565b8060ff1660f414156137ec5750603492915050565b8060ff1660f514156138015750603592915050565b8060ff1660f614156138165750603692915050565b8060ff1660f7141561382b5750603792915050565b8060ff1660f814156138405750603892915050565b8060ff1660f914156138555750603992915050565b8060ff1660fa141561386a5750606192915050565b8060ff1660fb141561387f5750606292915050565b8060ff1660fc14156138945750606392915050565b8060ff1660fd14156138a95750606492915050565b8060ff1660fe14156138be5750606592915050565b8060ff1660ff14156138d35750606692915050565b50919050565b60008083601f8401126138ea578182fd5b5081356001600160401b03811115613900578182fd5b60208301915083602082850101111561391857600080fd5b9250929050565b600060208284031215613930578081fd5b8135611f0c81613fb7565b60006020828403121561394c578081fd5b8151611f0c81613fb7565b60008060408385031215613969578081fd5b823561397481613fb7565b915060208301356001600160401b038082111561398f578283fd5b818501915085601f8301126139a2578283fd5b8135818111156139b4576139b4613fa1565b604051601f8201601f19908116603f011681019083821181831017156139dc576139dc613fa1565b816040528281528860208487010111156139f4578586fd5b82602086016020830137856020848301015280955050505050509250929050565b600060208284031215613a26578081fd5b81518015158114611f0c578182fd5b600060208284031215613a46578081fd5b5035919050565b600060208284031215613a5e578081fd5b5051919050565b60008060008060008060008060a0898b031215613a80578384fd5b88356001600160401b0380821115613a96578586fd5b613aa28c838d016138d9565b909a50985060208b0135975060408b0135915080821115613ac1578586fd5b613acd8c838d016138d9565b909750955060608b0135945060808b0135915080821115613aec578384fd5b50613af98b828c016138d9565b999c989b5096995094979396929594505050565b60008060008060008060008060006101208a8c031215613b2b578081fd5b8935985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135613b5981613fb7565b935060c08a0135613b6981613fb7565b925060e08a0135613b7981613fb7565b91506101008a0135613b8a81613fb7565b809150509295985092959850929598565b60008151808452613bb3816020860160208601613f44565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251613be9818460208701613f44565b9190910192915050565b60008351613c05818460208801613f44565b6001600160f81b0319939093169190920190815260010192915050565b848152836020820152608060408201526000613c416080830185613b9b565b905082606083015295945050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b602081526000611f0c6020830184613b9b565b608081526000613ca76080830187613b9b565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526021908201527f43435472616e73666572526f757465723a2061646472657373206973207a65726040820152606f60f81b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008219821115613e0357613e03613f8b565b500190565b60006001600160401b03808316818516808303821115613e2a57613e2a613f8b565b01949350505050565b600060ff821660ff84168060ff03821115613e5057613e50613f8b565b019392505050565b60006001600160601b03808316818516808303821115613e2a57613e2a613f8b565b600082613e9557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613eb457613eb4613f8b565b500290565b600060ff821660ff84168160ff0481118215151615613eda57613eda613f8b565b029392505050565b600082821015613ef457613ef4613f8b565b500390565b60006001600160401b0383811690831681811015613f1957613f19613f8b565b039392505050565b600060ff821660ff841680821015613f3b57613f3b613f8b565b90039392505050565b60005b83811015613f5f578181015183820152602001613f47565b838111156126bf5750506000910152565b6000600019821415613f8457613f84613f8b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b4257600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122014a86c818f57ba5f40d6653c3bd0aeec01fab70b28f9c024d4535355eb1b22d564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address)": {
        "params": {
          "_appId": "Id of ccTransfer dApp",
          "_chainId": "Id of the underlying chain",
          "_coreBTC": "CoreDAO BTC ERC20 token address",
          "_lockers": "Lockers' contract address",
          "_protocolPercentageFee": "Percentage amount of protocol fee (min: %0.01)",
          "_relay": "The Relay address to validate data from source chain",
          "_startingBlockNumber": "Requests that are included in a block older than _startingBlockNumber cannot be executed",
          "_treasury": "Address of treasury that collects protocol fees",
          "_version": "Version of op return payload"
        }
      },
      "isRequestUsed(bytes32)": {
        "details": "This is to avoid re-submitting a used request",
        "params": {
          "_txId": "The txId of request on the source chain"
        },
        "returns": {
          "_0": "True if the request has been executed"
        }
      },
      "lockProof(bytes,uint256,bytes,uint256,bytes)": {
        "details": "Validates the transfer request",
        "params": {
          "_blockNumber": "The block number of the request tx",
          "_index": "Index of tx in the block",
          "_intermediateNodes": "Merkle proof for tx",
          "_lockerLockingScript": "Locking script of locker that user has sent BTC to it",
          "_tx": "Bitcoin tx"
        },
        "returns": {
          "_0": "True if the transfer is successful"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCoreBTC(address)": {
        "details": "Only owner can call this",
        "params": {
          "_coreBTC": "CoreDAO BTC ERC20 token address"
        }
      },
      "setLockers(address)": {
        "details": "Only owner can call this",
        "params": {
          "_lockers": "Address of the lockers contract"
        }
      },
      "setProtocolPercentageFee(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_protocolPercentageFee": "Percentage amount of protocol fee"
        }
      },
      "setRelay(address)": {
        "details": "Only owner can call this",
        "params": {
          "_relay": "Address of the relay contract"
        }
      },
      "setTreasury(address)": {
        "details": "Only owner can call this",
        "params": {
          "_treasury": "Treasury address"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CCTransfer(bytes,uint256,address,address,uint256,uint256,address,uint256,uint256,bytes32)": {
        "notice": "Emits when a cc transfer request gets done"
      },
      "NewCoreBTC(address,address)": {
        "notice": "Emits when changes made to CoreBTC address"
      },
      "NewLockers(address,address)": {
        "notice": "Emits when changes made to Lockers address"
      },
      "NewProtocolPercentageFee(uint256,uint256)": {
        "notice": "Emits when changes made to protocol percentage fee"
      },
      "NewRelay(address,address)": {
        "notice": "Emits when changes made to relay address"
      },
      "NewTreasury(address,address)": {
        "notice": "Emits when changes made to Treasury address"
      }
    },
    "kind": "user",
    "methods": {
      "initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address)": {
        "notice": "Gives default params to initiate cc transfer router"
      },
      "isRequestUsed(bytes32)": {
        "notice": "Check if the request has been executed before"
      },
      "lockProof(bytes,uint256,bytes,uint256,bytes)": {
        "notice": "Executes the cross chain transfer request"
      },
      "setCoreBTC(address)": {
        "notice": "Setter for coreBTC"
      },
      "setLockers(address)": {
        "notice": "Setter for lockers"
      },
      "setProtocolPercentageFee(uint256)": {
        "notice": "Setter for protocol percentage fee"
      },
      "setRelay(address)": {
        "notice": "Setter for relay"
      },
      "setStartingBlockNumber(uint256)": {
        "notice": "Setter for starting block number"
      },
      "setTreasury(address)": {
        "notice": "Setter for treasury"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21494,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "startingBlockNumber",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 21497,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 21500,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "chainId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 21503,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "appId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 21506,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "protocolPercentageFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 21509,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "relay",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 21512,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "lockers",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 21515,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "coreBTC",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 21518,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 21523,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "ccTransferRequests",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(ccTransferRequest)21963_storage)"
      },
      {
        "astId": 633,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "_initialized",
        "offset": 0,
        "slot": "10",
        "type": "t_uint8"
      },
      {
        "astId": 636,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "_initializing",
        "offset": 1,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2171,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "61",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "62",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "111",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "112",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1072,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "_status",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 1130,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "162",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 615,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "211",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 930,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "261",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(ccTransferRequest)21963_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ICcTransferRouterStorage.ccTransferRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(ccTransferRequest)21963_storage"
      },
      "t_struct(ccTransferRequest)21963_storage": {
        "encoding": "inplace",
        "label": "struct ICcTransferRouterStorage.ccTransferRequest",
        "members": [
          {
            "astId": 21956,
            "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
            "label": "inputAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21958,
            "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
            "label": "recipientAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 21960,
            "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
            "label": "fee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21962,
            "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
            "label": "isUsed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}