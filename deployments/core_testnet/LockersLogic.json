{
  "address": "0x8Ac5a1cAa425F5B7b132049fd42834F31917eb54",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netMinted",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lockedToken",
          "type": "address"
        }
      ],
      "name": "ActivateLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burntAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burningTime",
          "type": "uint256"
        }
      ],
      "name": "BurnByLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "BurnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "BurnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addedCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        }
      ],
      "name": "CollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "removedCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "removingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        }
      ],
      "name": "CollateralRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lockedToken",
          "type": "address"
        }
      ],
      "name": "LockerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coreBTCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidateTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        }
      ],
      "name": "LockerLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "unlockedToken",
          "type": "address"
        }
      ],
      "name": "LockerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashedCollateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isForCCBurn",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "slashedCollateralToken",
          "type": "address"
        }
      ],
      "name": "LockerSlashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coreBTCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "slashingToken",
          "type": "address"
        }
      ],
      "name": "LockerSlashedCollateralSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bitcoinTxId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintingTime",
          "type": "uint256"
        }
      ],
      "name": "MintByLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldCCBurnRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCCBurnRouter",
          "type": "address"
        }
      ],
      "name": "NewCCBurnRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldCollaterals",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCollaterals",
          "type": "address"
        }
      ],
      "name": "NewCollaterals",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldCoreBTC",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCoreBTC",
          "type": "address"
        }
      ],
      "name": "NewCoreBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationRatio",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLockerPercentageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLockerPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "NewLockerPercentageFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPriceWithDiscountRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPriceWithDiscountRatio",
          "type": "uint256"
        }
      ],
      "name": "NewPriceWithDiscountRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSlashCompensationRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSlashCompensationRatio",
          "type": "uint256"
        }
      ],
      "name": "NewSlashCompensationRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lockedToken",
          "type": "address"
        }
      ],
      "name": "RequestAddLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "inactivationTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netMinted",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lockedToken",
          "type": "address"
        }
      ],
      "name": "RequestInactivateLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lockedToken",
          "type": "address"
        }
      ],
      "name": "RevokeAddLockerRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HEALTH_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INACTIVATION_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_LOCKER_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN_DECIMAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPPER_HEALTH_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_addingCollateralAmount",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "addLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvedLockers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "buySlashedCollateralOfLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidateLockers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ccBurnRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collaterals",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coreBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "getHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "getLockerCapacity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "getLockerLockingScript",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        }
      ],
      "name": "getLockerTargetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "getMaximumBuyableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "getNeededCoreBTCToBuyCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_initialCandidates",
          "type": "address[]"
        }
      ],
      "name": "initForMultipleCollateralsFeature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coreBTC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockerPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceWithDiscountRatio",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBurner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isCollateralUnused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        }
      ],
      "name": "isLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "isLockerActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "libConstants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "OneHundredPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "HealthFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "UpperHealthFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "MaxLockerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "NativeTokenDecimal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "NativeToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "libParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "coreBTC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ccBurnRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "exchangeConnector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collaterals",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockerPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceWithDiscountRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slashCompensationRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockerInactivationTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockerLeavingAcceptance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockerPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "lockerTargetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockersMapping",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "lockerRescueType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "lockerRescueScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "netMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slashingCoreBTCAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reservedTokenForSlash",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLocker",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCandidate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isScriptHash",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "lockedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inactivationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_txId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseLocker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        }
      ],
      "name": "priceOfOneUnitOfCollateralInBTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceWithDiscountRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_removingCollateralAmount",
          "type": "uint256"
        }
      ],
      "name": "removeCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestActivation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestInactivation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_candidateLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_lockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_lockerRescueType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_lockerRescueScript",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_lockedToken",
          "type": "address"
        }
      ],
      "name": "requestToBecomeLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfRemoveLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ccBurnRouter",
          "type": "address"
        }
      ],
      "name": "setCCBurnRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralRatio",
          "type": "uint256"
        }
      ],
      "name": "setCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collaterals",
          "type": "address"
        }
      ],
      "name": "setCollaterals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coreBTC",
          "type": "address"
        }
      ],
      "name": "setCoreBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationRatio",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockerPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "setLockerPercentageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_priceWithDiscountRatio",
          "type": "uint256"
        }
      ],
      "name": "setPriceWithDiscountRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slashCompensationRatio",
          "type": "uint256"
        }
      ],
      "name": "setSlashCompensationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slashCompensationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "slashIdleLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "slashThiefLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumberOfCandidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumberOfLockers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPauseLocker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc4e2fda4d4f3ba43ef7bb5cbabd35a15c8ddad50876c30825c2c7dec0876b0c9",
  "receipt": {
    "to": null,
    "from": "0xf13F4E007eB5C8e8201AdE0bE1C8946592818F42",
    "contractAddress": "0x8Ac5a1cAa425F5B7b132049fd42834F31917eb54",
    "transactionIndex": 1,
    "gasUsed": "5381427",
    "logsBloom": "0x
    "blockHash": "0x8dab508efe60c83ee01e970c49d951ee9a363c18d70fad6cd7b4f47940bdcc19",
    "transactionHash": "0xc4e2fda4d4f3ba43ef7bb5cbabd35a15c8ddad50876c30825c2c7dec0876b0c9",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 20848836,
        "transactionHash": "0xc4e2fda4d4f3ba43ef7bb5cbabd35a15c8ddad50876c30825c2c7dec0876b0c9",
        "address": "0x8Ac5a1cAa425F5B7b132049fd42834F31917eb54",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 1,
        "blockHash": "0x8dab508efe60c83ee01e970c49d951ee9a363c18d70fad6cd7b4f47940bdcc19"
      }
    ],
    "blockNumber": 20848836,
    "cumulativeGasUsed": "5741627",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0db84abc4b0d4c9a0365c670a39ebcd7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockedToken\",\"type\":\"address\"}],\"name\":\"ActivateLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burningTime\",\"type\":\"uint256\"}],\"name\":\"BurnByLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BurnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BurnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"CollateralRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockedToken\",\"type\":\"address\"}],\"name\":\"LockerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coreBTCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"LockerLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unlockedToken\",\"type\":\"address\"}],\"name\":\"LockerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isForCCBurn\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"slashedCollateralToken\",\"type\":\"address\"}],\"name\":\"LockerSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coreBTCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"slashingToken\",\"type\":\"address\"}],\"name\":\"LockerSlashedCollateralSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bitcoinTxId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintingTime\",\"type\":\"uint256\"}],\"name\":\"MintByLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCCBurnRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCCBurnRouter\",\"type\":\"address\"}],\"name\":\"NewCCBurnRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"NewCollateralRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCollaterals\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCollaterals\",\"type\":\"address\"}],\"name\":\"NewCollaterals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCoreBTC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCoreBTC\",\"type\":\"address\"}],\"name\":\"NewCoreBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationRatio\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLockerPercentageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockerPercentageFee\",\"type\":\"uint256\"}],\"name\":\"NewLockerPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceWithDiscountRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceWithDiscountRatio\",\"type\":\"uint256\"}],\"name\":\"NewPriceWithDiscountRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSlashCompensationRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSlashCompensationRatio\",\"type\":\"uint256\"}],\"name\":\"NewSlashCompensationRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockedToken\",\"type\":\"address\"}],\"name\":\"RequestAddLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"inactivationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockedToken\",\"type\":\"address\"}],\"name\":\"RequestInactivateLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockedToken\",\"type\":\"address\"}],\"name\":\"RevokeAddLockerRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HEALTH_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INACTIVATION_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCKER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN_DECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPPER_HEALTH_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addingCollateralAmount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"addLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedLockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"buySlashedCollateralOfLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidateLockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccBurnRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"getHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"getLockerCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"getLockerLockingScript\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"getLockerTargetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"getMaximumBuyableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"getNeededCoreBTCToBuyCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_initialCandidates\",\"type\":\"address[]\"}],\"name\":\"initForMultipleCollateralsFeature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceWithDiscountRatio\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isCollateralUnused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"isLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"isLockerActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libConstants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"OneHundredPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"HealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UpperHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxLockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NativeTokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NativeToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coreBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collaterals\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWithDiscountRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashCompensationRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockerInactivationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockerLeavingAcceptance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lockerTargetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockersMapping\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"lockerRescueType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"lockerRescueScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashingCoreBTCAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedTokenForSlash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocker\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCandidate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isScriptHash\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"lockedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inactivationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_txId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"}],\"name\":\"priceOfOneUnitOfCollateralInBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceWithDiscountRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_removingCollateralAmount\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestActivation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestInactivation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_candidateLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_lockerRescueType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_lockerRescueScript\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_lockedToken\",\"type\":\"address\"}],\"name\":\"requestToBecomeLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfRemoveLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ccBurnRouter\",\"type\":\"address\"}],\"name\":\"setCCBurnRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"}],\"name\":\"setCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collaterals\",\"type\":\"address\"}],\"name\":\"setCollaterals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreBTC\",\"type\":\"address\"}],\"name\":\"setCoreBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationRatio\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockerPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setLockerPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceWithDiscountRatio\",\"type\":\"uint256\"}],\"name\":\"setPriceWithDiscountRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slashCompensationRatio\",\"type\":\"uint256\"}],\"name\":\"setSlashCompensationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashCompensationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"slashIdleLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"slashThiefLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfCandidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfLockers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPauseLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addBurner(address)\":{\"details\":\"Give an account access to burn.\"},\"addCollateral(address,uint256)\":{\"params\":{\"_addingCollateralAmount\":\"Amount of added collateral\",\"_lockerTargetAddress\":\"Locker's target chain address\"},\"returns\":{\"_0\":\"True if collateral is added successfully\"}},\"addLocker(address)\":{\"details\":\"Only owner can call this                                       When a candidate becomes locker, isCandidate is set to false\",\"params\":{\"_lockerTargetAddress\":\"Locker's target chain address\"},\"returns\":{\"_0\":\"True if candidate is added successfully\"}},\"addMinter(address)\":{\"details\":\"Give an account access to mint.\"},\"burn(bytes,uint256)\":{\"details\":\"Burn coreBTC and also get the locker's fee\",\"params\":{\"_amount\":\"Amount of the coreBTC which is minted, including the locker's fee\",\"_lockerLockingScript\":\"Locking script of a locker\"},\"returns\":{\"_0\":\"uint                  The amount of coreBTC burnt\"}},\"buySlashedCollateralOfLocker(address,uint256)\":{\"details\":\"Users buy the slashed collateral using CoreBTC with discount                                   The paid CoreBTC will be burnt to keep the system safe                                   If all the needed CoreBTC is collected and burnt,                                   the rest of slashed collateral is sent back to locker\",\"params\":{\"_collateralAmount\":\"Amount of collateral that someone intends to buy with discount\",\"_lockerTargetAddress\":\"Locker's target chain address\"},\"returns\":{\"_0\":\"True if buying was successful\"}},\"getHealthFactor(address)\":{\"details\":\"The health factor is equal to current collateral asset value divided by the minimum collateral asset value to trigger liquidation,                                     the minimum collateral asset value to trigger liquidation is equal to the current locked asset value multiplied by the liquidation ratio\",\"params\":{\"_lockerTargetAddress\":\"Address of locker on the target chain\"},\"returns\":{\"_0\":\"The health factor of the locker\"}},\"getLockerCapacity(address)\":{\"details\":\"Net minted amount is total minted minus total burnt for the locker\",\"params\":{\"_lockerTargetAddress\":\"Address of locker on the target chain\"},\"returns\":{\"_0\":\"The net minted of the locker\"}},\"getLockerLockingScript(address)\":{\"params\":{\"_lockerTargetAddress\":\"Address of locker on the target chain\"},\"returns\":{\"_0\":\"Bitcoin public key of locker\"}},\"getMaximumBuyableCollateral(address)\":{\"params\":{\"_lockerTargetAddress\":\"Address of locker on the target chain\"},\"returns\":{\"_0\":\"The maximum buyable collateral amount of the locker\"}},\"getNeededCoreBTCToBuyCollateral(address,uint256)\":{\"params\":{\"_collateralAmount\":\"Amount of collateral that someone intends to buy with discount\",\"_lockerTargetAddress\":\"Address of locker on the target chain\"},\"returns\":{\"_0\":\"The amount of coreBTC\"}},\"initForMultipleCollateralsFeature(address[])\":{\"details\":\"The function can only be called when the logic contract is upgraded to feature `multiple collaterals`                             Only current owner can invoke it through a delegated call\",\"params\":{\"_initialCandidates\":\"The target address list of candidate lockers\"}},\"isBurner(address)\":{\"params\":{\"account\":\"The account which intended to be checked\"},\"returns\":{\"_0\":\"bool\"}},\"isCollateralUnused(address)\":{\"params\":{\"_token\":\"Address of collateral\"},\"returns\":{\"_0\":\"True if collateral is unused\"}},\"isLocker(bytes)\":{\"params\":{\"_lockerLockingScript\":\"Locking script of locker on the target chain\"},\"returns\":{\"_0\":\"True if a locking script is locker\"}},\"isLockerActive(address)\":{\"details\":\"We check a locker status in below cases:                                     1. Minting CoreBTC                                     2. Removing locker's collateral                                     3. Removing locker\",\"params\":{\"_lockerTargetAddress\":\"Address of locker on the target chain\"},\"returns\":{\"_0\":\"True if the locker is active\"}},\"isMinter(address)\":{\"params\":{\"account\":\"The account which intended to be checked\"},\"returns\":{\"_0\":\"bool\"}},\"liquidateLocker(address,uint256)\":{\"details\":\"Anyone can liquidate a locker whose health factor                                   is less than 10000 (100%) by providing a sufficient amount of coreBTC\",\"params\":{\"_collateralAmount\":\"Amount of collateral that someone intends to buy with discount\",\"_lockerTargetAddress\":\"Locker's target chain address\"},\"returns\":{\"_0\":\"True if liquidation was successful\"}},\"mint(bytes,address,bytes32,uint256)\":{\"details\":\"Mint coreBTC for an account and the locker fee as well\",\"params\":{\"_amount\":\"Amount of the coreBTC which is minted, including the locker's fee\",\"_lockerLockingScript\":\"Locking script of a locker\",\"_receiver\":\"Address of the receiver of the minted coreBTCs\",\"_txId\":\"The id of bitcoin transaction\"},\"returns\":{\"_0\":\"uint                  The amount of coreBTC minted for the receiver\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseLocker()\":{\"details\":\"Only owner can pause\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"priceOfOneUnitOfCollateralInBTC(address)\":{\"details\":\"Returns the price of one collateral token (1*10^18) in coreBTC\",\"params\":{\"_collateralToken\":\"The address of collateral token\"},\"returns\":{\"_0\":\"uint The price of one unit of collateral token\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"removeBurner(address)\":{\"details\":\"Remove an account's access to burn.\"},\"removeCollateral(uint256)\":{\"params\":{\"_removingCollateralAmount\":\"Amount of removed collateral\"},\"returns\":{\"_0\":\"True if collateral is removed successfully\"}},\"removeMinter(address)\":{\"details\":\"Remove an account's access to mint.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestActivation()\":{\"details\":\"Activates the locker so users can mint by this locker                        note: inactivationTimestamp == 0 means that the locker is active\",\"returns\":{\"_0\":\"True if activated successfully\"}},\"requestInactivation()\":{\"details\":\"Deactivates the locker so that no one can mint by this locker:                        1. Locker can be removed after inactivation                        2. Locker can withdraw extra collateral after inactivation\",\"returns\":{\"_0\":\"True if deactivated successfully\"}},\"requestToBecomeLocker(bytes,uint256,uint8,bytes,address)\":{\"details\":\"Users mint CoreBTC by sending BTC to locker's locking script                                         In case of liquidation of locker's bond, the burn CoreBTC is sent to                                         locker's rescue script                                         A user should lock enough collateral token to become candidate\",\"params\":{\"_candidateLockingScript\":\"Locking script of the candidate\",\"_lockedAmount\":\"Bond amount of locker\",\"_lockedToken\":\"Address of locked token\",\"_lockerRescueScript\":\"Rescue script of the locker\",\"_lockerRescueType\":\"Type of locker's rescue script (e.g. P2SH)\"},\"returns\":{\"_0\":\"True if candidate is added successfully\"}},\"revokeRequest()\":{\"details\":\"A user who is still a candidate can revoke his/her request\",\"returns\":{\"_0\":\"True if candidate is removed successfully\"}},\"selfRemoveLocker()\":{\"details\":\"Only locker can call this function\",\"returns\":{\"_0\":\"True if locker is removed successfully\"}},\"setCCBurnRouter(address)\":{\"details\":\"Only current owner can call this\",\"params\":{\"_ccBurnRouter\":\"The new cc burn router contract address\"}},\"setCollateralRatio(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_collateralRatio\":\"The new collateral ratio\"}},\"setCollaterals(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_collaterals\":\"The address of collaterals contract\"}},\"setCoreBTC(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_coreBTC\":\"The new wrapped token contract address\"}},\"setLiquidationRatio(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_liquidationRatio\":\"The new liquidation ratio\"}},\"setLockerPercentageFee(uint256)\":{\"details\":\"Only current owner can call this\",\"params\":{\"_lockerPercentageFee\":\"The new locker percentage fee\"}},\"setPriceOracle(address)\":{\"details\":\"Only current owner can call this\",\"params\":{\"_priceOracle\":\"The new price oracle\"}},\"setPriceWithDiscountRatio(uint256)\":{\"details\":\"Only current owner can call this\",\"params\":{\"_priceWithDiscountRatio\":\"The new price with discount ratio\"}},\"setSlashCompensationRatio(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_slashCompensationRatio\":\"The new slash compensation ratio\"}},\"slashIdleLocker(address,uint256,address,uint256,address)\":{\"details\":\"Only cc burn router can call this                                   Locker is slashed since doesn't provide burn proof                                   before a cc burn request deadline.                                   User who made the cc burn request will receive the slashed bond\",\"params\":{\"_amount\":\"Amount of CoreBTC that is slashed from lockers\",\"_lockerTargetAddress\":\"Locker's target chain address\",\"_recipient\":\"Address of user who receives the slashed amount\",\"_rewardAmount\":\"Amount of CoreBTC that slasher receives\",\"_rewardRecipient\":\"Address of slasher who receives reward\"},\"returns\":{\"_0\":\"True if the locker is slashed successfully\"}},\"slashThiefLocker(address,uint256,address,uint256)\":{\"details\":\"Only cc burn router can call this                                   Locker is slashed because he/she moved BTC from                                   locker's Bitcoin address without any corresponding burn req                                   The slashed bond will be sold with discount\",\"params\":{\"_amount\":\"Value of slashed collateral (in CoreBTC)\",\"_lockerTargetAddress\":\"Locker's target chain address\",\"_rewardAmount\":\"Value of slashed reward (in CoreBTC)\",\"_rewardRecipient\":\"Address of slasher who receives reward\"},\"returns\":{\"_0\":\"True if the locker is slashed successfully\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unPauseLocker()\":{\"details\":\"Only owner can pause\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCollateral(address,uint256)\":{\"notice\":\"Increases collateral of the locker\"},\"addLocker(address)\":{\"notice\":\"Approves a candidate request to become locker\"},\"burn(bytes,uint256)\":{\"notice\":\"Burn coreBTC of an account\"},\"buySlashedCollateralOfLocker(address,uint256)\":{\"notice\":\"Sells lockers slashed collateral\"},\"getHealthFactor(address)\":{\"notice\":\"Get health factor of the locker\"},\"getLockerCapacity(address)\":{\"notice\":\"Get how much the locker can mint\"},\"getLockerLockingScript(address)\":{\"notice\":\"Give Bitcoin public key of locker\"},\"getMaximumBuyableCollateral(address)\":{\"notice\":\"Get maximum buyable collateral amount of the locker\"},\"getNeededCoreBTCToBuyCollateral(address,uint256)\":{\"notice\":\"Get how much coreBTC needed for buying the collateral\"},\"initForMultipleCollateralsFeature(address[])\":{\"notice\":\"Init candidate locker list and locker\\u2019s lockedToken\"},\"isBurner(address)\":{\"notice\":\"Check if an account is burner\"},\"isCollateralUnused(address)\":{\"notice\":\"Checks whether a token is used as collateral by locker\"},\"isLocker(bytes)\":{\"notice\":\"Checks whether a locking script is locker\"},\"isLockerActive(address)\":{\"notice\":\"Returns the Locker status\"},\"isMinter(address)\":{\"notice\":\"Check if an account is minter\"},\"liquidateLocker(address,uint256)\":{\"notice\":\"Liquidates the locker whose collateral is unhealthy\"},\"mint(bytes,address,bytes32,uint256)\":{\"notice\":\"Mint coreBTC for an account\"},\"pauseLocker()\":{\"notice\":\"Pause the locker, so only the functions can be called which are whenPaused\"},\"removeCollateral(uint256)\":{\"notice\":\"Decreases collateral of the locker\"},\"requestActivation()\":{\"notice\":\"Requests to activate a locker\"},\"requestInactivation()\":{\"notice\":\"Requests to inactivate a locker\"},\"requestToBecomeLocker(bytes,uint256,uint8,bytes,address)\":{\"notice\":\"Adds user to candidates list\"},\"revokeRequest()\":{\"notice\":\"Removes a candidate from candidates list\"},\"selfRemoveLocker()\":{\"notice\":\"Removes a locker from lockers list\"},\"setCCBurnRouter(address)\":{\"notice\":\"Changes cc burn router contract\"},\"setCollateralRatio(uint256)\":{\"notice\":\"Changes collateral ratio\"},\"setCollaterals(address)\":{\"notice\":\"Changes collaterals contract address\"},\"setCoreBTC(address)\":{\"notice\":\"Changes wrapped token contract address\"},\"setLiquidationRatio(uint256)\":{\"notice\":\"Changes liquidation ratio\"},\"setLockerPercentageFee(uint256)\":{\"notice\":\"Changes percentage fee of locker\"},\"setPriceOracle(address)\":{\"notice\":\"Changes the price oracle\"},\"setPriceWithDiscountRatio(uint256)\":{\"notice\":\"Changes price with discount ratio\"},\"setSlashCompensationRatio(uint256)\":{\"notice\":\"Changes slash compensation ratio\"},\"slashIdleLocker(address,uint256,address,uint256,address)\":{\"notice\":\"Slashes lockers for not executing a cc burn req\"},\"slashThiefLocker(address,uint256,address,uint256)\":{\"notice\":\"Slashes lockers for moving BTC without a good reason\"},\"unPauseLocker()\":{\"notice\":\"Un-pause the locker, so only the functions can be called which are whenNotPaused\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lockers/LockersLogic.sol\":\"LockersLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/common/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x0b17d7a61c5ba6df420a4293c5313d20eacc2a4a866f39321d6b6f206a171c8e\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ICoreBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ICoreBTC is IERC20Upgradeable {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    event Blacklisted(address indexed account);\\n\\n    event UnBlacklisted(address indexed account);\\n\\n    event BlackListerAdded(address indexed newBlackLister);\\n\\n    event BlackListerRemoved(address indexed blackLister);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function ownerBurn(address _user, uint _amount) external returns (bool);\\n\\n    function setMaxMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n\\n    function addBlackLister(address account) external;\\n\\n    function removeBlackLister(address account) external;\\n\\n    function blacklist(address _account) external;\\n\\n    function unBlacklist(address _account) external;\\n}\",\"keccak256\":\"0xca1956a6e189ef824f8227f4621079b312e6204905d1a29b270f7eeb1cd2085f\",\"license\":\"MIT\"},\"contracts/libraries/LockersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../erc20/interfaces/ICoreBTC.sol\\\";\\nimport \\\"../types/DataTypes.sol\\\";\\nimport \\\"../common/types/ScriptTypesEnum.sol\\\";\\nimport \\\"../lockers/interfaces/ICollaterals.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary LockersLib {\\n\\n    using SafeERC20 for IERC20;\\n\\n    function requestToBecomeLockerValidation(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        address theLockerTargetAddress,\\n        uint _lockedAmount,\\n        address _lockedToken\\n    ) external {\\n\\n        require(\\n            !lockersMapping[msg.sender].isCandidate,\\n            \\\"Lockers: is candidate\\\"\\n        );\\n\\n        require(\\n            !lockersMapping[msg.sender].isLocker,\\n            \\\"Lockers: is locker\\\"\\n        );\\n\\n        ICollaterals(libParams.collaterals).checkLockedAmount(\\n            _lockedToken,\\n            _lockedAmount\\n        );\\n\\n        if (_lockedToken == libConstants.NativeToken) {\\n            require(\\n                msg.value == _lockedAmount,\\n                \\\"Lockers: incorrect CORE amount\\\"\\n            );\\n        }\\n\\n        require(\\n            theLockerTargetAddress == address(0),\\n            \\\"Lockers: used locking script\\\"\\n        );\\n\\n        // Transfer erc20 token to lockers if collateral is not CORE\\n        if (_lockedToken != libConstants.NativeToken) {\\n            IERC20(_lockedToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _lockedAmount\\n            );\\n        }\\n    }\\n\\n    function requestToBecomeLocker(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        bytes calldata _candidateLockingScript,\\n        uint _lockedAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript,\\n        address _lockedToken\\n    ) external {\\n\\n        DataTypes.locker memory locker_;\\n        locker_.lockerLockingScript = _candidateLockingScript;\\n        locker_.lockedAmount = _lockedAmount;\\n        locker_.isCandidate = true;\\n        locker_.lockerRescueType = _lockerRescueType;\\n        locker_.lockerRescueScript = _lockerRescueScript;\\n        locker_.lockedToken = _lockedToken;\\n\\n        lockersMapping[msg.sender] = locker_;\\n\\n    }\\n\\n    function buySlashedCollateralOfLocker(\\n        DataTypes.locker storage theLocker,\\n        uint _collateralAmount\\n    ) external returns (uint neededCoreBTC) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        require(\\n            _collateralAmount <= theLocker.reservedTokenForSlash,\\n            \\\"Lockers: not enough slashed collateral to buy\\\"\\n        );\\n\\n        neededCoreBTC = theLocker.slashingCoreBTCAmount * _collateralAmount / theLocker.reservedTokenForSlash;\\n\\n        if (neededCoreBTC < theLocker.slashingCoreBTCAmount) {\\n            // to avoid precision loss (so buyer cannot profit of it)\\n            neededCoreBTC = neededCoreBTC + 1;\\n        }\\n\\n        // Updates locker's slashing info\\n        theLocker.slashingCoreBTCAmount -= neededCoreBTC;\\n\\n        theLocker.reservedTokenForSlash -= _collateralAmount;\\n\\n    }\\n\\n    function liquidateLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _collateralAmount\\n    ) external view returns (uint neededCoreBTC) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libParams,\\n            theLocker.lockedToken\\n        );\\n\\n        // Checks that the collateral has become unhealthy\\n        require(\\n            calculateHealthFactor(\\n                theLocker,\\n                libParams,\\n                priceOfCollateral\\n            ) < libConstants.HealthFactor,\\n            \\\"Lockers: is healthy\\\"\\n        );\\n\\n        uint _maxBuyableCollateral = maximumBuyableCollateral(\\n            theLocker,\\n            libConstants,\\n            libParams,\\n            priceOfCollateral\\n        );\\n\\n        if (_maxBuyableCollateral > theLocker.lockedAmount) {\\n            _maxBuyableCollateral = theLocker.lockedAmount;\\n        }\\n\\n        require(\\n            _collateralAmount <= _maxBuyableCollateral,\\n            \\\"Lockers: not enough collateral to buy\\\"\\n        );\\n\\n        // Needed amount of CoreBTC to buy collateralAmount\\n        neededCoreBTC = neededCoreBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            theLocker.lockedToken,\\n            _collateralAmount,\\n            priceOfCollateral\\n        );\\n\\n        neededCoreBTC = neededCoreBTC + 1; // to prevent precision loss\\n\\n    }\\n\\n    function slashThiefLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _rewardAmount,\\n        uint _amount\\n    ) external returns (uint rewardInCollateral, uint neededTokenForSlash) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        uint equivalentCollateral = IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            _amount, // Total amount of CoreBTC that is slashed\\n            ICoreBTC(libParams.coreBTC).decimals(), // Decimal of coreBTC\\n            ICollaterals(libParams.collaterals).getDecimals(theLocker.lockedToken), // Decimal of Collateral\\n            libParams.coreBTC, // Input token\\n            theLocker.lockedToken // Output token\\n        );\\n\\n        rewardInCollateral = equivalentCollateral*_rewardAmount/_amount;\\n        neededTokenForSlash = equivalentCollateral*libParams.liquidationRatio/libConstants.OneHundredPercent;\\n\\n        if ((rewardInCollateral + neededTokenForSlash) > theLocker.lockedAmount) {\\n            // Divides total locker's collateral proportional to reward amount and slash amount\\n            rewardInCollateral = rewardInCollateral*theLocker.lockedAmount/\\n                (rewardInCollateral + neededTokenForSlash);\\n            neededTokenForSlash = theLocker.lockedAmount - rewardInCollateral;\\n        }\\n\\n        // Updates locker's bond\\n        theLocker.lockedAmount -= (rewardInCollateral + neededTokenForSlash);\\n\\n        if (_amount > theLocker.netMinted) {\\n            _amount = theLocker.netMinted;\\n        }\\n\\n        theLocker.netMinted -= _amount;\\n\\n        theLocker.slashingCoreBTCAmount += _amount;\\n\\n        theLocker.reservedTokenForSlash += neededTokenForSlash;\\n    }\\n\\n    function slashIdleLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _rewardAmount,\\n        uint _amount\\n    ) external returns (uint equivalentCollateral) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        equivalentCollateral = IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            _rewardAmount + _amount, // Total amount of CoreBTC that is slashed\\n            ICoreBTC(libParams.coreBTC).decimals(), // Decimal of coreBTC\\n            ICollaterals(libParams.collaterals).getDecimals(theLocker.lockedToken), // Decimal of Collateral\\n            libParams.coreBTC, // Input token\\n            theLocker.lockedToken // Output token\\n        );\\n\\n        if (equivalentCollateral > theLocker.lockedAmount) {\\n            equivalentCollateral = theLocker.lockedAmount;\\n        }\\n\\n        // Updates locker's bond\\n        theLocker.lockedAmount -= equivalentCollateral;\\n    }\\n\\n    function maximumBuyableCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral\\n    ) public view returns (uint) {\\n\\n        // maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio/10000 - nativeTokenLockedAmount*nativeTokenPrice)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice)\\n        //  => maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio * 10^18  - nativeTokenLockedAmount*nativeTokenPrice * 10^8)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice * 10^8)\\n\\n        uint coreBTCDecimal = ERC20(libParams.coreBTC).decimals();\\n        uint collateralDecimals = ICollaterals(libParams.collaterals).getDecimals(theLocker.lockedToken);\\n        require(\\n            libConstants.UpperHealthFactor * theLocker.netMinted * libParams.liquidationRatio * (10 ** collateralDecimals) >= theLocker.lockedAmount * _priceOfOneUnitOfCollateral * (10 ** coreBTCDecimal),\\n            \\\"Lockers: invalid antecedent\\\"\\n        );\\n        require(\\n            (libConstants.UpperHealthFactor * libParams.liquidationRatio * _priceOfOneUnitOfCollateral * libParams.priceWithDiscountRatio)/libConstants.OneHundredPercent > _priceOfOneUnitOfCollateral * (10 ** coreBTCDecimal),\\n            \\\"Lockers: invalid consequent\\\"\\n        );\\n\\n        uint antecedent = (libConstants.UpperHealthFactor * theLocker.netMinted * libParams.liquidationRatio * (10 ** collateralDecimals)) -\\n        (theLocker.lockedAmount * _priceOfOneUnitOfCollateral * (10 ** coreBTCDecimal));\\n\\n        uint consequent = ((libConstants.UpperHealthFactor * libParams.liquidationRatio * _priceOfOneUnitOfCollateral * libParams.priceWithDiscountRatio)/libConstants.OneHundredPercent) -\\n        (_priceOfOneUnitOfCollateral * (10 ** coreBTCDecimal));\\n\\n        return antecedent/consequent;\\n    }\\n\\n    function calculateHealthFactor(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral\\n    ) public view returns (uint) {\\n\\n        require(\\n            theLocker.netMinted > 0 && libParams.liquidationRatio > 0,\\n            \\\"Lockers: netMinted or liquidationRatio is zero\\\"\\n        );\\n\\n        return (_priceOfOneUnitOfCollateral * theLocker.lockedAmount *\\n            (10 ** (1 + ERC20(libParams.coreBTC).decimals())))/\\n                (theLocker.netMinted * libParams.liquidationRatio *\\n                    (10 ** (1 + ICollaterals(libParams.collaterals).getDecimals(theLocker.lockedToken))));\\n    }\\n\\n    function neededCoreBTCToBuyCollateral(\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        address _collateralToken,\\n        uint _collateralAmount,\\n        uint _priceOfCollateral\\n    ) public view returns (uint) {\\n        return (_collateralAmount * _priceOfCollateral * libParams.priceWithDiscountRatio)/\\n            (libConstants.OneHundredPercent*(10 ** ICollaterals(libParams.collaterals).getDecimals(_collateralToken)));\\n    }\\n\\n    function addToCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        uint _addingCollateralAmount\\n    ) external {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        // Transfer erc20 token to lockers if collateral is not CORE\\n        if (theLocker.lockedToken != libConstants.NativeToken) {\\n            IERC20(theLocker.lockedToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _addingCollateralAmount\\n            );\\n        }\\n\\n        theLocker.lockedAmount += _addingCollateralAmount;\\n    }\\n\\n    function removeFromCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _removingCollateralAmount\\n    ) external {\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        require(\\n            !isLockerActive(theLocker),\\n            \\\"Lockers: still active\\\"\\n        );\\n\\n        uint _priceOfOneUnitOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libParams,\\n            theLocker.lockedToken\\n        );\\n\\n        uint collateralDecimals = ICollaterals(libParams.collaterals).getDecimals(theLocker.lockedToken);\\n\\n        // Capacity of locker = (locker's collateral value in CoreBTC) * (collateral ratio) - (minted CoreBTC)\\n        uint lockerCapacity = (theLocker.lockedAmount * _priceOfOneUnitOfCollateral *\\n            libConstants.OneHundredPercent)/\\n                (libParams.collateralRatio * (10 ** collateralDecimals)) - theLocker.netMinted;\\n\\n        uint maxRemovableCollateral = (lockerCapacity * (10 ** collateralDecimals))/_priceOfOneUnitOfCollateral;\\n\\n        require(\\n            _removingCollateralAmount <= maxRemovableCollateral,\\n            \\\"Lockers: more than max removable collateral\\\"\\n        );\\n\\n        require(\\n            theLocker.lockedAmount - _removingCollateralAmount >= ICollaterals(libParams.collaterals).getMinLockedAmount(theLocker.lockedToken),\\n            \\\"Lockers: less than min collateral\\\"\\n        );\\n\\n        theLocker.lockedAmount -= _removingCollateralAmount;\\n    }\\n\\n    function priceOfOneUnitOfCollateralInBTC(\\n        DataTypes.lockersLibParam memory libParams,\\n        address _collateralToken\\n    ) public view returns (uint) {\\n        uint collateralDecimals = ICollaterals(libParams.collaterals).getDecimals(_collateralToken);\\n\\n        return IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            (10**collateralDecimals), // 1 Collateral is 10^collateralDecimals\\n            collateralDecimals,\\n            ICoreBTC(libParams.coreBTC).decimals(),\\n            _collateralToken,\\n            libParams.coreBTC\\n        );\\n    }\\n\\n    function lockerCollateralInCoreBTC(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibParam memory libParams\\n    ) public view returns (uint) {\\n\\n        return IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            theLocker.lockedAmount,\\n            ICollaterals(libParams.collaterals).getDecimals(theLocker.lockedToken),\\n            ICoreBTC(libParams.coreBTC).decimals(),\\n            theLocker.lockedToken,\\n            libParams.coreBTC\\n        );\\n    }\\n\\n    function getLockerCapacity(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams\\n    ) external view returns (uint) {\\n        uint _lockerCollateralInCoreBTC = lockerCollateralInCoreBTC(\\n            theLocker,\\n            libParams\\n        )*libConstants.OneHundredPercent/libParams.collateralRatio;\\n\\n        if (_lockerCollateralInCoreBTC > theLocker.netMinted) {\\n            return _lockerCollateralInCoreBTC - theLocker.netMinted;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getHealthFactor(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibParam memory libParams\\n    ) external view returns(uint){\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        // calculate collateral value measured in BTC\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libParams,\\n            theLocker.lockedToken\\n        );\\n\\n        require(\\n            priceOfCollateral > 0,\\n            \\\"Lockers: invalid price\\\"\\n        );\\n\\n        return calculateHealthFactor(\\n            theLocker,\\n            libParams,\\n            priceOfCollateral\\n        );\\n    }\\n\\n    function getMaximumBuyableCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams\\n    ) external view returns (uint) {\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libParams,\\n            theLocker.lockedToken\\n        );\\n\\n        uint _maxBuyableCollateral = maximumBuyableCollateral(\\n            theLocker,\\n            libConstants,\\n            libParams,\\n            priceOfCollateral\\n        );\\n\\n        return Math.min(_maxBuyableCollateral, theLocker.lockedAmount);\\n    }\\n\\n    function getNeededCoreBTCToBuyCollateral(\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _collateralAmount,\\n        address _collateralToken\\n    ) external view returns(uint) {\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libParams,\\n            _collateralToken\\n        );\\n\\n        return neededCoreBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            _collateralToken,\\n            _collateralAmount,\\n            priceOfCollateral\\n        );\\n    }\\n\\n    function isLockerActive(\\n        DataTypes.locker memory theLocker\\n    ) public view returns (bool) {\\n        return theLocker.isLocker && (theLocker.inactivationTimestamp == 0 || theLocker.inactivationTimestamp > block.timestamp);\\n    }\\n\\n    function revokeRequest(\\n         mapping(address => DataTypes.locker) storage lockersMapping,\\n         address[] storage candidateLockers,\\n         address _lockerTargetAddress\\n    ) external returns (DataTypes.locker memory lockerRequest){\\n        require(\\n            lockersMapping[_lockerTargetAddress].isCandidate,\\n            \\\"Lockers: no req\\\"\\n        );\\n\\n        // Loads locker's information\\n        lockerRequest = lockersMapping[_lockerTargetAddress];\\n\\n        // Removes candidate from lockersMapping\\n        delete lockersMapping[_lockerTargetAddress];\\n        _removeLockerFromList(candidateLockers, _lockerTargetAddress);\\n    }\\n\\n    function isCollateralUnused(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        address[] storage targetAddressList,\\n        address _token\\n    ) external view returns (bool) {\\n        uint len = targetAddressList.length;\\n\\n        for(uint i = 0; i < len; i++) {\\n            DataTypes.locker memory theLocker = lockersMapping[targetAddressList[i]];\\n            if (theLocker.lockedToken == _token) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function removeLocker(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        mapping(bytes => address) storage lockerTargetAddress,\\n        address[] storage targetAddressList,\\n        address _lockerTargetAddress\\n    ) external returns (DataTypes.locker memory removingLocker){\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        require(\\n            !isLockerActive(lockersMapping[_lockerTargetAddress]),\\n            \\\"Lockers: still active\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].netMinted == 0,\\n            \\\"Lockers: 0 net minted\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].slashingCoreBTCAmount == 0,\\n            \\\"Lockers: 0 slashing COREBTC\\\"\\n        );\\n\\n        removingLocker = lockersMapping[_lockerTargetAddress];\\n\\n        // Removes locker from lockerTargetAddress and lockersMapping\\n        delete lockerTargetAddress[lockersMapping[_lockerTargetAddress].lockerLockingScript];\\n        delete lockersMapping[_lockerTargetAddress];\\n\\n        _removeLockerFromList(targetAddressList, _lockerTargetAddress);\\n    }\\n\\n    function moveLocker(\\n        address[] storage fromList,\\n        address[] storage toList,\\n        address _lockerTargetAddress\\n    ) external {\\n        _removeLockerFromList(fromList, _lockerTargetAddress);\\n        toList.push(_lockerTargetAddress);\\n    }\\n\\n    function _removeLockerFromList(\\n        address[] storage targetAddressList,\\n        address _lockerTargetAddress\\n    ) private {\\n        // Find the index of the target address in the list\\n        uint len = targetAddressList.length;\\n        uint i = 0;\\n        for (; i < len; i++) {\\n            if (targetAddressList[i] == _lockerTargetAddress) {\\n                break;\\n            }\\n        }\\n\\n        // Exit if the target address cannot be found\\n        if (i == len) return;\\n\\n        // If the target address is not at the end of the list,\\n        // replace it with the last element of the list,\\n        // then the last element of the list will become invalid\\n        if (i < len - 1) {\\n            targetAddressList[i] = targetAddressList[len-1];\\n        }\\n\\n        // Remove the invalid element from the end of the list\\n        targetAddressList.pop();\\n    }\\n\\n    // *************** Handling data compatibility after contract upgrade ***************\\n\\n    function initForMultipleCollateralsFeature(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        mapping(address => uint) storage lockerInactivationTimestamp,\\n        address[] storage candidateLockers,\\n        address[] storage approvedLockers,\\n        address[] memory _initialCandidates,\\n        uint _totalNumberOfCandidates\\n    ) external {\\n        // Initialize the `candidateLockers` list\\n        _initCandidateLockers(lockersMapping, candidateLockers, _initialCandidates, _totalNumberOfCandidates);\\n\\n        // Initialize the `lockedToken` and `inactivationTimestamp` fields of all lockers in the `candidateLockers` list\\n        _initLockerUnknownFields(lockersMapping, lockerInactivationTimestamp, candidateLockers);\\n\\n        // Initialize the `lockedToken` and `inactivationTimestamp` fields of all lockers in the `approvedLockers` list\\n        _initLockerUnknownFields(lockersMapping, lockerInactivationTimestamp, approvedLockers);\\n    }\\n\\n    function _initCandidateLockers(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        address[] storage candidateLockers,\\n        address[] memory _initialCandidates,\\n        uint _totalNumberOfCandidates\\n    ) private {\\n        require(\\n            candidateLockers.length == 0,\\n            \\\"Lockers: candidate lockers is already inited\\\"\\n        );\\n\\n        require(\\n            _initialCandidates.length == _totalNumberOfCandidates,\\n            \\\"Lockers: target address list is invalid\\\"\\n        );\\n\\n        for (uint i = 0; i < _totalNumberOfCandidates; i++) {\\n            address targetAddress = _initialCandidates[i];\\n\\n            require(\\n                lockersMapping[targetAddress].isCandidate,\\n                \\\"Lockers: is not candidate\\\"\\n            );\\n\\n            // Detect duplicate candidate addresses\\n            for (uint j = 0; j < candidateLockers.length; j++) {\\n                require(\\n                    targetAddress != candidateLockers[j],\\n                    \\\"Lockers: duplicate target address\\\"\\n                );\\n            }\\n\\n            candidateLockers.push(targetAddress);\\n        }\\n    }\\n\\n    function _initLockerUnknownFields(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        mapping(address => uint) storage lockerInactivationTimestamp,\\n        address[] storage targetAddressList\\n    ) private {\\n        for (uint i = 0; i < targetAddressList.length; i++) {\\n            DataTypes.locker storage theLocker = lockersMapping[targetAddressList[i]];\\n\\n            // Init locked token\\n            if (theLocker.lockedAmount > 0 && theLocker.lockedToken == address(0)) {\\n                theLocker.lockedToken = address(1);\\n            }\\n\\n            // Init inactivation timestamp\\n            if (theLocker.isLocker && theLocker.inactivationTimestamp == 0 &&\\n                lockerInactivationTimestamp[targetAddressList[i]] > 0) {\\n                theLocker.inactivationTimestamp = lockerInactivationTimestamp[targetAddressList[i]];\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x461b5d14f1e7a4418d5ab044ca51b38065e0f4cf29e05d3edf8a86176e66163a\",\"license\":\"MIT\"},\"contracts/lockers/LockersLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/ILockers.sol\\\";\\nimport \\\"./LockersStorageStructure.sol\\\";\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../erc20/interfaces/ICoreBTC.sol\\\";\\nimport \\\"../routers/interfaces/IBurnRouter.sol\\\";\\nimport \\\"../libraries/LockersLib.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract LockersLogic is LockersStorageStructure, ILockers,\\n    Ownable2StepUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable, UUPSUpgradeable {\\n\\n    // Public variables\\n    address[] public override candidateLockers;\\n\\n    using LockersLib for *;\\n    using SafeERC20 for IERC20;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _coreBTC,\\n        address _priceOracle,\\n        uint _collateralRatio,\\n        uint _liquidationRatio,\\n        uint _lockerPercentageFee,\\n        uint _priceWithDiscountRatio\\n    ) public initializer {\\n\\n        Ownable2StepUpgradeable.__Ownable2Step_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        PausableUpgradeable.__Pausable_init();\\n        UUPSUpgradeable.__UUPSUpgradeable_init();\\n\\n        _setCoreBTC(_coreBTC);\\n        _setPriceOracle(_priceOracle);\\n        _setCollateralRatio(_collateralRatio);\\n        _setLiquidationRatio(_liquidationRatio);\\n        _setLockerPercentageFee(_lockerPercentageFee);\\n        _setPriceWithDiscountRatio(_priceWithDiscountRatio);\\n\\n        libConstants.OneHundredPercent = ONE_HUNDRED_PERCENT;\\n        libConstants.HealthFactor = HEALTH_FACTOR;\\n        libConstants.UpperHealthFactor = UPPER_HEALTH_FACTOR;\\n        libConstants.MaxLockerFee = MAX_LOCKER_FEE;\\n        libConstants.NativeTokenDecimal = NATIVE_TOKEN_DECIMAL;\\n        libConstants.NativeToken = NATIVE_TOKEN;\\n    }\\n\\n    // *************** Modifiers ***************\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Lockers: address is zero\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"Lockers: value is zero\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"Lockers: only minters can mint\\\");\\n        _;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n    // *************** External functions ***************\\n\\n    /**\\n     * @dev Give an account access to mint.\\n     */\\n    function addMinter(address _account) external override onlyOwner {\\n        require(!isMinter(_account), \\\"Lockers: account already has role\\\");\\n        minters[_account] = true;\\n        emit MinterAdded(_account);\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to mint.\\n     */\\n    function removeMinter(address _account) external override onlyOwner {\\n        require(isMinter(_account), \\\"Lockers: account does not have role\\\");\\n        minters[_account] = false;\\n        emit MinterRemoved(_account);\\n    }\\n\\n    modifier onlyBurner() {\\n        require(isBurner(_msgSender()), \\\"Lockers: only burners can burn\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Give an account access to burn.\\n     */\\n    function addBurner(address _account) external override onlyOwner {\\n        require(!isBurner(_account), \\\"Lockers: account already has role\\\");\\n        burners[_account] = true;\\n        emit BurnerAdded(_account);\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to burn.\\n     */\\n    function removeBurner(address _account) external override onlyOwner {\\n        require(isBurner(_account), \\\"Lockers: account does not have role\\\");\\n        burners[_account] = false;\\n        emit BurnerRemoved(_account);\\n    }\\n\\n    /// @notice                 Pause the locker, so only the functions can be called which are whenPaused\\n    /// @dev                    Only owner can pause\\n    function pauseLocker() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice                 Un-pause the locker, so only the functions can be called which are whenNotPaused\\n    /// @dev                    Only owner can pause\\n    function unPauseLocker() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    function getLockerTargetAddress(bytes calldata  _lockerLockingScript) external view override returns (address) {\\n        return lockerTargetAddress[_lockerLockingScript];\\n    }\\n\\n    /// @notice                           Checks whether a locking script is locker\\n    /// @param _lockerLockingScript       Locking script of locker on the target chain\\n    /// @return                           True if a locking script is locker\\n    function isLocker(bytes calldata _lockerLockingScript) external override view returns(bool) {\\n        return lockersMapping[lockerTargetAddress[_lockerLockingScript]].isLocker;\\n    }\\n\\n    /// @notice                             Give Bitcoin public key of locker\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             Bitcoin public key of locker\\n    function getLockerLockingScript(\\n        address _lockerTargetAddress\\n    ) external override view nonZeroAddress(_lockerTargetAddress) returns (bytes memory) {\\n        return lockersMapping[_lockerTargetAddress].lockerLockingScript;\\n    }\\n\\n    /// @notice                       Changes percentage fee of locker\\n    /// @dev                          Only current owner can call this\\n    /// @param _lockerPercentageFee   The new locker percentage fee\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external override onlyOwner {\\n        _setLockerPercentageFee(_lockerPercentageFee);\\n    }\\n\\n    /// @notice                          Changes price with discount ratio\\n    /// @dev                             Only current owner can call this\\n    /// @param _priceWithDiscountRatio   The new price with discount ratio\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external override onlyOwner {\\n        _setPriceWithDiscountRatio(_priceWithDiscountRatio);\\n    }\\n\\n    /// @notice                 Changes the price oracle\\n    /// @dev                    Only current owner can call this\\n    /// @param _priceOracle     The new price oracle\\n    function setPriceOracle(address _priceOracle) external override onlyOwner {\\n        _setPriceOracle(_priceOracle);\\n    }\\n\\n    /// @notice                Changes cc burn router contract\\n    /// @dev                   Only current owner can call this\\n    /// @param _ccBurnRouter   The new cc burn router contract address\\n    function setCCBurnRouter(address _ccBurnRouter) external override onlyOwner {\\n        _setCCBurnRouter(_ccBurnRouter);\\n    }\\n\\n    /// @notice                 Changes wrapped token contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _coreBTC         The new wrapped token contract address\\n    function setCoreBTC(address _coreBTC) external override onlyOwner {\\n        _setCoreBTC(_coreBTC);\\n    }\\n\\n    /// @notice                     Changes collateral ratio\\n    /// @dev                        Only owner can call this\\n    /// @param _collateralRatio     The new collateral ratio\\n    function setCollateralRatio(uint _collateralRatio) external override onlyOwner {\\n        _setCollateralRatio(_collateralRatio);\\n    }\\n\\n    /// @notice                     Changes liquidation ratio\\n    /// @dev                        Only owner can call this\\n    /// @param _liquidationRatio    The new liquidation ratio\\n    function setLiquidationRatio(uint _liquidationRatio) external override onlyOwner {\\n        _setLiquidationRatio(_liquidationRatio);\\n    }\\n\\n    /// @notice                         Changes slash compensation ratio\\n    /// @dev                            Only owner can call this\\n    /// @param _slashCompensationRatio  The new slash compensation ratio\\n    function setSlashCompensationRatio(uint _slashCompensationRatio) external override onlyOwner {\\n        _setSlashCompensationRatio(_slashCompensationRatio);\\n    }\\n\\n    /// @notice                     Changes collaterals contract address\\n    /// @dev                        Only owner can call this\\n    /// @param _collaterals         The address of collaterals contract\\n    function setCollaterals(address _collaterals) external override onlyOwner {\\n        _setCollaterals(_collaterals);\\n    }\\n\\n    /// @notice                                 Adds user to candidates list\\n    /// @dev                                    Users mint CoreBTC by sending BTC to locker's locking script\\n    ///                                         In case of liquidation of locker's bond, the burn CoreBTC is sent to\\n    ///                                         locker's rescue script\\n    ///                                         A user should lock enough collateral token to become candidate\\n    /// @param _candidateLockingScript          Locking script of the candidate\\n    /// @param _lockedAmount                    Bond amount of locker\\n    /// @param _lockerRescueType                Type of locker's rescue script (e.g. P2SH)\\n    /// @param _lockerRescueScript              Rescue script of the locker\\n    /// @param _lockedToken                     Address of locked token\\n    /// @return                                 True if candidate is added successfully\\n    function requestToBecomeLocker(\\n        bytes calldata _candidateLockingScript,\\n        uint _lockedAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript,\\n        address _lockedToken\\n    ) external override payable nonReentrant returns (bool) {\\n\\n        LockersLib.requestToBecomeLockerValidation(\\n                lockersMapping,\\n                libConstants,\\n                libParams,\\n                lockerTargetAddress[_candidateLockingScript],\\n                _lockedAmount,\\n                _lockedToken\\n            );\\n\\n        // Updates candidateLockers\\n        candidateLockers.push(_msgSender());\\n        totalNumberOfCandidates = totalNumberOfCandidates + 1;\\n\\n        LockersLib.requestToBecomeLocker(\\n                lockersMapping,\\n                _candidateLockingScript,\\n                _lockedAmount,\\n                _lockerRescueType,\\n                _lockerRescueScript,\\n                _lockedToken\\n            );\\n\\n        emit RequestAddLocker(\\n            _msgSender(),\\n            _candidateLockingScript,\\n            _lockedAmount,\\n            _lockedToken\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                       Removes a candidate from candidates list\\n    /// @dev                          A user who is still a candidate can revoke his/her request\\n    /// @return                       True if candidate is removed successfully\\n    function revokeRequest() external override nonReentrant returns (bool) {\\n\\n        DataTypes.locker memory lockerRequest = LockersLib.revokeRequest(\\n            lockersMapping,\\n            candidateLockers,\\n            _msgSender()\\n        );\\n\\n        totalNumberOfCandidates = totalNumberOfCandidates -1;\\n\\n        // Sends back collateral\\n        _sendCollateralToRecipient(\\n            _msgSender(),\\n            lockerRequest.lockedToken,\\n            lockerRequest.lockedAmount\\n        );\\n\\n        emit RevokeAddLockerRequest(\\n            _msgSender(),\\n            lockerRequest.lockerLockingScript,\\n            lockerRequest.lockedAmount,\\n            lockerRequest.lockedToken\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                               Approves a candidate request to become locker\\n    /// @dev                                  Only owner can call this\\n    ///                                       When a candidate becomes locker, isCandidate is set to false\\n    /// @param _lockerTargetAddress           Locker's target chain address\\n    /// @return                               True if candidate is added successfully\\n    function addLocker(\\n        address _lockerTargetAddress\\n    ) external override nonReentrant onlyOwner nonZeroAddress(_lockerTargetAddress) returns (bool) {\\n        DataTypes.locker storage theLocker = lockersMapping[_lockerTargetAddress];\\n\\n        require(\\n            theLocker.isCandidate,\\n            \\\"Lockers: no request\\\"\\n        );\\n\\n        require(\\n            lockerTargetAddress[theLocker.lockerLockingScript] == address(0),\\n            \\\"Lockers: used locking script\\\"\\n        );\\n\\n        // Updates locker's status\\n        theLocker.isCandidate = false;\\n        theLocker.isLocker = true;\\n\\n        // Updates number of candidates and lockers\\n        totalNumberOfCandidates = totalNumberOfCandidates - 1;\\n        totalNumberOfLockers = totalNumberOfLockers + 1;\\n\\n        // Updates lockerTargetAddress mapping\\n        lockerTargetAddress[theLocker.lockerLockingScript] = _lockerTargetAddress;\\n\\n        // Moves locker from candidateLockers to approvedLockers\\n        LockersLib.moveLocker(candidateLockers, approvedLockers, _lockerTargetAddress);\\n\\n        emit LockerAdded(\\n            _lockerTargetAddress,\\n            theLocker.lockerLockingScript,\\n            theLocker.lockedAmount,\\n            block.timestamp,\\n            theLocker.lockedToken\\n        );\\n        return true;\\n    }\\n\\n    /// @notice                Requests to inactivate a locker\\n    /// @dev                   Deactivates the locker so that no one can mint by this locker:\\n    ///                        1. Locker can be removed after inactivation\\n    ///                        2. Locker can withdraw extra collateral after inactivation\\n    /// @return                True if deactivated successfully\\n    function requestInactivation() external override nonReentrant returns (bool) {\\n        require(\\n            lockersMapping[_msgSender()].isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_msgSender()].inactivationTimestamp == 0,\\n            \\\"Lockers: locker has already requested\\\"\\n        );\\n\\n        lockersMapping[_msgSender()].inactivationTimestamp = block.timestamp + 60;\\n\\n        emit RequestInactivateLocker(\\n            _msgSender(),\\n            lockersMapping[_msgSender()].inactivationTimestamp,\\n            lockersMapping[_msgSender()].lockerLockingScript,\\n            lockersMapping[_msgSender()].lockedAmount,\\n            lockersMapping[_msgSender()].netMinted,\\n            lockersMapping[_msgSender()].lockedToken\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                Requests to activate a locker\\n    /// @dev                   Activates the locker so users can mint by this locker\\n    ///                        note: inactivationTimestamp == 0 means that the locker is active\\n    /// @return                True if activated successfully\\n    function requestActivation() external override nonReentrant returns (bool) {\\n        require(\\n            lockersMapping[_msgSender()].isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        lockersMapping[_msgSender()].inactivationTimestamp = 0;\\n\\n        emit ActivateLocker(\\n            _msgSender(),\\n            lockersMapping[_msgSender()].lockerLockingScript,\\n            lockersMapping[_msgSender()].lockedAmount,\\n            lockersMapping[_msgSender()].netMinted,\\n            lockersMapping[_msgSender()].lockedToken\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                       Removes a locker from lockers list\\n    /// @dev                          Only locker can call this function\\n    /// @return                       True if locker is removed successfully\\n    function selfRemoveLocker() external override nonReentrant returns (bool) {\\n        _removeLocker(_msgSender());\\n        return true;\\n    }\\n\\n    /// @notice                           Slashes lockers for not executing a cc burn req\\n    /// @dev                              Only cc burn router can call this\\n    ///                                   Locker is slashed since doesn't provide burn proof\\n    ///                                   before a cc burn request deadline.\\n    ///                                   User who made the cc burn request will receive the slashed bond\\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _rewardAmount              Amount of CoreBTC that slasher receives\\n    /// @param _rewardRecipient           Address of slasher who receives reward\\n    /// @param _amount                    Amount of CoreBTC that is slashed from lockers\\n    /// @param _recipient                 Address of user who receives the slashed amount\\n    /// @return                           True if the locker is slashed successfully\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external override nonReentrant whenNotPaused returns (bool) {\\n        require(\\n            _msgSender() == ccBurnRouter,\\n            \\\"Lockers: message sender is not ccBurn\\\"\\n        );\\n\\n        _amount += _amount * slashCompensationRatio / ONE_HUNDRED_PERCENT;\\n\\n        uint equivalentCollateral = LockersLib.slashIdleLocker(\\n            lockersMapping[_lockerTargetAddress],\\n            libParams,\\n            _rewardAmount,\\n            _amount\\n        );\\n\\n        address lockedToken = lockersMapping[_lockerTargetAddress].lockedToken;\\n\\n        // Transfers Collateral to user\\n        _sendCollateralToRecipient(\\n            _recipient,\\n            lockedToken,\\n            equivalentCollateral*_amount/(_amount + _rewardAmount)\\n        );\\n        // Transfers Collateral to slasher\\n        uint rewardAmountInCollateral = equivalentCollateral - (equivalentCollateral*_amount/(_amount + _rewardAmount));\\n        _sendCollateralToRecipient(\\n            _rewardRecipient,\\n            lockedToken,\\n            rewardAmountInCollateral\\n        );\\n\\n        emit LockerSlashed(\\n            _lockerTargetAddress,\\n            rewardAmountInCollateral,\\n            _rewardRecipient,\\n            _amount,\\n            _recipient,\\n            equivalentCollateral,\\n            block.timestamp,\\n            true,\\n            lockedToken\\n        );\\n\\n        return true;\\n    }\\n\\n\\n    /// @notice                           Slashes lockers for moving BTC without a good reason\\n    /// @dev                              Only cc burn router can call this\\n    ///                                   Locker is slashed because he/she moved BTC from\\n    ///                                   locker's Bitcoin address without any corresponding burn req\\n    ///                                   The slashed bond will be sold with discount\\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _rewardAmount              Value of slashed reward (in CoreBTC)\\n    /// @param _rewardRecipient           Address of slasher who receives reward\\n    /// @param _amount                    Value of slashed collateral (in CoreBTC)\\n    /// @return                           True if the locker is slashed successfully\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount\\n    ) external override nonReentrant whenNotPaused returns (bool) {\\n        require(\\n            _msgSender() == ccBurnRouter,\\n            \\\"Lockers: message sender is not ccBurn\\\"\\n        );\\n\\n        (uint rewardInCollateral, uint neededTokenForSlash) = LockersLib.slashThiefLocker(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams,\\n            _rewardAmount,\\n            _amount\\n        );\\n\\n        address lockedToken = lockersMapping[_lockerTargetAddress].lockedToken;\\n\\n        _sendCollateralToRecipient(\\n            _rewardRecipient,\\n            lockedToken,\\n            rewardInCollateral\\n        );\\n\\n        emit LockerSlashed(\\n            _lockerTargetAddress,\\n            rewardInCollateral,\\n            _rewardRecipient,\\n            _amount,\\n            address(this),\\n            neededTokenForSlash + rewardInCollateral,\\n            block.timestamp,\\n            false,\\n            lockedToken\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                           Liquidates the locker whose collateral is unhealthy\\n    /// @dev                              Anyone can liquidate a locker whose health factor\\n    ///                                   is less than 10000 (100%) by providing a sufficient amount of coreBTC\\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _collateralAmount          Amount of collateral that someone intends to buy with discount\\n    /// @return                           True if liquidation was successful\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external override nonReentrant whenNotPaused\\n    nonZeroAddress(_lockerTargetAddress) nonZeroValue(_collateralAmount) returns (bool) {\\n\\n        uint neededCoreBTC = LockersLib.liquidateLocker(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams,\\n            _collateralAmount\\n        );\\n\\n        DataTypes.locker storage theLiquidatingLocker = lockersMapping[_lockerTargetAddress];\\n\\n        // Updates bond of locker\\n        theLiquidatingLocker.lockedAmount -= _collateralAmount;\\n\\n        // transfer coreBTC from user\\n        IERC20(coreBTC).safeTransferFrom(msg.sender, address(this), neededCoreBTC);\\n\\n        // Burns CoreBTC for locker rescue script\\n        IERC20(coreBTC).safeApprove(ccBurnRouter, neededCoreBTC);\\n        require(\\n            IBurnRouter(ccBurnRouter).ccBurn(\\n                neededCoreBTC,\\n                theLiquidatingLocker.lockerRescueScript,\\n                theLiquidatingLocker.lockerRescueType,\\n                theLiquidatingLocker.lockerLockingScript\\n            ) > 0,\\n            \\\"Lockers: burnt amount is zero\\\"\\n        );\\n\\n        _sendCollateralToRecipient(\\n            _msgSender(),\\n            theLiquidatingLocker.lockedToken,\\n            _collateralAmount\\n        );\\n\\n        emit LockerLiquidated(\\n            _lockerTargetAddress,\\n            _msgSender(),\\n            _collateralAmount,\\n            neededCoreBTC,\\n            block.timestamp,\\n            theLiquidatingLocker.lockedToken\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                           Sells lockers slashed collateral\\n    /// @dev                              Users buy the slashed collateral using CoreBTC with discount\\n    ///                                   The paid CoreBTC will be burnt to keep the system safe\\n    ///                                   If all the needed CoreBTC is collected and burnt,\\n    ///                                   the rest of slashed collateral is sent back to locker\\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _collateralAmount          Amount of collateral that someone intends to buy with discount\\n    /// @return                           True if buying was successful\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external override nonReentrant whenNotPaused\\n        nonZeroAddress(_lockerTargetAddress) returns (bool) {\\n\\n        uint neededCoreBTC = LockersLib.buySlashedCollateralOfLocker(\\n            lockersMapping[_lockerTargetAddress],\\n            _collateralAmount\\n        );\\n\\n        // Burns user's CoreBTC\\n        ICoreBTC(coreBTC).transferFrom(_msgSender(), address(this), neededCoreBTC);\\n        ICoreBTC(coreBTC).burn(neededCoreBTC);\\n\\n        // Sends bought collateral to user\\n        _sendCollateralToRecipient(\\n            _msgSender(),\\n            lockersMapping[_lockerTargetAddress].lockedToken,\\n            _collateralAmount\\n        );\\n\\n        emit LockerSlashedCollateralSold(\\n            _lockerTargetAddress,\\n            _msgSender(),\\n            _collateralAmount,\\n            neededCoreBTC,\\n            block.timestamp,\\n            lockersMapping[_lockerTargetAddress].lockedToken\\n        );\\n\\n        return true;\\n    }\\n\\n\\n    /// @notice                                 Increases collateral of the locker\\n    /// @param _lockerTargetAddress             Locker's target chain address\\n    /// @param _addingCollateralAmount          Amount of added collateral\\n    /// @return                                 True if collateral is added successfully\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingCollateralAmount\\n    ) external override payable nonReentrant nonZeroValue(_addingCollateralAmount) returns (bool) {\\n\\n        if (lockersMapping[_lockerTargetAddress].lockedToken == NATIVE_TOKEN) {\\n            require(\\n                msg.value == _addingCollateralAmount,\\n                \\\"Lockers: msg value\\\"\\n            );\\n        }\\n\\n        LockersLib.addToCollateral(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            _addingCollateralAmount\\n        );\\n\\n        emit CollateralAdded(\\n            _lockerTargetAddress,\\n            _addingCollateralAmount,\\n            lockersMapping[_lockerTargetAddress].lockedAmount,\\n            block.timestamp,\\n            lockersMapping[_lockerTargetAddress].lockedToken\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                                 Decreases collateral of the locker\\n    /// @param _removingCollateralAmount        Amount of removed collateral\\n    /// @return                                 True if collateral is removed successfully\\n    function removeCollateral(\\n        uint _removingCollateralAmount\\n    ) external override payable nonReentrant returns (bool) {\\n        LockersLib.removeFromCollateral(\\n            lockersMapping[_msgSender()],\\n            libConstants,\\n            libParams,\\n            _removingCollateralAmount\\n        );\\n\\n        _sendCollateralToRecipient(\\n            _msgSender(),\\n            lockersMapping[_msgSender()].lockedToken,\\n            _removingCollateralAmount\\n        );\\n\\n        emit CollateralRemoved(\\n            _msgSender(),\\n            _removingCollateralAmount,\\n            lockersMapping[_msgSender()].lockedAmount,\\n            block.timestamp,\\n            lockersMapping[_msgSender()].lockedToken\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                       Mint coreBTC for an account\\n    /// @dev                          Mint coreBTC for an account and the locker fee as well\\n    /// @param _lockerLockingScript   Locking script of a locker\\n    /// @param _receiver              Address of the receiver of the minted coreBTCs\\n    /// @param _txId                  The id of bitcoin transaction\\n    /// @param _amount                Amount of the coreBTC which is minted, including the locker's fee\\n    /// @return uint                  The amount of coreBTC minted for the receiver\\n    function mint(\\n        bytes calldata _lockerLockingScript,\\n        address _receiver,\\n        bytes32 _txId,\\n        uint _amount\\n    ) external override nonReentrant whenNotPaused onlyMinter\\n    nonZeroAddress(_receiver) nonZeroValue(_amount) returns (uint) {\\n\\n        address _lockerTargetAddress = lockerTargetAddress[_lockerLockingScript];\\n\\n        uint theLockerCapacity = getLockerCapacity(_lockerTargetAddress);\\n\\n        require(\\n            theLockerCapacity >= _amount,\\n            \\\"Lockers: insufficient capacity\\\"\\n        );\\n\\n        require(\\n            isLockerActive(_lockerTargetAddress),\\n            \\\"Lockers: not active\\\"\\n        );\\n\\n        lockersMapping[_lockerTargetAddress].netMinted += _amount;\\n\\n        // Mints locker fee\\n        uint lockerFee = _amount*lockerPercentageFee/MAX_LOCKER_FEE;\\n        if (lockerFee > 0) {\\n            ICoreBTC(coreBTC).mint(_lockerTargetAddress, lockerFee);\\n        }\\n\\n        // Mints tokens for receiver\\n        ICoreBTC(coreBTC).mint(_receiver, _amount - lockerFee);\\n\\n        emit MintByLocker(\\n            _lockerTargetAddress,\\n            _receiver,\\n            _txId,\\n            _amount,\\n            lockerFee,\\n            block.timestamp\\n        );\\n\\n        return _amount - lockerFee;\\n    }\\n\\n    /// @notice                       Burn coreBTC of an account\\n    /// @dev                          Burn coreBTC and also get the locker's fee\\n    /// @param _lockerLockingScript   Locking script of a locker\\n    /// @param _amount                Amount of the coreBTC which is minted, including the locker's fee\\n    /// @return uint                  The amount of coreBTC burnt\\n    function burn(\\n        bytes calldata _lockerLockingScript,\\n        uint _amount\\n    ) external override nonZeroValue(_amount)\\n    whenNotPaused onlyBurner returns (uint) {\\n\\n        address _lockerTargetAddress = lockerTargetAddress[_lockerLockingScript];\\n\\n        // Transfers coreBTC from user\\n        require(\\n            ICoreBTC(coreBTC).transferFrom(_msgSender(), address(this), _amount),\\n            \\\"Lockers: transferFrom failed\\\"\\n        );\\n\\n        uint lockerFee = _amount*lockerPercentageFee/MAX_LOCKER_FEE;\\n        uint remainedAmount = _amount - lockerFee;\\n        uint netMinted = lockersMapping[_lockerTargetAddress].netMinted;\\n\\n        require(\\n            netMinted >= remainedAmount,\\n            \\\"Lockers: insufficient funds\\\"\\n        );\\n\\n        lockersMapping[_lockerTargetAddress].netMinted = netMinted - remainedAmount;\\n\\n        // Burns coreBTC and sends rest of it to locker\\n        require(\\n            ICoreBTC(coreBTC).burn(remainedAmount),\\n            \\\"Lockers: burn failed\\\"\\n        );\\n        require(\\n            ICoreBTC(coreBTC).transfer(_lockerTargetAddress, lockerFee),\\n            \\\"Lockers: lockerFee failed\\\"\\n        );\\n\\n        emit BurnByLocker(\\n            _lockerTargetAddress,\\n            _amount,\\n            lockerFee,\\n            block.timestamp\\n        );\\n\\n        return remainedAmount;\\n    }\\n\\n    // *************** Public functions ***************\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice                             Returns the Locker status\\n    /// @dev                                We check a locker status in below cases:\\n    ///                                     1. Minting CoreBTC\\n    ///                                     2. Removing locker's collateral\\n    ///                                     3. Removing locker\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             True if the locker is active\\n    function isLockerActive(\\n        address _lockerTargetAddress\\n    ) public override view nonZeroAddress(_lockerTargetAddress) returns (bool) {\\n        return LockersLib.isLockerActive(lockersMapping[_lockerTargetAddress]);\\n    }\\n\\n    /// @notice                             Get how much the locker can mint\\n    /// @dev                                Net minted amount is total minted minus total burnt for the locker\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             The net minted of the locker\\n    function getLockerCapacity(\\n        address _lockerTargetAddress\\n    ) public override view nonZeroAddress(_lockerTargetAddress) returns (uint) {\\n\\n        return LockersLib.getLockerCapacity(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams\\n        );\\n    }\\n\\n    /**\\n     * @dev                                 Returns the price of one collateral token (1*10^18) in coreBTC\\n     * @param _collateralToken              The address of collateral token\\n     * @return                              uint The price of one unit of collateral token\\n     */\\n    function priceOfOneUnitOfCollateralInBTC(\\n        address _collateralToken\\n    ) public override view nonZeroAddress(_collateralToken) returns (uint) {\\n\\n        return LockersLib.priceOfOneUnitOfCollateralInBTC(\\n            libParams,\\n            _collateralToken\\n        );\\n\\n    }\\n\\n    /// @notice                Check if an account is minter\\n    /// @param  account        The account which intended to be checked\\n    /// @return bool\\n    function isMinter(address account) public override view nonZeroAddress(account) returns (bool) {\\n        return minters[account];\\n    }\\n\\n    /// @notice                Check if an account is burner\\n    /// @param  account        The account which intended to be checked\\n    /// @return bool\\n    function isBurner(address account) public override view nonZeroAddress(account) returns (bool) {\\n        return burners[account];\\n    }\\n\\n    /// @notice                             Get health factor of the locker\\n    /// @dev                                The health factor is equal to current collateral asset value divided by the minimum collateral asset value to trigger liquidation,\\n    ///                                     the minimum collateral asset value to trigger liquidation is equal to the current locked asset value multiplied by the liquidation ratio\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             The health factor of the locker\\n    function getHealthFactor(address _lockerTargetAddress) external override view returns(uint) {\\n        return LockersLib.getHealthFactor(\\n            lockersMapping[_lockerTargetAddress],\\n            libParams\\n        );\\n    }\\n\\n    /// @notice                             Get maximum buyable collateral amount of the locker\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             The maximum buyable collateral amount of the locker\\n    function getMaximumBuyableCollateral(address _lockerTargetAddress) external override view returns (uint) {\\n        return LockersLib.getMaximumBuyableCollateral(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams\\n        );\\n    }\\n\\n    /// @notice                             Get how much coreBTC needed for buying the collateral\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @param _collateralAmount            Amount of collateral that someone intends to buy with discount\\n    /// @return                             The amount of coreBTC\\n    function getNeededCoreBTCToBuyCollateral(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external override view returns(uint) {\\n        return LockersLib.getNeededCoreBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            _collateralAmount,\\n            lockersMapping[_lockerTargetAddress].lockedToken\\n        );\\n    }\\n\\n    /// @notice                             Checks whether a token is used as collateral by locker\\n    /// @param _token                       Address of collateral\\n    /// @return                             True if collateral is unused\\n    function isCollateralUnused(address _token) external override view nonZeroAddress(_token) returns (bool) {\\n        return LockersLib.isCollateralUnused(lockersMapping, candidateLockers, _token) &&\\n            LockersLib.isCollateralUnused(lockersMapping, approvedLockers, _token);\\n    }\\n\\n    // *************** Private functions ***************\\n\\n    /// @notice                       Removes a locker from lockers list\\n    /// @dev                          Checks that net minted CoreBTC of locker is zero\\n    ///                               Sends back available bond of locker\\n    /// @param _lockerTargetAddress   Target address of locker to be removed\\n    function _removeLocker(address _lockerTargetAddress) private {\\n\\n        // Removes locker from lockerTargetAddress, lockersMapping and approvedLockers\\n        DataTypes.locker memory _removingLocker = LockersLib.removeLocker(\\n            lockersMapping,\\n            lockerTargetAddress,\\n            approvedLockers,\\n            _lockerTargetAddress\\n        );\\n\\n        // Updates number of lockers\\n        totalNumberOfLockers = totalNumberOfLockers - 1;\\n\\n        // Sends back collateral\\n        _sendCollateralToRecipient(\\n            _lockerTargetAddress,\\n            _removingLocker.lockedToken,\\n            _removingLocker.lockedAmount\\n        );\\n\\n        emit LockerRemoved(\\n            _lockerTargetAddress,\\n            _removingLocker.lockerLockingScript,\\n            _removingLocker.lockedAmount,\\n            _removingLocker.lockedToken\\n        );\\n\\n    }\\n\\n    /// @notice                       Internal setter for percentage fee of locker\\n    /// @param _lockerPercentageFee   The new locker percentage fee\\n    function _setLockerPercentageFee(uint _lockerPercentageFee) private {\\n        require(_lockerPercentageFee <= MAX_LOCKER_FEE, \\\"Lockers: invalid locker fee\\\");\\n        emit NewLockerPercentageFee(lockerPercentageFee, _lockerPercentageFee);\\n        lockerPercentageFee = _lockerPercentageFee;\\n        libParams.lockerPercentageFee = lockerPercentageFee;\\n    }\\n\\n    function _setPriceWithDiscountRatio(uint _priceWithDiscountRatio) private {\\n        require(\\n            _priceWithDiscountRatio <= ONE_HUNDRED_PERCENT,\\n            \\\"Lockers: less than or equal to 100%\\\"\\n        );\\n        emit NewPriceWithDiscountRatio(priceWithDiscountRatio, _priceWithDiscountRatio);\\n\\n        priceWithDiscountRatio= _priceWithDiscountRatio;\\n        libParams.priceWithDiscountRatio = priceWithDiscountRatio;\\n    }\\n\\n    /// @notice                 Internal setter for the price oracle\\n    /// @param _priceOracle     The new price oracle\\n    function _setPriceOracle(address _priceOracle) private nonZeroAddress(_priceOracle) {\\n        emit NewPriceOracle(priceOracle, _priceOracle);\\n        priceOracle = _priceOracle;\\n        libParams.priceOracle = priceOracle;\\n    }\\n\\n    /// @notice                Internal setter for cc burn router contract\\n    /// @param _ccBurnRouter   The new cc burn router contract address\\n    function _setCCBurnRouter(address _ccBurnRouter) private nonZeroAddress(_ccBurnRouter) {\\n        emit NewCCBurnRouter(ccBurnRouter, _ccBurnRouter);\\n        emit BurnerRemoved(ccBurnRouter);\\n        burners[ccBurnRouter] = false;\\n        ccBurnRouter = _ccBurnRouter;\\n        libParams.ccBurnRouter = ccBurnRouter;\\n        emit BurnerAdded(ccBurnRouter);\\n        burners[ccBurnRouter] = true;\\n    }\\n\\n    /// @notice                 Internal setter for wrapped token contract address\\n    /// @param _coreBTC         The new wrapped token contract address\\n    function _setCoreBTC(address _coreBTC) private nonZeroAddress(_coreBTC) {\\n        emit NewCoreBTC(coreBTC, _coreBTC);\\n        coreBTC = _coreBTC;\\n        libParams.coreBTC = coreBTC;\\n    }\\n\\n    /// @notice                     Internal setter for collateral ratio\\n    /// @param _collateralRatio     The new collateral ratio\\n    function _setCollateralRatio(uint _collateralRatio) private {\\n        require(_collateralRatio > liquidationRatio, \\\"Lockers: must CR > LR\\\");\\n        emit NewCollateralRatio(collateralRatio, _collateralRatio);\\n        collateralRatio = _collateralRatio;\\n        libParams.collateralRatio = collateralRatio;\\n    }\\n\\n    /// @notice                     Internal setter for liquidation ratio\\n    /// @param _liquidationRatio    The new liquidation ratio\\n    function _setLiquidationRatio(uint _liquidationRatio) private {\\n        require(\\n            collateralRatio > _liquidationRatio,\\n            \\\"Lockers: must CR > LR\\\"\\n        );\\n        emit NewLiquidationRatio(liquidationRatio, _liquidationRatio);\\n        liquidationRatio = _liquidationRatio;\\n        libParams.liquidationRatio = liquidationRatio;\\n    }\\n\\n    /// @notice                         Internal setter for slash compensation ratio\\n    /// @param _slashCompensationRatio  The new slash compensation ratio\\n    function _setSlashCompensationRatio(uint _slashCompensationRatio) private {\\n        require(\\n            _slashCompensationRatio <= ONE_HUNDRED_PERCENT,\\n            \\\"Lockers: less than or equal to 100%\\\"\\n        );\\n\\n        emit NewSlashCompensationRatio(slashCompensationRatio, _slashCompensationRatio);\\n        slashCompensationRatio = _slashCompensationRatio;\\n        libParams.slashCompensationRatio = slashCompensationRatio;\\n    }\\n\\n    /// @notice                     Changes collaterals contract address\\n    /// @param _collaterals         The address of collaterals contract\\n    function _setCollaterals(address _collaterals) private nonZeroAddress(_collaterals) {\\n        emit NewCollaterals(collaterals, _collaterals);\\n\\n        collaterals = _collaterals;\\n        libParams.collaterals = collaterals;\\n    }\\n\\n    /// @notice                     Transfer collateral from lockers to recipient\\n    /// @param _recipient           The address of recipient\\n    /// @param _collateralToken     The address of collateral token\\n    /// @param _collateralAmount    The amount of collateral\\n    function _sendCollateralToRecipient(\\n        address _recipient,\\n        address _collateralToken,\\n        uint _collateralAmount\\n    ) private {\\n        if (_collateralToken == NATIVE_TOKEN) {\\n            Address.sendValue(payable(_recipient), _collateralAmount);\\n        } else {\\n            IERC20(_collateralToken).safeTransfer(_recipient, _collateralAmount);\\n        }\\n    }\\n\\n    // *************** Handling data compatibility after contract upgrade ***************\\n\\n    /// @notice                     Init candidate locker list and locker\\u2019s lockedToken\\n    /// @dev                        The function can only be called when the logic contract is upgraded to feature `multiple collaterals`\\n    ///                             Only current owner can invoke it through a delegated call\\n    /// @param  _initialCandidates  The target address list of candidate lockers\\n    function initForMultipleCollateralsFeature(address[] memory _initialCandidates) external onlyProxy onlyOwner {\\n        LockersLib.initForMultipleCollateralsFeature(\\n            lockersMapping,\\n            lockerInactivationTimestamp,\\n            candidateLockers,\\n            approvedLockers,\\n            _initialCandidates,\\n            totalNumberOfCandidates\\n        );\\n    }\\n}\",\"keccak256\":\"0xdd4a1e3240b15d91d325e03dcf19b46f581e5570503b6afc08e113eafb49c31a\",\"license\":\"MIT\"},\"contracts/lockers/LockersStorageStructure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/ILockersStorage.sol\\\";\\n\\ncontract LockersStorageStructure is ILockersStorage {\\n\\n    // Constants\\n    uint public constant ONE_HUNDRED_PERCENT = 10000;\\n    uint public constant HEALTH_FACTOR = 10000;\\n    uint public constant UPPER_HEALTH_FACTOR = 12500;\\n    uint public constant MAX_LOCKER_FEE = 10000;\\n    uint public constant INACTIVATION_DELAY = 345600; // 4 days (it should be greater than MAX_FINALIZATION_PARAMETER)\\n    uint public constant NATIVE_TOKEN_DECIMAL = 18;\\n    address public constant NATIVE_TOKEN = address(1);\\n\\n    // Public variables\\n    address public override coreBTC;\\n    address public override ccBurnRouter;\\n    address public override priceOracle;\\n    address public override collaterals;\\n\\n    uint public override lockerPercentageFee;\\n    uint public override collateralRatio;\\n    uint public override liquidationRatio;\\n    uint public override priceWithDiscountRatio;\\n    uint public override slashCompensationRatio;\\n    uint public override totalNumberOfCandidates;\\n    uint public override totalNumberOfLockers;\\n\\n    address[] public override approvedLockers;                  // storage target address\\n    mapping(address => DataTypes.locker) public lockersMapping; // locker's target address -> locker structure\\n    mapping(address => uint) public lockerInactivationTimestamp;\\n    mapping(address => bool) public lockerLeavingAcceptance;\\n    mapping(bytes => address) public lockerTargetAddress; // locker's locking script -> locker's target address\\n    mapping(address => bool) minters;\\n    mapping(address => bool) burners;\\n\\n    DataTypes.lockersLibConstants public libConstants;\\n    DataTypes.lockersLibParam public libParams;\\n}\\n\",\"keccak256\":\"0x5e88772f4fb112dce8102908d63352bae61b56a7a1db3ac31df8415fe2864523\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ICollaterals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../../types/DataTypes.sol\\\";\\n\\ninterface ICollaterals {\\n    // struct\\n    struct collateral {\\n        address token;\\n        uint minLockedAmount;\\n    }\\n\\n    // Events\\n    event NewMinRequiredLockedAmount(\\n        address indexed token,\\n        uint oldMinRequiredLockedAmount,\\n        uint newMinRequiredLockedAmount\\n    );\\n\\n    event NewLockers(address oldLockers, address newLockers);\\n\\n    event NewSupportedCollateral(address indexed token, uint minLockedAmount);\\n\\n    event RevokeSupportedCollateral(address indexed token);\\n\\n    // Errors\\n    error InsufficientCollateral(address collateralToken, uint lockedAmount, uint minLockedAmount);\\n\\n    // Read-only functions\\n    function lockers() external view returns (address);\\n\\n    function getTotalNumber() external view returns (uint);\\n\\n    function getDecimals(address _token) external view returns (uint);\\n\\n    function getMinLockedAmount(address _token) external view returns (uint);\\n\\n    function getCollateral(uint _index) external view returns (collateral memory);\\n\\n    function checkLockedAmount(address _token, uint _lockedAmount) external view;\\n\\n\\n    // State-changing functions\\n    function setLockers(address _lockers) external;\\n\\n    function setMinLockedAmount(address _token, uint _minLockedAmount) external;\\n\\n    function addCollateral(address _token, uint _minLockedAmount) external;\\n\\n    function removeCollateral(address _token) external;\\n}\",\"keccak256\":\"0x3d29de86c37a78285d48444e6a3f6276eaca56def2bc55d67bfd7e7c36b0338d\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./ILockersStorage.sol\\\";\\n\\ninterface ILockers is ILockersStorage {\\n\\n     // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint lockedAmount,\\n        address lockedToken\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint lockedAmount,\\n        address lockedToken\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint lockedAmount,\\n        uint netMinted,\\n        address lockedToken\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint lockedAmount,\\n        uint netMinted,\\n        address lockedToken\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint lockedAmount,\\n        uint addingTime,\\n        address lockedToken\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint unlockedAmount,\\n        address unlockedToken\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint amount,\\n        address indexed recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn,\\n        address slashedCollateralToken\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        uint collateralAmount,\\n        uint coreBTCAmount,\\n        uint liquidateTime,\\n        address collateralToken\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        uint slashingAmount,\\n        uint coreBTCAmount,\\n        uint slashingTime,\\n        address slashingToken\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime,\\n        address collateralToken\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime,\\n        address collateralToken\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        bytes32 bitcoinTxId,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    event MinterAdded(\\n        address indexed account\\n    );\\n\\n    event MinterRemoved(\\n        address indexed account\\n    );\\n\\n    event BurnerAdded(\\n        address indexed account\\n    );\\n\\n    event BurnerRemoved(\\n        address indexed account\\n    );\\n\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint oldPriceWithDiscountRatio,\\n        uint newPriceWithDiscountRatio\\n    );\\n\\n    event NewPriceOracle(\\n        address oldPriceOracle,\\n        address newPriceOracle\\n    );\\n\\n    event NewCCBurnRouter(\\n        address oldCCBurnRouter,\\n        address newCCBurnRouter\\n    );\\n\\n    event NewCoreBTC(\\n        address oldCoreBTC,\\n        address newCoreBTC\\n    );\\n\\n    event NewCollateralRatio(\\n        uint oldCollateralRatio,\\n        uint newCollateralRatio\\n    );\\n\\n    event NewLiquidationRatio(\\n        uint oldLiquidationRatio,\\n        uint newLiquidationRatio\\n    );\\n\\n    event NewSlashCompensationRatio(\\n        uint oldSlashCompensationRatio,\\n        uint newSlashCompensationRatio\\n    );\\n\\n    event NewCollaterals(\\n        address oldCollaterals,\\n        address newCollaterals\\n    );\\n\\n    // Read-only functions\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isLockerActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function getLockerCapacity(address _lockerTargetAddress) external view returns (uint);\\n\\n    function priceOfOneUnitOfCollateralInBTC(address _collateralToken) external view returns (uint);\\n\\n    function isMinter(address account) external view returns(bool);\\n\\n    function isBurner(address account) external view returns(bool);\\n\\n    function getHealthFactor(address _lockerTargetAddress) external view returns(uint);\\n\\n    function getMaximumBuyableCollateral(address _lockerTargetAddress) external view returns (uint);\\n\\n    function getNeededCoreBTCToBuyCollateral(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external view returns(uint);\\n\\n    function candidateLockers(uint index) external view returns(address);\\n\\n    function isCollateralUnused(address _token) external view returns (bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, bytes32 _txId, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setCoreBTC(address _coreBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function setSlashCompensationRatio(uint _slashCompensationRatio) external;\\n\\n    function setCollaterals(address _collaterals) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingCollateralAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingCollateralAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript,\\n        address _lockedToken\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0xb54a1c855c3ab4d4e5f888a5b815821dd5320db2ffc33d1058bf83a7dfd7bca3\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../../types/DataTypes.sol\\\";\\n\\ninterface ILockersStorage {\\n    // Read-only functions\\n\\n    function coreBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function collaterals() external view returns(address);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function slashCompensationRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n\\n    function approvedLockers(uint index) external view returns(address);\\n}\\n\",\"keccak256\":\"0x2835c045aee2bbb55cf337426a66c31f8ce66f3603e4b3760f2d05d26d1d52f2\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IPriceOracle {\\n\\n    // Events\\n    event NewAcceptableDelay(uint oldAcceptableDelay, uint newAcceptableDelay);\\n\\n    event AddPriceProxy(address indexed priceProxy);\\n\\n    event RemovePriceProxy(address indexed priceProxy);\\n\\n    event NewBestPriceProxy(address oldBestPriceProxy, address newBestPriceProxy);\\n\\n    event NewTokenPricePair(address indexed token, string oldPricePair, string newPricePair);\\n\\n    event NewEarnWrappedToken(address oldEarnWrappedToken, address newEarnWrappedToken);\\n\\n    event NewEarnStrategy(address oldEarnStrategy, address newEarnStrategy);\\n\\n    // Errors\\n    error ExpiredPrice(address token, uint publishTime, uint currentTime);\\n\\n    error FailedQueryPrice(string pairName0, string pairName1, string err);\\n\\n    error InvalidExchangeRate(address token, address anchorToken, uint exchangeRate, uint decimals);\\n\\n    // Read-only functions\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function pricePairMap(address _token) external view returns(string memory);\\n\\n    function priceProxyIdxMap(address _priceOracle) external view returns(uint);\\n\\n    function getPriceProxyListLength() external view returns(uint);\\n\\n    function priceProxyList(uint idx) external view returns(address);\\n\\n    function bestPriceProxy() external view returns(address);\\n\\n    function earnWrappedToken() external view returns(address);\\n\\n    function earnStrategy() external view returns(address);\\n\\n    // State-changing functions\\n\\n    function addPriceProxy(address _priceProxy) external;\\n\\n    function removePriceProxy(address _priceProxy) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n\\n    function selectBestPriceProxy(address _priceProxy) external;\\n\\n    function addTokenPricePair(\\n        address _token,\\n        string memory _pairName\\n    ) external;\\n\\n    function setEarnWrappedToken(address _token) external;\\n\\n    function setEarnStrategy(address _earn) external;\\n\\n    function pauseOracle() external;\\n\\n    function unPauseOracle() external;\\n}\",\"keccak256\":\"0x26a2069de2feb13eeb91f22eb916279acf086522b0d870cb1a65374fa6c0d241\",\"license\":\"MIT\"},\"contracts/routers/interfaces/IBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../../common/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IBurnRouter {\\n\\n  \\t// Events\\n\\n\\t/// @notice Emits when a burn request gets submitted\\n    /// @param userTargetAddress Address of the user\\n    /// @param userScript Script of user on Bitcoin\\n    /// @param scriptType Script type of the user (for bitcoin address)\\n    /// @param coreBTCAmount amount of coreBTC that user sent OR Amount of coreBTC after exchanging\\n    /// @param burntAmount that user will receive (after reducing fees)\\n\\t/// @param lockerTargetAddress Address of Locker\\n\\t/// @param requestIdOfLocker Index of request between Locker's burn requests\\n\\t/// @param deadline of Locker for executing the request (in terms of Bitcoin blocks)\\n  \\tevent CCBurn(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n\\t\\tuint coreBTCAmount,\\n\\t\\tuint burntAmount,\\n\\t\\taddress lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tuint indexed deadline\\n\\t);\\n\\n\\t/// @notice Emits when a burn proof is provided\\n    /// @param lockerTargetAddress Address of Locker\\n    /// @param requestIdOfLocker Index of paid request of among Locker's requests\\n    /// @param bitcoinTxId The hash of tx that paid a burn request\\n\\t/// @param bitcoinTxOutputIndex The output index in tx\\n\\tevent PaidCCBurn(\\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tbytes32 bitcoinTxId,\\n\\t\\tuint bitcoinTxOutputIndex\\n\\t);\\n\\n\\t/// @notice  Emits when a locker gets slashed for withdrawing BTC without proper reason\\n\\t/// @param _lockerTargetAddress\\tLocker's address on the target chain\\n\\t/// @param blockHeight\\tBlock number of the malicious tx\\n\\t/// @param txId\\tTransaction ID of the malicious tx\\n\\t/// @param amount Slashed amount\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n    \\tuint blockHeight,\\n        bytes32 txId,\\n\\t\\tuint amount\\n    );\\n\\n\\tevent BurnDispute(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\taddress indexed _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n\\t\\tuint requestIdOfLocker\\n\\t);\\n\\n\\t/// @notice Emits when relay address is updated\\n    event NewRelay(\\n        address oldRelay,\\n        address newRelay\\n    );\\n\\n\\t/// @notice Emits when treasury address is updated\\n    event NewTreasury(\\n        address oldTreasury,\\n        address newTreasury\\n    );\\n\\n\\t/// @notice Emits when lockers address is updated\\n    event NewLockers(\\n        address oldLockers,\\n        address newLockers\\n    );\\n\\n\\t/// @notice Emits when CoreBTC address is updated\\n    event NewCoreBTC(\\n        address oldCoreBTC,\\n        address newCoreBTC\\n    );\\n\\n\\t/// @notice Emits when transfer deadline is updated\\n    event NewTransferDeadline(\\n        uint oldTransferDeadline,\\n        uint newTransferDeadline\\n    );\\n\\n\\t/// @notice Emits when percentage fee is updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee,\\n        uint newProtocolPercentageFee\\n    );\\n\\n\\t/// @notice Emits when slasher percentage fee is updated\\n    event NewSlasherPercentageFee(\\n        uint oldSlasherPercentageFee,\\n        uint newSlasherPercentageFee\\n    );\\n\\n\\t/// @notice Emits when bitcoin fee is updated\\n    event NewBitcoinFee(\\n        uint oldBitcoinFee,\\n        uint newBitcoinFee\\n    );\\n\\n\\t/// @notice Emits when bitcoin fee oracle is updated\\n    event NewBitcoinFeeOracle(\\n        address oldBitcoinFeeOracle,\\n        address newBitcoinFeeOracle\\n    );\\n\\n\\t/// @notice Emits when slasher address is updated\\n\\tevent NewSlasher(\\n\\t\\taddress oldSlasher,\\n\\t\\taddress newSlasher\\n\\t);\\n\\n\\t// Read-only functions\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setCoreBTC(address _coreBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setBitcoinFee(uint _bitcoinFee) external;\\n\\n\\tfunction setBitcoinFeeOracle(address _bitcoinFeeOracle) external;\\n\\n\\tfunction setSlasher(address _slasher) external;\\n\\n\\tfunction ccBurn(\\n\\t\\tuint _amount,\\n\\t\\tbytes calldata _userScript,\\n\\t\\tScriptTypes _scriptType,\\n\\t\\tbytes calldata _lockerLockingScript\\n\\t) external returns (uint);\\n\\n\\tfunction burnProof(\\n\\t\\tbytes calldata _tx,\\n\\t\\tuint _blockNumber,\\n\\t\\tbytes memory _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n\\t) external returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint[] memory _indices\\n\\t) external;\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n\\t\\tbytes calldata _inputTx,\\n\\t\\tbytes calldata _outputTx,\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers\\n\\t\\t// ^ [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external;\\n}\",\"keccak256\":\"0xec11971409f5ee5b8f5a3fbe3eb74629bf2233b97e64374068932772494ab1c0\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../common/types/ScriptTypesEnum.sol\\\";\\n\\nlibrary DataTypes {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param lockedAmount                 Bond amount of locker in locked token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingCoreBTCAmount        Total amount of coreBTC a locker must be slashed\\n    /// @param reservedTokenForSlash        Total locked token reserved to support slashing coreBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 This field is not used\\n    /// @param lockedToken                  Address of collateral token\\n    /// @param inactivationTimestamp        Starting time of becoming inactive state\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint lockedAmount;\\n        uint netMinted;\\n        uint slashingCoreBTCAmount;\\n        uint reservedTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n        address lockedToken;\\n        uint inactivationTimestamp;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address coreBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n        address collaterals;\\n\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint slashCompensationRatio;\\n    }\\n}\",\"keccak256\":\"0x82d7a3f2700b5e19f8224886eb92da5221212fac04c9c6b053a49277f4679252\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b506200002362000029565b620000eb565b602254610100900460ff1615620000965760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60225460ff9081161015620000e9576022805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805160601c615fe86200013460003960008181611293015281816112d301528181611d2501528181611d6501528181611de101528181612d050152612d450152615fe86000f3fe60806040526004361061045d5760003560e01c8063768ebb121161023f578063b4eae1cb11610139578063e30c3978116100b6578063ef3735291161007a578063ef37352914610da9578063f2fde38b14610dc9578063f44637ba14610de9578063fe6bcd7c14610e09578063ffc9f70414610e2957600080fd5b8063e30c397814610d2b578063e85501d814610d49578063e955de4514610d5e578063ed110a9c14610d73578063ee1f1c7014610d8957600080fd5b8063cdcbc879116100fd578063cdcbc87914610c61578063d0d7a25914610ccb578063d5a38a9114610ceb578063d63a73ec14610d0b578063dd0081c71461074857600080fd5b8063b4eae1cb14610b47578063b734de2614610b5d578063bc805d1d14610b7d578063bd60e79414610b93578063c4d10b6a14610c4157600080fd5b806396ec39e8116101c7578063af1ea7951161018b578063af1ea79514610aa4578063aff2faa314610adc578063b1bae47c14610afc578063b291ec1314610b1c578063b430225814610b3257600080fd5b806396ec39e814610a04578063983b2d5614610a24578063a33995e514610a44578063a6d7bd8214610a64578063aa271e1a14610a8457600080fd5b806388aa0a521161020e57806388aa0a52146109705780638cc9d389146109865780638da5cb5b146109a65780638fe85fe7146109c4578063946ce8cd146109e457600080fd5b8063768ebb121461074857806379ba50971461090b5780637da5f0da1461092057806386489ba91461095057600080fd5b80634d188f321161035b5780636060663e116102d857806367f8a7181161029c57806367f8a71814610890578063694c12ce146108a35780636a030fc3146108c35780636d75b9ee146108e3578063715018a6146108f657600080fd5b80636060663e146107f85780636136c21f14610818578063613e2e1e14610845578063639080201461085a5780636600203d1461087057600080fd5b806356bf79461161031f57806356bf79461461075e57806359bb91891461077e5780635a8d80b8146107935780635c975abb146107b35780635d6464ba146107cb57600080fd5b80634d188f32146106e05780634f1ef2861461070057806352d1902d14610713578063530e784f1461072857806354509b971461074857600080fd5b806331f7d964116103e957806341f3ec11116103ad57806341f3ec111461061f5780634334614a1461066057806343b937071461068057806345cc5890146106a05780634be50e57146106c057600080fd5b806331f7d964146105975780633237c158146105ac5780633659cfe6146105bf57806338463cff146105df5780634113e5ca146105ff57600080fd5b80631a2783f2116104305780631a2783f2146104f257806324f6a71e1461052a5780632630c12f146105405780632f5b04ac146105605780633092afd51461057757600080fd5b806302846858146104625780630c42cbc9146104845780631697565b146104ac5780631775765f146104dc575b600080fd5b34801561046e57600080fd5b5061048261047d366004614e52565b610e3e565b005b34801561049057600080fd5b50610499601281565b6040519081526020015b60405180910390f35b3480156104b857600080fd5b506104cc6104c7366004614f86565b610ebd565b60405190151581526020016104a3565b3480156104e857600080fd5b5061049960065481565b3480156104fe57600080fd5b50600054610512906001600160a01b031681565b6040516001600160a01b0390911681526020016104a3565b34801561053657600080fd5b5061049960085481565b34801561054c57600080fd5b50600254610512906001600160a01b031681565b34801561056c57600080fd5b506104996205460081565b34801561058357600080fd5b50610482610592366004614e52565b6110dc565b3480156105a357600080fd5b50610512600181565b6104cc6105ba3660046153ad565b611152565b3480156105cb57600080fd5b506104826105da366004614e52565b611288565b3480156105eb57600080fd5b506104996105fa36600461516f565b611351565b34801561060b57600080fd5b50600354610512906001600160a01b031681565b34801561062b57600080fd5b5061051261063a366004615258565b8051602081830181018051600f825292820191909301209152546001600160a01b031681565b34801561066c57600080fd5b506104cc61067b366004614e52565b611788565b34801561068c57600080fd5b506104cc61069b366004614f14565b6117d6565b3480156106ac57600080fd5b506104cc6106bb366004614e52565b611a7a565b3480156106cc57600080fd5b506104826106db366004614e52565b611cdf565b3480156106ec57600080fd5b506105126106fb3660046153ad565b611cf0565b61048261070e366004614ec6565b611d1a565b34801561071f57600080fd5b50610499611dd4565b34801561073457600080fd5b50610482610743366004614e52565b611e88565b34801561075457600080fd5b5061049961271081565b34801561076a57600080fd5b506104cc610779366004614e52565b611e99565b34801561078a57600080fd5b506104cc612004565b34801561079f57600080fd5b50600154610512906001600160a01b031681565b3480156107bf57600080fd5b5060eb5460ff166104cc565b3480156107d757600080fd5b506107eb6107e6366004614e52565b612137565b6040516104a39190615677565b34801561080457600080fd5b506104826108133660046153ad565b612209565b34801561082457600080fd5b50610499610833366004614e52565b600d6020526000908152604090205481565b34801561085157600080fd5b5061048261221a565b34801561086657600080fd5b5061049960045481565b34801561087c57600080fd5b5061048261088b3660046153ad565b61222c565b6104cc61089e3660046151b9565b61223d565b3480156108af57600080fd5b506104996108be366004614e52565b61240f565b3480156108cf57600080fd5b506104cc6108de366004614e52565b6124b3565b6104cc6108f1366004614f14565b61252b565b34801561090257600080fd5b506104826126c5565b34801561091757600080fd5b506104826126cd565b34801561092c57600080fd5b506104cc61093b366004614e52565b600e6020526000908152604090205460ff1681565b34801561095c57600080fd5b5061048261096b366004614e6e565b612744565b34801561097c57600080fd5b5061049960095481565b34801561099257600080fd5b506104996109a1366004614e52565b6128d8565b3480156109b257600080fd5b506055546001600160a01b0316610512565b3480156109d057600080fd5b506104826109df3660046153ad565b612989565b3480156109f057600080fd5b506104826109ff3660046153ad565b61299a565b348015610a1057600080fd5b506104cc610a1f366004614f14565b6129ab565b348015610a3057600080fd5b50610482610a3f366004614e52565b612c80565b348015610a5057600080fd5b50610482610a5f366004614fe4565b612cfa565b348015610a7057600080fd5b50610499610a7f36600461510a565b612e1d565b348015610a9057600080fd5b506104cc610a9f366004614e52565b61318e565b348015610ab057600080fd5b50610ac4610abf366004614e52565b6131d7565b6040516104a39c9b9a9998979695949392919061568a565b348015610ae857600080fd5b506104cc610af73660046150ca565b613362565b348015610b0857600080fd5b50610499610b17366004614f14565b6133b0565b348015610b2857600080fd5b5061049960075481565b348015610b3e57600080fd5b506104cc613416565b348015610b5357600080fd5b5061049960055481565b348015610b6957600080fd5b506104cc610b78366004614f3f565b6134d1565b348015610b8957600080fd5b506104996130d481565b348015610b9f57600080fd5b50601854601954601a54601b54601c54601d54601e54601f54602054602154610be0996001600160a01b03908116998116988116978116961694939291908a565b604080516001600160a01b039b8c168152998b1660208b0152978a1697890197909752948816606088015296909216608086015260a085015260c084015260e0830193909352610100820192909252610120810191909152610140016104a3565b348015610c4d57600080fd5b50610512610c5c3660046150ca565b613684565b348015610c6d57600080fd5b50601254601354601454601554601654601754610c959594939291906001600160a01b031686565b60408051968752602087019590955293850192909252606084015260808301526001600160a01b031660a082015260c0016104a3565b348015610cd757600080fd5b50610482610ce63660046153ad565b6136b9565b348015610cf757600080fd5b50610499610d06366004614e52565b6136ca565b348015610d1757600080fd5b50610512610d263660046153ad565b613748565b348015610d3757600080fd5b506087546001600160a01b0316610512565b348015610d5557600080fd5b506104cc613759565b348015610d6a57600080fd5b5061048261388b565b348015610d7f57600080fd5b50610499600a5481565b348015610d9557600080fd5b50610482610da4366004614e52565b61389b565b348015610db557600080fd5b50610482610dc4366004614e52565b6138ac565b348015610dd557600080fd5b50610482610de4366004614e52565b6138bd565b348015610df557600080fd5b50610482610e04366004614e52565b61392e565b348015610e1557600080fd5b50610499610e24366004614e52565b6139a8565b348015610e3557600080fd5b506104cc6139f9565b610e46613a19565b610e4f81611788565b610e745760405162461bcd60e51b8152600401610e6b906158c5565b60405180910390fd5b6001600160a01b038116600081815260116020526040808220805460ff19169055517f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e9190a250565b6000610ec7613a73565b610ecf613acd565b6001546001600160a01b0316336001600160a01b031614610f025760405162461bcd60e51b8152600401610e6b90615954565b61271060085484610f139190615e86565b610f1d9190615e66565b610f279084615e4e565b6001600160a01b0387166000908152600c6020526040808220905163051108e560e21b81529295509091738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c191631444239491610f8191906018908b908a90600401615d04565b60206040518083038186803b158015610f9957600080fd5b505af4158015610fad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd191906150b2565b6001600160a01b038089166000908152600c602052604090206007015491925063010000009091041661102284826110098a89615e4e565b6110138987615e86565b61101d9190615e66565b613b13565b600061102e8887615e4e565b6110388785615e86565b6110429190615e66565b61104c9084615ea5565b9050611059878383613b13565b6040805182815260208101889052908101849052426060820152600160808201526001600160a01b0383811660a083015280871691898216918c16907f19fa34b3e5133b7a17b70edf99c60c14a8a0bc7b475725d3065bd1734dad510a9060c00160405180910390a4600193505050506110d3600160b955565b95945050505050565b6110e4613a19565b6110ed8161318e565b6111095760405162461bcd60e51b8152600401610e6b906158c5565b6001600160a01b038116600081815260106020526040808220805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a250565b600061115c613a73565b336000908152600c602052604090819020905163fb9b406760e01b8152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c19163fb9b4067916111aa91906012906018908890600401615c63565b60006040518083038186803b1580156111c257600080fd5b505af41580156111d6573d6000803e3d6000fd5b5050505061120d6111e43390565b336000908152600c6020526040902060070154630100000090046001600160a01b031684613b13565b336000818152600c602052604090819020600381015460079091015491517f7e127ed6cd4824df6bad0d752984e5bd3309b4f3c9fa7e18d19637b86e1e86a39261126e9287929091429163010000009091046001600160a01b031690615852565b60405180910390a2506001611283600160b955565b919050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112d15760405162461bcd60e51b8152600401610e6b90615908565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611303613b4f565b6001600160a01b0316146113295760405162461bcd60e51b8152600401610e6b90615999565b61133281613b6b565b6040805160008082526020820190925261134e91839190613b73565b50565b600081600081116113745760405162461bcd60e51b8152600401610e6b90615ab5565b61137c613acd565b61138533611788565b6113d15760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a206f6e6c79206275726e6572732063616e206275726e00006044820152606401610e6b565b6000600f86866040516113e59291906155a7565b908152604051908190036020019020546000546001600160a01b039182169250166323b872dd6114123390565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101879052606401602060405180830381600087803b15801561146057600080fd5b505af1158015611474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114989190615098565b6114e45760405162461bcd60e51b815260206004820152601c60248201527f4c6f636b6572733a207472616e7366657246726f6d206661696c6564000000006044820152606401610e6b565b6000612710600454866114f79190615e86565b6115019190615e66565b9050600061150f8287615ea5565b6001600160a01b0384166000908152600c60205260409020600401549091508181101561157e5760405162461bcd60e51b815260206004820152601b60248201527f4c6f636b6572733a20696e73756666696369656e742066756e647300000000006044820152606401610e6b565b6115888282615ea5565b6001600160a01b038581166000908152600c602052604080822060049081019490945590549051630852cd8d60e31b815292830185905216906342966c6890602401602060405180830381600087803b1580156115e457600080fd5b505af11580156115f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161c9190615098565b61165f5760405162461bcd60e51b8152602060048201526014602482015273131bd8dad95c9cce88189d5c9b8819985a5b195960621b6044820152606401610e6b565b60005460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529091169063a9059cbb90604401602060405180830381600087803b1580156116ad57600080fd5b505af11580156116c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e59190615098565b6117315760405162461bcd60e51b815260206004820152601960248201527f4c6f636b6572733a206c6f636b6572466565206661696c6564000000000000006044820152606401610e6b565b6040805188815260208101859052428183015290516001600160a01b038616917f66fb54322c407b04a077a306e72cdd780f0f374ba5dac9f6901a56a6255bc34a919081900360600190a250979650505050505050565b6000816001600160a01b0381166117b15760405162461bcd60e51b8152600401610e6b90615ae5565b6001600160a01b03831660009081526011602052604090205460ff1691505b50919050565b60006117e0613a73565b6117e8613acd565b826001600160a01b03811661180f5760405162461bcd60e51b8152600401610e6b90615ae5565b6001600160a01b0384166000908152600c60205260408082209051637f240b8b60e11b8152600481019190915260248101859052738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c19063fe4817169060440160206040518083038186803b15801561187a57600080fd5b505af415801561188e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b291906150b2565b6000549091506001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401602060405180830381600087803b15801561191557600080fd5b505af1158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194d9190615098565b50600054604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c6890602401602060405180830381600087803b15801561199457600080fd5b505af11580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190615098565b506119fc336001600160a01b038088166000908152600c6020526040902060070154630100000090041686613b13565b6001600160a01b038581166000818152600c60205260409081902060070154905133937f679883f8ee67472398e6ef47c09a7f5966b171bd2bcab5f0779aebcbcbdf869092611a5c928a9288924292630100000090910490911690615852565b60405180910390a3600192505050611a74600160b955565b92915050565b6000611a84613a73565b611a8c613a19565b816001600160a01b038116611ab35760405162461bcd60e51b8152600401610e6b90615ae5565b6001600160a01b0383166000908152600c602052604090206007810154610100900460ff16611b1a5760405162461bcd60e51b8152602060048201526013602482015272131bd8dad95c9cce881b9bc81c995c5d595cdd606a1b6044820152606401610e6b565b604051600090600f90611b2e9084906155d3565b908152604051908190036020019020546001600160a01b031614611b945760405162461bcd60e51b815260206004820152601c60248201527f4c6f636b6572733a2075736564206c6f636b696e6720736372697074000000006044820152606401610e6b565b60078101805461ffff19166001908117909155600954611bb49190615ea5565b600955600a54611bc5906001615e4e565b600a556040518490600f90611bdb9084906155d3565b90815260405190819003602001812080546001600160a01b039384166001600160a01b03199091161790556328e5180160e11b81526101816004820152600b60248201529085166044820152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c1906351ca30029060640160006040518083038186803b158015611c5e57600080fd5b505af4158015611c72573d6000803e3d6000fd5b50505050600381015460078201546040516001600160a01b03878116937f50ec2de60da128f96d3f6db676c0041fb4e25e02a764b38ff0c40d10f76579d393611cc79387934292630100000090041690615748565b60405180910390a2600192505050611283600160b955565b611ce7613a19565b61134e81613ced565b600b8181548110611d0057600080fd5b6000918252602090912001546001600160a01b0316905081565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611d635760405162461bcd60e51b8152600401610e6b90615908565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611d95613b4f565b6001600160a01b031614611dbb5760405162461bcd60e51b8152600401610e6b90615999565b611dc482613b6b565b611dd082826001613b73565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611e745760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610e6b565b50600080516020615f6c8339815191525b90565b611e90613a19565b61134e81613d88565b6000816001600160a01b038116611ec25760405162461bcd60e51b8152600401610e6b90615ae5565b604051631f14a8d360e11b8152600c600482015261018160248201526001600160a01b0384166044820152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c190633e2951a69060640160206040518083038186803b158015611f2457600080fd5b505af4158015611f38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5c9190615098565b8015611ffd5750604051631f14a8d360e11b8152600c6004820152600b60248201526001600160a01b0384166044820152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c190633e2951a6906064015b60206040518083038186803b158015611fc557600080fd5b505af4158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd9190615098565b9392505050565b600061200e613a73565b336000908152600c602052604090206007015460ff166120405760405162461bcd60e51b8152600401610e6b90615a26565b336000908152600c6020526040902060080154156120ae5760405162461bcd60e51b815260206004820152602560248201527f4c6f636b6572733a206c6f636b65722068617320616c72656164792072657175604482015264195cdd195960da1b6064820152608401610e6b565b6120b942603c615e4e565b336000818152600c6020526040908190206008810184905560038101546004820154600783015493517f49510c1de57fb1f357a2444587ea601cc3b11d77ccb192154c8378c2f84b634d946121229493929163010000009091046001600160a01b031690615748565b60405180910390a3506001611e85600160b955565b6060816001600160a01b0381166121605760405162461bcd60e51b8152600401610e6b90615ae5565b6001600160a01b0383166000908152600c60205260409020805461218390615ee8565b80601f01602080910402602001604051908101604052809291908181526020018280546121af90615ee8565b80156121fc5780601f106121d1576101008083540402835291602001916121fc565b820191906000526020600020905b8154815290600101906020018083116121df57829003601f168201915b5050505050915050919050565b612211613a19565b61134e81613e23565b612222613a19565b61222a613eb2565b565b612234613a19565b61134e81613f04565b6000612247613a73565b738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c163b926d8f0600c60126018600f8d8d6040516122799291906155a7565b908152604051908190036020018120546001600160e01b031960e087901b1682526122b9949392916001600160a01b03909116908d908a90600401615876565b60006040518083038186803b1580156122d157600080fd5b505af41580156122e5573d6000803e3d6000fd5b505050506101816122f33390565b815460018082018455600093845260209093200180546001600160a01b0319166001600160a01b039290921691909117905560095461233191615e4e565b600955604051634777cda360e01b8152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c190634777cda39061237a90600c908c908c908c908c908c908c908c90600401615780565b60006040518083038186803b15801561239257600080fd5b505af41580156123a6573d6000803e3d6000fd5b505050506123b13390565b6001600160a01b03167fae6c2e5daace63bff62e385a7d762007f0356fadceb83713c9a26d9b6f8e52a0898989866040516123ef9493929190615642565b60405180910390a2506001612404600160b955565b979650505050505050565b6001600160a01b0381166000908152600c60205260408082209051631d35425160e11b8152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c191633a6a84a2916124639190601290601890600401615c41565b60206040518083038186803b15801561247b57600080fd5b505af415801561248f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7491906150b2565b6000816001600160a01b0381166124dc5760405162461bcd60e51b8152600401610e6b90615ae5565b6001600160a01b0383166000908152600c602052604090819020905163d3f5e2e960e01b8152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c19163d3f5e2e991611fad9190600401615b67565b6000612535613a73565b81600081116125565760405162461bcd60e51b8152600401610e6b90615ab5565b6001600160a01b038481166000908152600c60205260409020600701546301000000900416600114156125c7578234146125c75760405162461bcd60e51b81526020600482015260126024820152714c6f636b6572733a206d73672076616c756560701b6044820152606401610e6b565b6001600160a01b0384166000908152600c6020526040908190209051635b8914e960e01b8152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c191635b8914e99161261b91906012908890600401615ccc565b60006040518083038186803b15801561263357600080fd5b505af4158015612647573d6000803e3d6000fd5b5050506001600160a01b038086166000818152600c602052604090819020600381015460079091015491519294507f1a48dbe0e8978a04ac30e84ff5b757b6b5ab687139dc261d0a12dd03598782b8936126ae938993429263010000009091041690615852565b60405180910390a26001915050611a74600160b955565b61222a613a19565b60875433906001600160a01b0316811461273b5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610e6b565b61134e81613f9c565b602254610100900460ff16158080156127645750602254600160ff909116105b8061277e5750303b15801561277e575060225460ff166001145b6127e15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e6b565b6022805460ff191660011790558015612804576022805461ff0019166101001790555b61280c613fb5565b612814613fe4565b61281c614013565b612824614042565b61282d87613ced565b61283686613d88565b61283f85613e23565b61284884614069565b61285183613f04565b61285a826140f8565b612710601281815560138290556130d4601455601591909155601655601780546001600160a01b031916600117905580156128cf576022805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6000816001600160a01b0381166129015760405162461bcd60e51b8152600401610e6b90615ae5565b6040516299413760e01b8152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c1906299413790612939906018908790600401615d6b565b60206040518083038186803b15801561295157600080fd5b505af4158015612965573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd91906150b2565b612991613a19565b61134e816140f8565b6129a2613a19565b61134e81614069565b60006129b5613a73565b6129bd613acd565b826001600160a01b0381166129e45760405162461bcd60e51b8152600401610e6b90615ae5565b8260008111612a055760405162461bcd60e51b8152600401610e6b90615ab5565b6001600160a01b0385166000908152600c602052604080822090516308878a6f60e01b8152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c1916308878a6f91612a5b91906012906018908b90600401615c63565b60206040518083038186803b158015612a7357600080fd5b505af4158015612a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aab91906150b2565b6001600160a01b0387166000908152600c602052604081206003810180549394509092889290612adc908490615ea5565b9091555050600054612af9906001600160a01b0316333085614160565b600154600054612b16916001600160a01b039182169116846141d1565b600180549082015460405163218a4edd60e11b81526000926001600160a01b0316916343149dba91612b57918791600288019160ff16908890600401615d93565b602060405180830381600087803b158015612b7157600080fd5b505af1158015612b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba991906150b2565b11612bf65760405162461bcd60e51b815260206004820152601d60248201527f4c6f636b6572733a206275726e7420616d6f756e74206973207a65726f0000006044820152606401610e6b565b612c15336007830154630100000090046001600160a01b031688613b13565b600781015460405133916001600160a01b038a8116927f6e059c6d0176feeba3073a3df607194b29bfb0e6c640512734976a4298c94bce92612c66928c928992429263010000009091041690615852565b60405180910390a36001945050505050611a74600160b955565b612c88613a19565b612c918161318e565b15612cae5760405162461bcd60e51b8152600401610e6b906159e5565b6001600160a01b038116600081815260106020526040808220805460ff19166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a250565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415612d435760405162461bcd60e51b8152600401610e6b90615908565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612d75613b4f565b6001600160a01b031614612d9b5760405162461bcd60e51b8152600401610e6b90615999565b612da3613a19565b60095460405163652e98b960e01b8152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c19163652e98b991612dea91600c91600d9161018191600b9189916004016157de565b60006040518083038186803b158015612e0257600080fd5b505af4158015612e16573d6000803e3d6000fd5b5050505050565b6000612e27613a73565b612e2f613acd565b612e383361318e565b612e845760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a206f6e6c79206d696e746572732063616e206d696e7400006044820152606401610e6b565b836001600160a01b038116612eab5760405162461bcd60e51b8152600401610e6b90615ae5565b8260008111612ecc5760405162461bcd60e51b8152600401610e6b90615ab5565b6000600f8989604051612ee09291906155a7565b908152604051908190036020019020546001600160a01b031690506000612f06826136ca565b905085811015612f585760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a20696e73756666696369656e7420636170616369747900006044820152606401610e6b565b612f61826124b3565b612fa35760405162461bcd60e51b81526020600482015260136024820152724c6f636b6572733a206e6f742061637469766560681b6044820152606401610e6b565b6001600160a01b0382166000908152600c602052604081206004018054889290612fce908490615e4e565b909155505060045460009061271090612fe79089615e86565b612ff19190615e66565b90508015613081576000546040516340c10f1960e01b81526001600160a01b03858116600483015260248201849052909116906340c10f1990604401602060405180830381600087803b15801561304757600080fd5b505af115801561305b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307f9190615098565b505b6000546001600160a01b03166340c10f198a61309d848b615ea5565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156130e357600080fd5b505af11580156130f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311b9190615098565b5060408051898152602081018990529081018290524260608201526001600160a01b03808b1691908516907f80d7e09e4dcc6445bb161b259f25b2b87f0f7446139023346d498e0fe9ddbdcf9060800160405180910390a361317d8188615ea5565b955050505050506110d3600160b955565b6000816001600160a01b0381166131b75760405162461bcd60e51b8152600401610e6b90615ae5565b50506001600160a01b031660009081526010602052604090205460ff1690565b600c602052600090815260409020805481906131f290615ee8565b80601f016020809104026020016040519081016040528092919081815260200182805461321e90615ee8565b801561326b5780601f106132405761010080835404028352916020019161326b565b820191906000526020600020905b81548152906001019060200180831161324e57829003601f168201915b5050506001840154600285018054949560ff90921694919350915061328f90615ee8565b80601f01602080910402602001604051908101604052809291908181526020018280546132bb90615ee8565b80156133085780601f106132dd57610100808354040283529160200191613308565b820191906000526020600020905b8154815290600101906020018083116132eb57829003601f168201915b50505060038401546004850154600586015460068701546007880154600890980154969793969295509093509160ff808216926101008304821692620100008104909216916001600160a01b03630100000090910416908c565b6000600c6000600f858560405161337a9291906155a7565b9081526040805160209281900383019020546001600160a01b0316835290820192909252016000206007015460ff169392505050565b6001600160a01b038083166000908152600c60205260408082206007015490516316a1bdd760e21b81529192738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c192635a86f75c9261293992601292601892899263010000009091041690600401615d2d565b6000613420613a73565b336000908152600c602052604090206007015460ff166134525760405162461bcd60e51b8152600401610e6b90615a26565b336000818152600c6020526040808220600881019290925560038201546004830154600784015492517f86616b52562e8133dabdcd65f7e5dde6a459f67b19fc506f5859d9c15c3419aa946134bc949093929163010000009091046001600160a01b031690615748565b60405180910390a2506001611e85600160b955565b60006134db613a73565b6134e3613acd565b6001546001600160a01b0316336001600160a01b0316146135165760405162461bcd60e51b8152600401610e6b90615954565b6001600160a01b0385166000908152600c602052604080822090516336a24a7b60e01b81528291738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c1916336a24a7b9161356f916012906018908c908b90600401615c95565b604080518083038186803b15801561358657600080fd5b505af415801561359a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135be91906153c5565b6001600160a01b03808a166000908152600c60205260409020600701549294509092506301000000909104166135f5868285613b13565b306001600160a01b03878116908a167f19fa34b3e5133b7a17b70edf99c60c14a8a0bc7b475725d3065bd1734dad510a86896136318289615e4e565b60408051938452602084019290925290820152426060820152600060808201526001600160a01b03861660a082015260c00160405180910390a46001935050505061367c600160b955565b949350505050565b6000600f83836040516136989291906155a7565b908152604051908190036020019020546001600160a01b0316905092915050565b6136c1613a19565b61134e816142f5565b6000816001600160a01b0381166136f35760405162461bcd60e51b8152600401610e6b90615ae5565b6001600160a01b0383166000908152600c60205260409081902090516302a47d9560e21b8152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c191630a91f654916129399190601290601890600401615c41565b6101818181548110611d0057600080fd5b6000613763613a73565b60408051637c3c1e8960e11b8152600c600482015261018160248201523360448201529051600091738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c19163f8783d12916064808201928692909190829003018186803b1580156137c657600080fd5b505af41580156137da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613802919081019061528b565b905060016009546138139190615ea5565b60095561382a338261014001518360600151613b13565b336001600160a01b03167f1039d489522ec9ef0d32866fc7760dd589820e30e335a26eacde418b9b9264988260000151836060015184610140015160405161387493929190615715565b60405180910390a26001915050611e85600160b955565b613893613a19565b61222a61435d565b6138a3613a19565b61134e8161439a565b6138b4613a19565b61134e816144d8565b6138c5613a19565b608780546001600160a01b0383166001600160a01b031990911681179091556138f66055546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b613936613a19565b61393f81611788565b1561395c5760405162461bcd60e51b8152600401610e6b906159e5565b6001600160a01b038116600081815260116020526040808220805460ff19166001179055517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a250565b6001600160a01b0381166000908152600c60205260408082209051638c230aed60e01b8152738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c191638c230aed916124639190601890600401615cef565b6000613a03613a73565b613a0c33614573565b506001611e85600160b955565b6055546001600160a01b0316331461222a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610e6b565b600260b9541415613ac65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610e6b565b600260b955565b60eb5460ff161561222a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610e6b565b6001600160a01b03821660011415613b3457613b2f838261468a565b505050565b613b2f6001600160a01b03831684836147a3565b600160b955565b600080516020615f6c833981519152546001600160a01b031690565b61134e613a19565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613ba657613b2f836147d3565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613bdf57600080fd5b505afa925050508015613c0f575060408051601f3d908101601f19168201909252613c0c918101906150b2565b60015b613c725760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610e6b565b600080516020615f6c8339815191528114613ce15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610e6b565b50613b2f83838361486f565b806001600160a01b038116613d145760405162461bcd60e51b8152600401610e6b90615ae5565b600054604080516001600160a01b03928316815291841660208301527ff1253c5d33616f62c4ae5b08481b0df4900a6eb1391d7d96098bf578bb314c52910160405180910390a150600080546001600160a01b039092166001600160a01b0319928316811790915560188054909216179055565b806001600160a01b038116613daf5760405162461bcd60e51b8152600401610e6b90615ae5565b600254604080516001600160a01b03928316815291841660208301527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22910160405180910390a150600280546001600160a01b039092166001600160a01b03199283168117909155601b8054909216179055565b6006548111613e6c5760405162461bcd60e51b81526020600482015260156024820152742637b1b5b2b9399d1036bab9ba1021a9101f10262960591b6044820152606401610e6b565b60055460408051918252602082018390527f1e29d1b5c8926360f3ac632d884775772b07f31fec4077d433e58ce823f91347910160405180910390a16005819055601e55565b613eba614894565b60eb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b612710811115613f565760405162461bcd60e51b815260206004820152601b60248201527f4c6f636b6572733a20696e76616c6964206c6f636b65722066656500000000006044820152606401610e6b565b60045460408051918252602082018390527f44c6802691f6adea249930369a511db979a5e9a3603bdb37ceee1036da80e980910160405180910390a16004819055601d55565b608780546001600160a01b031916905561134e816148dd565b602254610100900460ff16613fdc5760405162461bcd60e51b8152600401610e6b90615b1c565b61222a61492f565b602254610100900460ff1661400b5760405162461bcd60e51b8152600401610e6b90615b1c565b61222a61495f565b602254610100900460ff1661403a5760405162461bcd60e51b8152600401610e6b90615b1c565b61222a614986565b602254610100900460ff1661222a5760405162461bcd60e51b8152600401610e6b90615b1c565b80600554116140b25760405162461bcd60e51b81526020600482015260156024820152742637b1b5b2b9399d1036bab9ba1021a9101f10262960591b6044820152606401610e6b565b60065460408051918252602082018390527f883242c2a857ca527a432dfca231b1e49233fde2a96802809a0f3866e9f19e13910160405180910390a16006819055601f55565b61271081111561411a5760405162461bcd60e51b8152600401610e6b90615a72565b60075460408051918252602082018390527f5e4dd01049cdfe5a081b404bff8e27de919fd9c8ae2145007e0921ec227f207a910160405180910390a16007819055602055565b6040516001600160a01b03808516602483015283166044820152606481018290526141cb9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526149b9565b50505050565b80158061425a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561422057600080fd5b505afa158015614234573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061425891906150b2565b155b6142c55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610e6b565b6040516001600160a01b038316602482015260448101829052613b2f90849063095ea7b360e01b90606401614194565b6127108111156143175760405162461bcd60e51b8152600401610e6b90615a72565b60085460408051918252602082018390527f38c2a2bc8aa6ec8cff42ba0a8b737fa98bed6ae113936d79509d03f0134029f4910160405180910390a16008819055602155565b614365613acd565b60eb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613ee73390565b806001600160a01b0381166143c15760405162461bcd60e51b8152600401610e6b90615ae5565b600154604080516001600160a01b03928316815291841660208301527fd86d51326f3c88ea5365fba597a57273ae555e44f4b11658da952320d0beaa75910160405180910390a16001546040516001600160a01b03909116907f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e90600090a2600180546001600160a01b03908116600090815260116020526040808220805460ff1916905583549286166001600160a01b0319938416811790945560198054909316841790925590517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a25050600180546001600160a01b03166000908152601160205260409020805460ff19169091179055565b806001600160a01b0381166144ff5760405162461bcd60e51b8152600401610e6b90615ae5565b600354604080516001600160a01b03928316815291841660208301527ff70b901dcbac064cf4110833cb5adec074e667c8fa7447b3267a9818e1214dfc910160405180910390a150600380546001600160a01b039092166001600160a01b03199283168117909155601c8054909216179055565b604051631e674c6d60e21b8152600090738F7E74bC8f1B985D5CD9A8C2189aF7802666a1c19063799d31b4906145b690600c90600f90600b908890600401615852565b60006040518083038186803b1580156145ce57600080fd5b505af41580156145e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261460a919081019061528b565b90506001600a5461461b9190615ea5565b600a556101408101516060820151614634918491613b13565b816001600160a01b03167f8295084aee74b95a5495daabd14fbf1aa72875c5e8fe52b204fbacabf9a85b288260000151836060015184610140015160405161467e93929190615715565b60405180910390a25050565b804710156146da5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610e6b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614727576040519150601f19603f3d011682016040523d82523d6000602084013e61472c565b606091505b5050905080613b2f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610e6b565b6040516001600160a01b038316602482015260448101829052613b2f90849063a9059cbb60e01b90606401614194565b6001600160a01b0381163b6148405760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610e6b565b600080516020615f6c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61487883614a8e565b6000825111806148855750805b15613b2f576141cb8383614ace565b60eb5460ff1661222a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610e6b565b605580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b602254610100900460ff166149565760405162461bcd60e51b8152600401610e6b90615b1c565b61222a33613f9c565b602254610100900460ff16613b485760405162461bcd60e51b8152600401610e6b90615b1c565b602254610100900460ff166149ad5760405162461bcd60e51b8152600401610e6b90615b1c565b60eb805460ff19169055565b6000614a0e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614bb99092919063ffffffff16565b9050805160001480614a2f575080806020019051810190614a2f9190615098565b613b2f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e6b565b614a97816147d3565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b614b365760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610e6b565b600080846001600160a01b031684604051614b5191906155b7565b600060405180830381855af49150503d8060008114614b8c576040519150601f19603f3d011682016040523d82523d6000602084013e614b91565b606091505b50915091506110d38282604051806060016040528060278152602001615f8c60279139614bc8565b606061367c8484600085614be1565b60608315614bd7575081611ffd565b611ffd8383614cb1565b606082471015614c425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610e6b565b600080866001600160a01b03168587604051614c5e91906155b7565b60006040518083038185875af1925050503d8060008114614c9b576040519150601f19603f3d011682016040523d82523d6000602084013e614ca0565b606091505b509150915061240487838387614cdb565b815115614cc15781518083602001fd5b8060405162461bcd60e51b8152600401610e6b9190615677565b60608315614d47578251614d40576001600160a01b0385163b614d405760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e6b565b508161367c565b61367c8383614cb1565b805161128381615f49565b8051801515811461128357600080fd5b60008083601f840112614d7d578182fd5b50813567ffffffffffffffff811115614d94578182fd5b602083019150836020828501011115614dac57600080fd5b9250929050565b600082601f830112614dc3578081fd5b8135614dd6614dd182615e26565b615df5565b818152846020838601011115614dea578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112614e14578081fd5b8151614e22614dd182615e26565b818152846020838601011115614e36578283fd5b61367c826020830160208701615ebc565b805161128381615f5e565b600060208284031215614e63578081fd5b8135611ffd81615f49565b60008060008060008060c08789031215614e86578182fd5b8635614e9181615f49565b95506020870135614ea181615f49565b95989597505050506040840135936060810135936080820135935060a0909101359150565b60008060408385031215614ed8578182fd5b8235614ee381615f49565b9150602083013567ffffffffffffffff811115614efe578182fd5b614f0a85828601614db3565b9150509250929050565b60008060408385031215614f26578182fd5b8235614f3181615f49565b946020939093013593505050565b60008060008060808587031215614f54578384fd5b8435614f5f81615f49565b9350602085013592506040850135614f7681615f49565b9396929550929360600135925050565b600080600080600060a08688031215614f9d578283fd5b8535614fa881615f49565b9450602086013593506040860135614fbf81615f49565b9250606086013591506080860135614fd681615f49565b809150509295509295909350565b60006020808385031215614ff6578182fd5b823567ffffffffffffffff8082111561500d578384fd5b818501915085601f830112615020578384fd5b81358181111561503257615032615f33565b8060051b9150615043848301615df5565b8181528481019084860184860187018a101561505d578788fd5b8795505b8386101561508b578035945061507685615f49565b84835260019590950194918601918601615061565b5098975050505050505050565b6000602082840312156150a9578081fd5b611ffd82614d5c565b6000602082840312156150c3578081fd5b5051919050565b600080602083850312156150dc578182fd5b823567ffffffffffffffff8111156150f2578283fd5b6150fe85828601614d6c565b90969095509350505050565b600080600080600060808688031215615121578283fd5b853567ffffffffffffffff811115615137578384fd5b61514388828901614d6c565b909650945050602086013561515781615f49565b94979396509394604081013594506060013592915050565b600080600060408486031215615183578081fd5b833567ffffffffffffffff811115615199578182fd5b6151a586828701614d6c565b909790965060209590950135949350505050565b600080600080600080600060a0888a0312156151d3578485fd5b873567ffffffffffffffff808211156151ea578687fd5b6151f68b838c01614d6c565b909950975060208a0135965060408a0135915061521282615f5e565b90945060608901359080821115615227578283fd5b506152348a828b01614d6c565b909450925050608088013561524881615f49565b8091505092959891949750929550565b600060208284031215615269578081fd5b813567ffffffffffffffff81111561527f578182fd5b61367c84828501614db3565b60006020828403121561529c578081fd5b815167ffffffffffffffff808211156152b3578283fd5b9083019061018082860312156152c7578283fd5b6152cf615dcb565b8251828111156152dd578485fd5b6152e987828601614e04565b8252506152f860208401614e47565b602082015260408301518281111561530e578485fd5b61531a87828601614e04565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261535460e08401614d5c565b60e08201526101009150615369828401614d5c565b82820152610120915061537d828401614d5c565b828201526101409150615391828401614d51565b9181019190915261016091820151918101919091529392505050565b6000602082840312156153be578081fd5b5035919050565b600080604083850312156153d7578182fd5b505080516020909101519092909150565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452615429816020860160208601615ebc565b601f01601f19169290920160200192915050565b6000815461544a81615ee8565b808552602060018381168015615467576001811461547b576154a9565b60ff198516888401526040880195506154a9565b866000528260002060005b858110156154a15781548a8201860152908301908401615486565b890184019650505b505050505092915050565b600681106154d257634e487b7160e01b600052602160045260246000fd5b9052565b8054825260018101546020830152600281015460408301526003810154606083015260048101546080830152600501546001600160a01b031660a090910152565b6155398261552c83546001600160a01b031690565b6001600160a01b03169052565b60018101546001600160a01b0390811660208401526002820154811660408401526003820154811660608401526004820154166080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009015461012090910152565b8183823760009101908152919050565b600082516155c9818460208701615ebc565b9190910192915050565b60008083546155e181615ee8565b600182811680156155f9576001811461560a57615636565b60ff19841687528287019450615636565b8786526020808720875b8581101561562d5781548a820152908401908201615614565b50505082870194505b50929695505050505050565b6060815260006156566060830186886153e8565b6020830194909452506001600160a01b039190911660409091015292915050565b602081526000611ffd6020830184615411565b6101808152600061569f61018083018f615411565b6156ac602084018f6154b4565b82810360408401526156be818e615411565b606084019c909c525050608081019890985260a088019690965260c087019490945291151560e0860152151561010085015215156101208401526001600160a01b0316610140830152610160909101529392505050565b6060815260006157286060830186615411565b6020830194909452506001600160a01b0391909116604090910152919050565b60808152600061575b608083018761543d565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b88815260c06020820152600061579a60c08301898b6153e8565b8760408401526157ad60608401886154b4565b82810360808401526157c08186886153e8565b91505060018060a01b03831660a08301529998505050505050505050565b600060c082018883526020888185015287604085015286606085015260c0608085015281865180845260e0860191508288019350845b818110156158395784516001600160a01b031683529383019391830191600101615814565b50508093505050508260a0830152979650505050505050565b938452602084019290925260408301526001600160a01b0316606082015260800190565b868152610280810161588b60208301886154d6565b61589860e0830187615517565b6001600160a01b039485166102208301526102408201939093529216610260909201919091529392505050565b60208082526023908201527f4c6f636b6572733a206163636f756e7420646f6573206e6f74206861766520726040820152626f6c6560e81b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b60208082526025908201527f4c6f636b6572733a206d6573736167652073656e646572206973206e6f74206360408201526431a13ab93760d91b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526021908201527f4c6f636b6572733a206163636f756e7420616c72656164792068617320726f6c6040820152606560f81b606082015260800190565b6020808252602c908201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060408201526b3b30b634b2103637b1b5b2b960a11b606082015260800190565b60208082526023908201527f4c6f636b6572733a206c657373207468616e206f7220657175616c20746f203160408201526230302560e81b606082015260800190565b6020808252601690820152754c6f636b6572733a2076616c7565206973207a65726f60501b604082015260600190565b60208082526018908201527f4c6f636b6572733a2061646472657373206973207a65726f0000000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b602081526000610180806020840152615b846101a084018561543d565b600185015460ff16615b9960408601826154b4565b50838103601f19016060850152615bb3816002870161543d565b905060038501546080850152600485015460a0850152600585015460c0850152600685015460e08501526007850154615bf4610100860160ff831615159052565b615c09610120860160ff8360081c1615159052565b615c1e610140860160ff8360101c1615159052565b60181c6001600160a01b0316610160850152600894909401549201919091525090565b8381526102208101615c5660208301856154d6565b61367c60e0830184615517565b8481526102408101615c7860208301866154d6565b615c8560e0830185615517565b8261022083015295945050505050565b8581526102608101615caa60208301876154d6565b615cb760e0830186615517565b61022082019390935261024001529392505050565b8381526101008101615ce160208301856154d6565b8260e0830152949350505050565b8281526101608101611ffd6020830184615517565b8481526101a08101615d196020830186615517565b610160820193909352610180015292915050565b6102408101615d3c82876154d6565b615d4960c0830186615517565b6102008201939093526001600160a01b03919091166102209091015292915050565b6101608101615d7a8285615517565b6001600160a01b03929092166101409190910152919050565b848152608060208201526000615dac608083018661543d565b615db960408401866154b4565b8281036060840152612404818561543d565b604051610180810167ffffffffffffffff81118282101715615def57615def615f33565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715615e1e57615e1e615f33565b604052919050565b600067ffffffffffffffff821115615e4057615e40615f33565b50601f01601f191660200190565b60008219821115615e6157615e61615f1d565b500190565b600082615e8157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615615ea057615ea0615f1d565b500290565b600082821015615eb757615eb7615f1d565b500390565b60005b83811015615ed7578181015183820152602001615ebf565b838111156141cb5750506000910152565b600181811c90821680615efc57607f821691505b602082108114156117d057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461134e57600080fd5b6006811061134e57600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ca59358e7d15d9cec9a24af48a66b927fcc13feef0f8e967c72e4ff29392a77464736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061045d5760003560e01c8063768ebb121161023f578063b4eae1cb11610139578063e30c3978116100b6578063ef3735291161007a578063ef37352914610da9578063f2fde38b14610dc9578063f44637ba14610de9578063fe6bcd7c14610e09578063ffc9f70414610e2957600080fd5b8063e30c397814610d2b578063e85501d814610d49578063e955de4514610d5e578063ed110a9c14610d73578063ee1f1c7014610d8957600080fd5b8063cdcbc879116100fd578063cdcbc87914610c61578063d0d7a25914610ccb578063d5a38a9114610ceb578063d63a73ec14610d0b578063dd0081c71461074857600080fd5b8063b4eae1cb14610b47578063b734de2614610b5d578063bc805d1d14610b7d578063bd60e79414610b93578063c4d10b6a14610c4157600080fd5b806396ec39e8116101c7578063af1ea7951161018b578063af1ea79514610aa4578063aff2faa314610adc578063b1bae47c14610afc578063b291ec1314610b1c578063b430225814610b3257600080fd5b806396ec39e814610a04578063983b2d5614610a24578063a33995e514610a44578063a6d7bd8214610a64578063aa271e1a14610a8457600080fd5b806388aa0a521161020e57806388aa0a52146109705780638cc9d389146109865780638da5cb5b146109a65780638fe85fe7146109c4578063946ce8cd146109e457600080fd5b8063768ebb121461074857806379ba50971461090b5780637da5f0da1461092057806386489ba91461095057600080fd5b80634d188f321161035b5780636060663e116102d857806367f8a7181161029c57806367f8a71814610890578063694c12ce146108a35780636a030fc3146108c35780636d75b9ee146108e3578063715018a6146108f657600080fd5b80636060663e146107f85780636136c21f14610818578063613e2e1e14610845578063639080201461085a5780636600203d1461087057600080fd5b806356bf79461161031f57806356bf79461461075e57806359bb91891461077e5780635a8d80b8146107935780635c975abb146107b35780635d6464ba146107cb57600080fd5b80634d188f32146106e05780634f1ef2861461070057806352d1902d14610713578063530e784f1461072857806354509b971461074857600080fd5b806331f7d964116103e957806341f3ec11116103ad57806341f3ec111461061f5780634334614a1461066057806343b937071461068057806345cc5890146106a05780634be50e57146106c057600080fd5b806331f7d964146105975780633237c158146105ac5780633659cfe6146105bf57806338463cff146105df5780634113e5ca146105ff57600080fd5b80631a2783f2116104305780631a2783f2146104f257806324f6a71e1461052a5780632630c12f146105405780632f5b04ac146105605780633092afd51461057757600080fd5b806302846858146104625780630c42cbc9146104845780631697565b146104ac5780631775765f146104dc575b600080fd5b34801561046e57600080fd5b5061048261047d366004614e52565b610e3e565b005b34801561049057600080fd5b50610499601281565b6040519081526020015b60405180910390f35b3480156104b857600080fd5b506104cc6104c7366004614f86565b610ebd565b60405190151581526020016104a3565b3480156104e857600080fd5b5061049960065481565b3480156104fe57600080fd5b50600054610512906001600160a01b031681565b6040516001600160a01b0390911681526020016104a3565b34801561053657600080fd5b5061049960085481565b34801561054c57600080fd5b50600254610512906001600160a01b031681565b34801561056c57600080fd5b506104996205460081565b34801561058357600080fd5b50610482610592366004614e52565b6110dc565b3480156105a357600080fd5b50610512600181565b6104cc6105ba3660046153ad565b611152565b3480156105cb57600080fd5b506104826105da366004614e52565b611288565b3480156105eb57600080fd5b506104996105fa36600461516f565b611351565b34801561060b57600080fd5b50600354610512906001600160a01b031681565b34801561062b57600080fd5b5061051261063a366004615258565b8051602081830181018051600f825292820191909301209152546001600160a01b031681565b34801561066c57600080fd5b506104cc61067b366004614e52565b611788565b34801561068c57600080fd5b506104cc61069b366004614f14565b6117d6565b3480156106ac57600080fd5b506104cc6106bb366004614e52565b611a7a565b3480156106cc57600080fd5b506104826106db366004614e52565b611cdf565b3480156106ec57600080fd5b506105126106fb3660046153ad565b611cf0565b61048261070e366004614ec6565b611d1a565b34801561071f57600080fd5b50610499611dd4565b34801561073457600080fd5b50610482610743366004614e52565b611e88565b34801561075457600080fd5b5061049961271081565b34801561076a57600080fd5b506104cc610779366004614e52565b611e99565b34801561078a57600080fd5b506104cc612004565b34801561079f57600080fd5b50600154610512906001600160a01b031681565b3480156107bf57600080fd5b5060eb5460ff166104cc565b3480156107d757600080fd5b506107eb6107e6366004614e52565b612137565b6040516104a39190615677565b34801561080457600080fd5b506104826108133660046153ad565b612209565b34801561082457600080fd5b50610499610833366004614e52565b600d6020526000908152604090205481565b34801561085157600080fd5b5061048261221a565b34801561086657600080fd5b5061049960045481565b34801561087c57600080fd5b5061048261088b3660046153ad565b61222c565b6104cc61089e3660046151b9565b61223d565b3480156108af57600080fd5b506104996108be366004614e52565b61240f565b3480156108cf57600080fd5b506104cc6108de366004614e52565b6124b3565b6104cc6108f1366004614f14565b61252b565b34801561090257600080fd5b506104826126c5565b34801561091757600080fd5b506104826126cd565b34801561092c57600080fd5b506104cc61093b366004614e52565b600e6020526000908152604090205460ff1681565b34801561095c57600080fd5b5061048261096b366004614e6e565b612744565b34801561097c57600080fd5b5061049960095481565b34801561099257600080fd5b506104996109a1366004614e52565b6128d8565b3480156109b257600080fd5b506055546001600160a01b0316610512565b3480156109d057600080fd5b506104826109df3660046153ad565b612989565b3480156109f057600080fd5b506104826109ff3660046153ad565b61299a565b348015610a1057600080fd5b506104cc610a1f366004614f14565b6129ab565b348015610a3057600080fd5b50610482610a3f366004614e52565b612c80565b348015610a5057600080fd5b50610482610a5f366004614fe4565b612cfa565b348015610a7057600080fd5b50610499610a7f36600461510a565b612e1d565b348015610a9057600080fd5b506104cc610a9f366004614e52565b61318e565b348015610ab057600080fd5b50610ac4610abf366004614e52565b6131d7565b6040516104a39c9b9a9998979695949392919061568a565b348015610ae857600080fd5b506104cc610af73660046150ca565b613362565b348015610b0857600080fd5b50610499610b17366004614f14565b6133b0565b348015610b2857600080fd5b5061049960075481565b348015610b3e57600080fd5b506104cc613416565b348015610b5357600080fd5b5061049960055481565b348015610b6957600080fd5b506104cc610b78366004614f3f565b6134d1565b348015610b8957600080fd5b506104996130d481565b348015610b9f57600080fd5b50601854601954601a54601b54601c54601d54601e54601f54602054602154610be0996001600160a01b03908116998116988116978116961694939291908a565b604080516001600160a01b039b8c168152998b1660208b0152978a1697890197909752948816606088015296909216608086015260a085015260c084015260e0830193909352610100820192909252610120810191909152610140016104a3565b348015610c4d57600080fd5b50610512610c5c3660046150ca565b613684565b348015610c6d57600080fd5b50601254601354601454601554601654601754610c959594939291906001600160a01b031686565b60408051968752602087019590955293850192909252606084015260808301526001600160a01b031660a082015260c0016104a3565b348015610cd757600080fd5b50610482610ce63660046153ad565b6136b9565b348015610cf757600080fd5b50610499610d06366004614e52565b6136ca565b348015610d1757600080fd5b50610512610d263660046153ad565b613748565b348015610d3757600080fd5b506087546001600160a01b0316610512565b348015610d5557600080fd5b506104cc613759565b348015610d6a57600080fd5b5061048261388b565b348015610d7f57600080fd5b50610499600a5481565b348015610d9557600080fd5b50610482610da4366004614e52565b61389b565b348015610db557600080fd5b50610482610dc4366004614e52565b6138ac565b348015610dd557600080fd5b50610482610de4366004614e52565b6138bd565b348015610df557600080fd5b50610482610e04366004614e52565b61392e565b348015610e1557600080fd5b50610499610e24366004614e52565b6139a8565b348015610e3557600080fd5b506104cc6139f9565b610e46613a19565b610e4f81611788565b610e745760405162461bcd60e51b8152600401610e6b906158c5565b60405180910390fd5b6001600160a01b038116600081815260116020526040808220805460ff19169055517f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e9190a250565b6000610ec7613a73565b610ecf613acd565b6001546001600160a01b0316336001600160a01b031614610f025760405162461bcd60e51b8152600401610e6b90615954565b61271060085484610f139190615e86565b610f1d9190615e66565b610f279084615e4e565b6001600160a01b0387166000908152600c6020526040808220905163051108e560e21b8152929550909173__$c4b8709fc407821a47433b8892c1b612a0$__91631444239491610f8191906018908b908a90600401615d04565b60206040518083038186803b158015610f9957600080fd5b505af4158015610fad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd191906150b2565b6001600160a01b038089166000908152600c602052604090206007015491925063010000009091041661102284826110098a89615e4e565b6110138987615e86565b61101d9190615e66565b613b13565b600061102e8887615e4e565b6110388785615e86565b6110429190615e66565b61104c9084615ea5565b9050611059878383613b13565b6040805182815260208101889052908101849052426060820152600160808201526001600160a01b0383811660a083015280871691898216918c16907f19fa34b3e5133b7a17b70edf99c60c14a8a0bc7b475725d3065bd1734dad510a9060c00160405180910390a4600193505050506110d3600160b955565b95945050505050565b6110e4613a19565b6110ed8161318e565b6111095760405162461bcd60e51b8152600401610e6b906158c5565b6001600160a01b038116600081815260106020526040808220805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a250565b600061115c613a73565b336000908152600c602052604090819020905163fb9b406760e01b815273__$c4b8709fc407821a47433b8892c1b612a0$__9163fb9b4067916111aa91906012906018908890600401615c63565b60006040518083038186803b1580156111c257600080fd5b505af41580156111d6573d6000803e3d6000fd5b5050505061120d6111e43390565b336000908152600c6020526040902060070154630100000090046001600160a01b031684613b13565b336000818152600c602052604090819020600381015460079091015491517f7e127ed6cd4824df6bad0d752984e5bd3309b4f3c9fa7e18d19637b86e1e86a39261126e9287929091429163010000009091046001600160a01b031690615852565b60405180910390a2506001611283600160b955565b919050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112d15760405162461bcd60e51b8152600401610e6b90615908565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611303613b4f565b6001600160a01b0316146113295760405162461bcd60e51b8152600401610e6b90615999565b61133281613b6b565b6040805160008082526020820190925261134e91839190613b73565b50565b600081600081116113745760405162461bcd60e51b8152600401610e6b90615ab5565b61137c613acd565b61138533611788565b6113d15760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a206f6e6c79206275726e6572732063616e206275726e00006044820152606401610e6b565b6000600f86866040516113e59291906155a7565b908152604051908190036020019020546000546001600160a01b039182169250166323b872dd6114123390565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101879052606401602060405180830381600087803b15801561146057600080fd5b505af1158015611474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114989190615098565b6114e45760405162461bcd60e51b815260206004820152601c60248201527f4c6f636b6572733a207472616e7366657246726f6d206661696c6564000000006044820152606401610e6b565b6000612710600454866114f79190615e86565b6115019190615e66565b9050600061150f8287615ea5565b6001600160a01b0384166000908152600c60205260409020600401549091508181101561157e5760405162461bcd60e51b815260206004820152601b60248201527f4c6f636b6572733a20696e73756666696369656e742066756e647300000000006044820152606401610e6b565b6115888282615ea5565b6001600160a01b038581166000908152600c602052604080822060049081019490945590549051630852cd8d60e31b815292830185905216906342966c6890602401602060405180830381600087803b1580156115e457600080fd5b505af11580156115f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161c9190615098565b61165f5760405162461bcd60e51b8152602060048201526014602482015273131bd8dad95c9cce88189d5c9b8819985a5b195960621b6044820152606401610e6b565b60005460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529091169063a9059cbb90604401602060405180830381600087803b1580156116ad57600080fd5b505af11580156116c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e59190615098565b6117315760405162461bcd60e51b815260206004820152601960248201527f4c6f636b6572733a206c6f636b6572466565206661696c6564000000000000006044820152606401610e6b565b6040805188815260208101859052428183015290516001600160a01b038616917f66fb54322c407b04a077a306e72cdd780f0f374ba5dac9f6901a56a6255bc34a919081900360600190a250979650505050505050565b6000816001600160a01b0381166117b15760405162461bcd60e51b8152600401610e6b90615ae5565b6001600160a01b03831660009081526011602052604090205460ff1691505b50919050565b60006117e0613a73565b6117e8613acd565b826001600160a01b03811661180f5760405162461bcd60e51b8152600401610e6b90615ae5565b6001600160a01b0384166000908152600c60205260408082209051637f240b8b60e11b815260048101919091526024810185905273__$c4b8709fc407821a47433b8892c1b612a0$__9063fe4817169060440160206040518083038186803b15801561187a57600080fd5b505af415801561188e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b291906150b2565b6000549091506001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401602060405180830381600087803b15801561191557600080fd5b505af1158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194d9190615098565b50600054604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c6890602401602060405180830381600087803b15801561199457600080fd5b505af11580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190615098565b506119fc336001600160a01b038088166000908152600c6020526040902060070154630100000090041686613b13565b6001600160a01b038581166000818152600c60205260409081902060070154905133937f679883f8ee67472398e6ef47c09a7f5966b171bd2bcab5f0779aebcbcbdf869092611a5c928a9288924292630100000090910490911690615852565b60405180910390a3600192505050611a74600160b955565b92915050565b6000611a84613a73565b611a8c613a19565b816001600160a01b038116611ab35760405162461bcd60e51b8152600401610e6b90615ae5565b6001600160a01b0383166000908152600c602052604090206007810154610100900460ff16611b1a5760405162461bcd60e51b8152602060048201526013602482015272131bd8dad95c9cce881b9bc81c995c5d595cdd606a1b6044820152606401610e6b565b604051600090600f90611b2e9084906155d3565b908152604051908190036020019020546001600160a01b031614611b945760405162461bcd60e51b815260206004820152601c60248201527f4c6f636b6572733a2075736564206c6f636b696e6720736372697074000000006044820152606401610e6b565b60078101805461ffff19166001908117909155600954611bb49190615ea5565b600955600a54611bc5906001615e4e565b600a556040518490600f90611bdb9084906155d3565b90815260405190819003602001812080546001600160a01b039384166001600160a01b03199091161790556328e5180160e11b81526101816004820152600b6024820152908516604482015273__$c4b8709fc407821a47433b8892c1b612a0$__906351ca30029060640160006040518083038186803b158015611c5e57600080fd5b505af4158015611c72573d6000803e3d6000fd5b50505050600381015460078201546040516001600160a01b03878116937f50ec2de60da128f96d3f6db676c0041fb4e25e02a764b38ff0c40d10f76579d393611cc79387934292630100000090041690615748565b60405180910390a2600192505050611283600160b955565b611ce7613a19565b61134e81613ced565b600b8181548110611d0057600080fd5b6000918252602090912001546001600160a01b0316905081565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611d635760405162461bcd60e51b8152600401610e6b90615908565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611d95613b4f565b6001600160a01b031614611dbb5760405162461bcd60e51b8152600401610e6b90615999565b611dc482613b6b565b611dd082826001613b73565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611e745760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610e6b565b50600080516020615f6c8339815191525b90565b611e90613a19565b61134e81613d88565b6000816001600160a01b038116611ec25760405162461bcd60e51b8152600401610e6b90615ae5565b604051631f14a8d360e11b8152600c600482015261018160248201526001600160a01b038416604482015273__$c4b8709fc407821a47433b8892c1b612a0$__90633e2951a69060640160206040518083038186803b158015611f2457600080fd5b505af4158015611f38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5c9190615098565b8015611ffd5750604051631f14a8d360e11b8152600c6004820152600b60248201526001600160a01b038416604482015273__$c4b8709fc407821a47433b8892c1b612a0$__90633e2951a6906064015b60206040518083038186803b158015611fc557600080fd5b505af4158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd9190615098565b9392505050565b600061200e613a73565b336000908152600c602052604090206007015460ff166120405760405162461bcd60e51b8152600401610e6b90615a26565b336000908152600c6020526040902060080154156120ae5760405162461bcd60e51b815260206004820152602560248201527f4c6f636b6572733a206c6f636b65722068617320616c72656164792072657175604482015264195cdd195960da1b6064820152608401610e6b565b6120b942603c615e4e565b336000818152600c6020526040908190206008810184905560038101546004820154600783015493517f49510c1de57fb1f357a2444587ea601cc3b11d77ccb192154c8378c2f84b634d946121229493929163010000009091046001600160a01b031690615748565b60405180910390a3506001611e85600160b955565b6060816001600160a01b0381166121605760405162461bcd60e51b8152600401610e6b90615ae5565b6001600160a01b0383166000908152600c60205260409020805461218390615ee8565b80601f01602080910402602001604051908101604052809291908181526020018280546121af90615ee8565b80156121fc5780601f106121d1576101008083540402835291602001916121fc565b820191906000526020600020905b8154815290600101906020018083116121df57829003601f168201915b5050505050915050919050565b612211613a19565b61134e81613e23565b612222613a19565b61222a613eb2565b565b612234613a19565b61134e81613f04565b6000612247613a73565b73__$c4b8709fc407821a47433b8892c1b612a0$__63b926d8f0600c60126018600f8d8d6040516122799291906155a7565b908152604051908190036020018120546001600160e01b031960e087901b1682526122b9949392916001600160a01b03909116908d908a90600401615876565b60006040518083038186803b1580156122d157600080fd5b505af41580156122e5573d6000803e3d6000fd5b505050506101816122f33390565b815460018082018455600093845260209093200180546001600160a01b0319166001600160a01b039290921691909117905560095461233191615e4e565b600955604051634777cda360e01b815273__$c4b8709fc407821a47433b8892c1b612a0$__90634777cda39061237a90600c908c908c908c908c908c908c908c90600401615780565b60006040518083038186803b15801561239257600080fd5b505af41580156123a6573d6000803e3d6000fd5b505050506123b13390565b6001600160a01b03167fae6c2e5daace63bff62e385a7d762007f0356fadceb83713c9a26d9b6f8e52a0898989866040516123ef9493929190615642565b60405180910390a2506001612404600160b955565b979650505050505050565b6001600160a01b0381166000908152600c60205260408082209051631d35425160e11b815273__$c4b8709fc407821a47433b8892c1b612a0$__91633a6a84a2916124639190601290601890600401615c41565b60206040518083038186803b15801561247b57600080fd5b505af415801561248f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7491906150b2565b6000816001600160a01b0381166124dc5760405162461bcd60e51b8152600401610e6b90615ae5565b6001600160a01b0383166000908152600c602052604090819020905163d3f5e2e960e01b815273__$c4b8709fc407821a47433b8892c1b612a0$__9163d3f5e2e991611fad9190600401615b67565b6000612535613a73565b81600081116125565760405162461bcd60e51b8152600401610e6b90615ab5565b6001600160a01b038481166000908152600c60205260409020600701546301000000900416600114156125c7578234146125c75760405162461bcd60e51b81526020600482015260126024820152714c6f636b6572733a206d73672076616c756560701b6044820152606401610e6b565b6001600160a01b0384166000908152600c6020526040908190209051635b8914e960e01b815273__$c4b8709fc407821a47433b8892c1b612a0$__91635b8914e99161261b91906012908890600401615ccc565b60006040518083038186803b15801561263357600080fd5b505af4158015612647573d6000803e3d6000fd5b5050506001600160a01b038086166000818152600c602052604090819020600381015460079091015491519294507f1a48dbe0e8978a04ac30e84ff5b757b6b5ab687139dc261d0a12dd03598782b8936126ae938993429263010000009091041690615852565b60405180910390a26001915050611a74600160b955565b61222a613a19565b60875433906001600160a01b0316811461273b5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610e6b565b61134e81613f9c565b602254610100900460ff16158080156127645750602254600160ff909116105b8061277e5750303b15801561277e575060225460ff166001145b6127e15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e6b565b6022805460ff191660011790558015612804576022805461ff0019166101001790555b61280c613fb5565b612814613fe4565b61281c614013565b612824614042565b61282d87613ced565b61283686613d88565b61283f85613e23565b61284884614069565b61285183613f04565b61285a826140f8565b612710601281815560138290556130d4601455601591909155601655601780546001600160a01b031916600117905580156128cf576022805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6000816001600160a01b0381166129015760405162461bcd60e51b8152600401610e6b90615ae5565b6040516299413760e01b815273__$c4b8709fc407821a47433b8892c1b612a0$__906299413790612939906018908790600401615d6b565b60206040518083038186803b15801561295157600080fd5b505af4158015612965573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd91906150b2565b612991613a19565b61134e816140f8565b6129a2613a19565b61134e81614069565b60006129b5613a73565b6129bd613acd565b826001600160a01b0381166129e45760405162461bcd60e51b8152600401610e6b90615ae5565b8260008111612a055760405162461bcd60e51b8152600401610e6b90615ab5565b6001600160a01b0385166000908152600c602052604080822090516308878a6f60e01b815273__$c4b8709fc407821a47433b8892c1b612a0$__916308878a6f91612a5b91906012906018908b90600401615c63565b60206040518083038186803b158015612a7357600080fd5b505af4158015612a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aab91906150b2565b6001600160a01b0387166000908152600c602052604081206003810180549394509092889290612adc908490615ea5565b9091555050600054612af9906001600160a01b0316333085614160565b600154600054612b16916001600160a01b039182169116846141d1565b600180549082015460405163218a4edd60e11b81526000926001600160a01b0316916343149dba91612b57918791600288019160ff16908890600401615d93565b602060405180830381600087803b158015612b7157600080fd5b505af1158015612b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba991906150b2565b11612bf65760405162461bcd60e51b815260206004820152601d60248201527f4c6f636b6572733a206275726e7420616d6f756e74206973207a65726f0000006044820152606401610e6b565b612c15336007830154630100000090046001600160a01b031688613b13565b600781015460405133916001600160a01b038a8116927f6e059c6d0176feeba3073a3df607194b29bfb0e6c640512734976a4298c94bce92612c66928c928992429263010000009091041690615852565b60405180910390a36001945050505050611a74600160b955565b612c88613a19565b612c918161318e565b15612cae5760405162461bcd60e51b8152600401610e6b906159e5565b6001600160a01b038116600081815260106020526040808220805460ff19166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a250565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415612d435760405162461bcd60e51b8152600401610e6b90615908565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612d75613b4f565b6001600160a01b031614612d9b5760405162461bcd60e51b8152600401610e6b90615999565b612da3613a19565b60095460405163652e98b960e01b815273__$c4b8709fc407821a47433b8892c1b612a0$__9163652e98b991612dea91600c91600d9161018191600b9189916004016157de565b60006040518083038186803b158015612e0257600080fd5b505af4158015612e16573d6000803e3d6000fd5b5050505050565b6000612e27613a73565b612e2f613acd565b612e383361318e565b612e845760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a206f6e6c79206d696e746572732063616e206d696e7400006044820152606401610e6b565b836001600160a01b038116612eab5760405162461bcd60e51b8152600401610e6b90615ae5565b8260008111612ecc5760405162461bcd60e51b8152600401610e6b90615ab5565b6000600f8989604051612ee09291906155a7565b908152604051908190036020019020546001600160a01b031690506000612f06826136ca565b905085811015612f585760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a20696e73756666696369656e7420636170616369747900006044820152606401610e6b565b612f61826124b3565b612fa35760405162461bcd60e51b81526020600482015260136024820152724c6f636b6572733a206e6f742061637469766560681b6044820152606401610e6b565b6001600160a01b0382166000908152600c602052604081206004018054889290612fce908490615e4e565b909155505060045460009061271090612fe79089615e86565b612ff19190615e66565b90508015613081576000546040516340c10f1960e01b81526001600160a01b03858116600483015260248201849052909116906340c10f1990604401602060405180830381600087803b15801561304757600080fd5b505af115801561305b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307f9190615098565b505b6000546001600160a01b03166340c10f198a61309d848b615ea5565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156130e357600080fd5b505af11580156130f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311b9190615098565b5060408051898152602081018990529081018290524260608201526001600160a01b03808b1691908516907f80d7e09e4dcc6445bb161b259f25b2b87f0f7446139023346d498e0fe9ddbdcf9060800160405180910390a361317d8188615ea5565b955050505050506110d3600160b955565b6000816001600160a01b0381166131b75760405162461bcd60e51b8152600401610e6b90615ae5565b50506001600160a01b031660009081526010602052604090205460ff1690565b600c602052600090815260409020805481906131f290615ee8565b80601f016020809104026020016040519081016040528092919081815260200182805461321e90615ee8565b801561326b5780601f106132405761010080835404028352916020019161326b565b820191906000526020600020905b81548152906001019060200180831161324e57829003601f168201915b5050506001840154600285018054949560ff90921694919350915061328f90615ee8565b80601f01602080910402602001604051908101604052809291908181526020018280546132bb90615ee8565b80156133085780601f106132dd57610100808354040283529160200191613308565b820191906000526020600020905b8154815290600101906020018083116132eb57829003601f168201915b50505060038401546004850154600586015460068701546007880154600890980154969793969295509093509160ff808216926101008304821692620100008104909216916001600160a01b03630100000090910416908c565b6000600c6000600f858560405161337a9291906155a7565b9081526040805160209281900383019020546001600160a01b0316835290820192909252016000206007015460ff169392505050565b6001600160a01b038083166000908152600c60205260408082206007015490516316a1bdd760e21b8152919273__$c4b8709fc407821a47433b8892c1b612a0$__92635a86f75c9261293992601292601892899263010000009091041690600401615d2d565b6000613420613a73565b336000908152600c602052604090206007015460ff166134525760405162461bcd60e51b8152600401610e6b90615a26565b336000818152600c6020526040808220600881019290925560038201546004830154600784015492517f86616b52562e8133dabdcd65f7e5dde6a459f67b19fc506f5859d9c15c3419aa946134bc949093929163010000009091046001600160a01b031690615748565b60405180910390a2506001611e85600160b955565b60006134db613a73565b6134e3613acd565b6001546001600160a01b0316336001600160a01b0316146135165760405162461bcd60e51b8152600401610e6b90615954565b6001600160a01b0385166000908152600c602052604080822090516336a24a7b60e01b8152829173__$c4b8709fc407821a47433b8892c1b612a0$__916336a24a7b9161356f916012906018908c908b90600401615c95565b604080518083038186803b15801561358657600080fd5b505af415801561359a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135be91906153c5565b6001600160a01b03808a166000908152600c60205260409020600701549294509092506301000000909104166135f5868285613b13565b306001600160a01b03878116908a167f19fa34b3e5133b7a17b70edf99c60c14a8a0bc7b475725d3065bd1734dad510a86896136318289615e4e565b60408051938452602084019290925290820152426060820152600060808201526001600160a01b03861660a082015260c00160405180910390a46001935050505061367c600160b955565b949350505050565b6000600f83836040516136989291906155a7565b908152604051908190036020019020546001600160a01b0316905092915050565b6136c1613a19565b61134e816142f5565b6000816001600160a01b0381166136f35760405162461bcd60e51b8152600401610e6b90615ae5565b6001600160a01b0383166000908152600c60205260409081902090516302a47d9560e21b815273__$c4b8709fc407821a47433b8892c1b612a0$__91630a91f654916129399190601290601890600401615c41565b6101818181548110611d0057600080fd5b6000613763613a73565b60408051637c3c1e8960e11b8152600c60048201526101816024820152336044820152905160009173__$c4b8709fc407821a47433b8892c1b612a0$__9163f8783d12916064808201928692909190829003018186803b1580156137c657600080fd5b505af41580156137da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613802919081019061528b565b905060016009546138139190615ea5565b60095561382a338261014001518360600151613b13565b336001600160a01b03167f1039d489522ec9ef0d32866fc7760dd589820e30e335a26eacde418b9b9264988260000151836060015184610140015160405161387493929190615715565b60405180910390a26001915050611e85600160b955565b613893613a19565b61222a61435d565b6138a3613a19565b61134e8161439a565b6138b4613a19565b61134e816144d8565b6138c5613a19565b608780546001600160a01b0383166001600160a01b031990911681179091556138f66055546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b613936613a19565b61393f81611788565b1561395c5760405162461bcd60e51b8152600401610e6b906159e5565b6001600160a01b038116600081815260116020526040808220805460ff19166001179055517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a250565b6001600160a01b0381166000908152600c60205260408082209051638c230aed60e01b815273__$c4b8709fc407821a47433b8892c1b612a0$__91638c230aed916124639190601890600401615cef565b6000613a03613a73565b613a0c33614573565b506001611e85600160b955565b6055546001600160a01b0316331461222a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610e6b565b600260b9541415613ac65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610e6b565b600260b955565b60eb5460ff161561222a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610e6b565b6001600160a01b03821660011415613b3457613b2f838261468a565b505050565b613b2f6001600160a01b03831684836147a3565b600160b955565b600080516020615f6c833981519152546001600160a01b031690565b61134e613a19565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613ba657613b2f836147d3565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613bdf57600080fd5b505afa925050508015613c0f575060408051601f3d908101601f19168201909252613c0c918101906150b2565b60015b613c725760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610e6b565b600080516020615f6c8339815191528114613ce15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610e6b565b50613b2f83838361486f565b806001600160a01b038116613d145760405162461bcd60e51b8152600401610e6b90615ae5565b600054604080516001600160a01b03928316815291841660208301527ff1253c5d33616f62c4ae5b08481b0df4900a6eb1391d7d96098bf578bb314c52910160405180910390a150600080546001600160a01b039092166001600160a01b0319928316811790915560188054909216179055565b806001600160a01b038116613daf5760405162461bcd60e51b8152600401610e6b90615ae5565b600254604080516001600160a01b03928316815291841660208301527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22910160405180910390a150600280546001600160a01b039092166001600160a01b03199283168117909155601b8054909216179055565b6006548111613e6c5760405162461bcd60e51b81526020600482015260156024820152742637b1b5b2b9399d1036bab9ba1021a9101f10262960591b6044820152606401610e6b565b60055460408051918252602082018390527f1e29d1b5c8926360f3ac632d884775772b07f31fec4077d433e58ce823f91347910160405180910390a16005819055601e55565b613eba614894565b60eb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b612710811115613f565760405162461bcd60e51b815260206004820152601b60248201527f4c6f636b6572733a20696e76616c6964206c6f636b65722066656500000000006044820152606401610e6b565b60045460408051918252602082018390527f44c6802691f6adea249930369a511db979a5e9a3603bdb37ceee1036da80e980910160405180910390a16004819055601d55565b608780546001600160a01b031916905561134e816148dd565b602254610100900460ff16613fdc5760405162461bcd60e51b8152600401610e6b90615b1c565b61222a61492f565b602254610100900460ff1661400b5760405162461bcd60e51b8152600401610e6b90615b1c565b61222a61495f565b602254610100900460ff1661403a5760405162461bcd60e51b8152600401610e6b90615b1c565b61222a614986565b602254610100900460ff1661222a5760405162461bcd60e51b8152600401610e6b90615b1c565b80600554116140b25760405162461bcd60e51b81526020600482015260156024820152742637b1b5b2b9399d1036bab9ba1021a9101f10262960591b6044820152606401610e6b565b60065460408051918252602082018390527f883242c2a857ca527a432dfca231b1e49233fde2a96802809a0f3866e9f19e13910160405180910390a16006819055601f55565b61271081111561411a5760405162461bcd60e51b8152600401610e6b90615a72565b60075460408051918252602082018390527f5e4dd01049cdfe5a081b404bff8e27de919fd9c8ae2145007e0921ec227f207a910160405180910390a16007819055602055565b6040516001600160a01b03808516602483015283166044820152606481018290526141cb9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526149b9565b50505050565b80158061425a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561422057600080fd5b505afa158015614234573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061425891906150b2565b155b6142c55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610e6b565b6040516001600160a01b038316602482015260448101829052613b2f90849063095ea7b360e01b90606401614194565b6127108111156143175760405162461bcd60e51b8152600401610e6b90615a72565b60085460408051918252602082018390527f38c2a2bc8aa6ec8cff42ba0a8b737fa98bed6ae113936d79509d03f0134029f4910160405180910390a16008819055602155565b614365613acd565b60eb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613ee73390565b806001600160a01b0381166143c15760405162461bcd60e51b8152600401610e6b90615ae5565b600154604080516001600160a01b03928316815291841660208301527fd86d51326f3c88ea5365fba597a57273ae555e44f4b11658da952320d0beaa75910160405180910390a16001546040516001600160a01b03909116907f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e90600090a2600180546001600160a01b03908116600090815260116020526040808220805460ff1916905583549286166001600160a01b0319938416811790945560198054909316841790925590517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a25050600180546001600160a01b03166000908152601160205260409020805460ff19169091179055565b806001600160a01b0381166144ff5760405162461bcd60e51b8152600401610e6b90615ae5565b600354604080516001600160a01b03928316815291841660208301527ff70b901dcbac064cf4110833cb5adec074e667c8fa7447b3267a9818e1214dfc910160405180910390a150600380546001600160a01b039092166001600160a01b03199283168117909155601c8054909216179055565b604051631e674c6d60e21b815260009073__$c4b8709fc407821a47433b8892c1b612a0$__9063799d31b4906145b690600c90600f90600b908890600401615852565b60006040518083038186803b1580156145ce57600080fd5b505af41580156145e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261460a919081019061528b565b90506001600a5461461b9190615ea5565b600a556101408101516060820151614634918491613b13565b816001600160a01b03167f8295084aee74b95a5495daabd14fbf1aa72875c5e8fe52b204fbacabf9a85b288260000151836060015184610140015160405161467e93929190615715565b60405180910390a25050565b804710156146da5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610e6b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614727576040519150601f19603f3d011682016040523d82523d6000602084013e61472c565b606091505b5050905080613b2f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610e6b565b6040516001600160a01b038316602482015260448101829052613b2f90849063a9059cbb60e01b90606401614194565b6001600160a01b0381163b6148405760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610e6b565b600080516020615f6c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61487883614a8e565b6000825111806148855750805b15613b2f576141cb8383614ace565b60eb5460ff1661222a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610e6b565b605580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b602254610100900460ff166149565760405162461bcd60e51b8152600401610e6b90615b1c565b61222a33613f9c565b602254610100900460ff16613b485760405162461bcd60e51b8152600401610e6b90615b1c565b602254610100900460ff166149ad5760405162461bcd60e51b8152600401610e6b90615b1c565b60eb805460ff19169055565b6000614a0e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614bb99092919063ffffffff16565b9050805160001480614a2f575080806020019051810190614a2f9190615098565b613b2f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e6b565b614a97816147d3565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b614b365760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610e6b565b600080846001600160a01b031684604051614b5191906155b7565b600060405180830381855af49150503d8060008114614b8c576040519150601f19603f3d011682016040523d82523d6000602084013e614b91565b606091505b50915091506110d38282604051806060016040528060278152602001615f8c60279139614bc8565b606061367c8484600085614be1565b60608315614bd7575081611ffd565b611ffd8383614cb1565b606082471015614c425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610e6b565b600080866001600160a01b03168587604051614c5e91906155b7565b60006040518083038185875af1925050503d8060008114614c9b576040519150601f19603f3d011682016040523d82523d6000602084013e614ca0565b606091505b509150915061240487838387614cdb565b815115614cc15781518083602001fd5b8060405162461bcd60e51b8152600401610e6b9190615677565b60608315614d47578251614d40576001600160a01b0385163b614d405760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e6b565b508161367c565b61367c8383614cb1565b805161128381615f49565b8051801515811461128357600080fd5b60008083601f840112614d7d578182fd5b50813567ffffffffffffffff811115614d94578182fd5b602083019150836020828501011115614dac57600080fd5b9250929050565b600082601f830112614dc3578081fd5b8135614dd6614dd182615e26565b615df5565b818152846020838601011115614dea578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112614e14578081fd5b8151614e22614dd182615e26565b818152846020838601011115614e36578283fd5b61367c826020830160208701615ebc565b805161128381615f5e565b600060208284031215614e63578081fd5b8135611ffd81615f49565b60008060008060008060c08789031215614e86578182fd5b8635614e9181615f49565b95506020870135614ea181615f49565b95989597505050506040840135936060810135936080820135935060a0909101359150565b60008060408385031215614ed8578182fd5b8235614ee381615f49565b9150602083013567ffffffffffffffff811115614efe578182fd5b614f0a85828601614db3565b9150509250929050565b60008060408385031215614f26578182fd5b8235614f3181615f49565b946020939093013593505050565b60008060008060808587031215614f54578384fd5b8435614f5f81615f49565b9350602085013592506040850135614f7681615f49565b9396929550929360600135925050565b600080600080600060a08688031215614f9d578283fd5b8535614fa881615f49565b9450602086013593506040860135614fbf81615f49565b9250606086013591506080860135614fd681615f49565b809150509295509295909350565b60006020808385031215614ff6578182fd5b823567ffffffffffffffff8082111561500d578384fd5b818501915085601f830112615020578384fd5b81358181111561503257615032615f33565b8060051b9150615043848301615df5565b8181528481019084860184860187018a101561505d578788fd5b8795505b8386101561508b578035945061507685615f49565b84835260019590950194918601918601615061565b5098975050505050505050565b6000602082840312156150a9578081fd5b611ffd82614d5c565b6000602082840312156150c3578081fd5b5051919050565b600080602083850312156150dc578182fd5b823567ffffffffffffffff8111156150f2578283fd5b6150fe85828601614d6c565b90969095509350505050565b600080600080600060808688031215615121578283fd5b853567ffffffffffffffff811115615137578384fd5b61514388828901614d6c565b909650945050602086013561515781615f49565b94979396509394604081013594506060013592915050565b600080600060408486031215615183578081fd5b833567ffffffffffffffff811115615199578182fd5b6151a586828701614d6c565b909790965060209590950135949350505050565b600080600080600080600060a0888a0312156151d3578485fd5b873567ffffffffffffffff808211156151ea578687fd5b6151f68b838c01614d6c565b909950975060208a0135965060408a0135915061521282615f5e565b90945060608901359080821115615227578283fd5b506152348a828b01614d6c565b909450925050608088013561524881615f49565b8091505092959891949750929550565b600060208284031215615269578081fd5b813567ffffffffffffffff81111561527f578182fd5b61367c84828501614db3565b60006020828403121561529c578081fd5b815167ffffffffffffffff808211156152b3578283fd5b9083019061018082860312156152c7578283fd5b6152cf615dcb565b8251828111156152dd578485fd5b6152e987828601614e04565b8252506152f860208401614e47565b602082015260408301518281111561530e578485fd5b61531a87828601614e04565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261535460e08401614d5c565b60e08201526101009150615369828401614d5c565b82820152610120915061537d828401614d5c565b828201526101409150615391828401614d51565b9181019190915261016091820151918101919091529392505050565b6000602082840312156153be578081fd5b5035919050565b600080604083850312156153d7578182fd5b505080516020909101519092909150565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452615429816020860160208601615ebc565b601f01601f19169290920160200192915050565b6000815461544a81615ee8565b808552602060018381168015615467576001811461547b576154a9565b60ff198516888401526040880195506154a9565b866000528260002060005b858110156154a15781548a8201860152908301908401615486565b890184019650505b505050505092915050565b600681106154d257634e487b7160e01b600052602160045260246000fd5b9052565b8054825260018101546020830152600281015460408301526003810154606083015260048101546080830152600501546001600160a01b031660a090910152565b6155398261552c83546001600160a01b031690565b6001600160a01b03169052565b60018101546001600160a01b0390811660208401526002820154811660408401526003820154811660608401526004820154166080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009015461012090910152565b8183823760009101908152919050565b600082516155c9818460208701615ebc565b9190910192915050565b60008083546155e181615ee8565b600182811680156155f9576001811461560a57615636565b60ff19841687528287019450615636565b8786526020808720875b8581101561562d5781548a820152908401908201615614565b50505082870194505b50929695505050505050565b6060815260006156566060830186886153e8565b6020830194909452506001600160a01b039190911660409091015292915050565b602081526000611ffd6020830184615411565b6101808152600061569f61018083018f615411565b6156ac602084018f6154b4565b82810360408401526156be818e615411565b606084019c909c525050608081019890985260a088019690965260c087019490945291151560e0860152151561010085015215156101208401526001600160a01b0316610140830152610160909101529392505050565b6060815260006157286060830186615411565b6020830194909452506001600160a01b0391909116604090910152919050565b60808152600061575b608083018761543d565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b88815260c06020820152600061579a60c08301898b6153e8565b8760408401526157ad60608401886154b4565b82810360808401526157c08186886153e8565b91505060018060a01b03831660a08301529998505050505050505050565b600060c082018883526020888185015287604085015286606085015260c0608085015281865180845260e0860191508288019350845b818110156158395784516001600160a01b031683529383019391830191600101615814565b50508093505050508260a0830152979650505050505050565b938452602084019290925260408301526001600160a01b0316606082015260800190565b868152610280810161588b60208301886154d6565b61589860e0830187615517565b6001600160a01b039485166102208301526102408201939093529216610260909201919091529392505050565b60208082526023908201527f4c6f636b6572733a206163636f756e7420646f6573206e6f74206861766520726040820152626f6c6560e81b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b60208082526025908201527f4c6f636b6572733a206d6573736167652073656e646572206973206e6f74206360408201526431a13ab93760d91b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526021908201527f4c6f636b6572733a206163636f756e7420616c72656164792068617320726f6c6040820152606560f81b606082015260800190565b6020808252602c908201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060408201526b3b30b634b2103637b1b5b2b960a11b606082015260800190565b60208082526023908201527f4c6f636b6572733a206c657373207468616e206f7220657175616c20746f203160408201526230302560e81b606082015260800190565b6020808252601690820152754c6f636b6572733a2076616c7565206973207a65726f60501b604082015260600190565b60208082526018908201527f4c6f636b6572733a2061646472657373206973207a65726f0000000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b602081526000610180806020840152615b846101a084018561543d565b600185015460ff16615b9960408601826154b4565b50838103601f19016060850152615bb3816002870161543d565b905060038501546080850152600485015460a0850152600585015460c0850152600685015460e08501526007850154615bf4610100860160ff831615159052565b615c09610120860160ff8360081c1615159052565b615c1e610140860160ff8360101c1615159052565b60181c6001600160a01b0316610160850152600894909401549201919091525090565b8381526102208101615c5660208301856154d6565b61367c60e0830184615517565b8481526102408101615c7860208301866154d6565b615c8560e0830185615517565b8261022083015295945050505050565b8581526102608101615caa60208301876154d6565b615cb760e0830186615517565b61022082019390935261024001529392505050565b8381526101008101615ce160208301856154d6565b8260e0830152949350505050565b8281526101608101611ffd6020830184615517565b8481526101a08101615d196020830186615517565b610160820193909352610180015292915050565b6102408101615d3c82876154d6565b615d4960c0830186615517565b6102008201939093526001600160a01b03919091166102209091015292915050565b6101608101615d7a8285615517565b6001600160a01b03929092166101409190910152919050565b848152608060208201526000615dac608083018661543d565b615db960408401866154b4565b8281036060840152612404818561543d565b604051610180810167ffffffffffffffff81118282101715615def57615def615f33565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715615e1e57615e1e615f33565b604052919050565b600067ffffffffffffffff821115615e4057615e40615f33565b50601f01601f191660200190565b60008219821115615e6157615e61615f1d565b500190565b600082615e8157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615615ea057615ea0615f1d565b500290565b600082821015615eb757615eb7615f1d565b500390565b60005b83811015615ed7578181015183820152602001615ebf565b838111156141cb5750506000910152565b600181811c90821680615efc57607f821691505b602082108114156117d057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461134e57600080fd5b6006811061134e57600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ca59358e7d15d9cec9a24af48a66b927fcc13feef0f8e967c72e4ff29392a77464736f6c63430008040033",
  "libraries": {
    "LockersLib": "0x8F7E74bC8f1B985D5CD9A8C2189aF7802666a1c1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addBurner(address)": {
        "details": "Give an account access to burn."
      },
      "addCollateral(address,uint256)": {
        "params": {
          "_addingCollateralAmount": "Amount of added collateral",
          "_lockerTargetAddress": "Locker's target chain address"
        },
        "returns": {
          "_0": "True if collateral is added successfully"
        }
      },
      "addLocker(address)": {
        "details": "Only owner can call this                                       When a candidate becomes locker, isCandidate is set to false",
        "params": {
          "_lockerTargetAddress": "Locker's target chain address"
        },
        "returns": {
          "_0": "True if candidate is added successfully"
        }
      },
      "addMinter(address)": {
        "details": "Give an account access to mint."
      },
      "burn(bytes,uint256)": {
        "details": "Burn coreBTC and also get the locker's fee",
        "params": {
          "_amount": "Amount of the coreBTC which is minted, including the locker's fee",
          "_lockerLockingScript": "Locking script of a locker"
        },
        "returns": {
          "_0": "uint                  The amount of coreBTC burnt"
        }
      },
      "buySlashedCollateralOfLocker(address,uint256)": {
        "details": "Users buy the slashed collateral using CoreBTC with discount                                   The paid CoreBTC will be burnt to keep the system safe                                   If all the needed CoreBTC is collected and burnt,                                   the rest of slashed collateral is sent back to locker",
        "params": {
          "_collateralAmount": "Amount of collateral that someone intends to buy with discount",
          "_lockerTargetAddress": "Locker's target chain address"
        },
        "returns": {
          "_0": "True if buying was successful"
        }
      },
      "getHealthFactor(address)": {
        "details": "The health factor is equal to current collateral asset value divided by the minimum collateral asset value to trigger liquidation,                                     the minimum collateral asset value to trigger liquidation is equal to the current locked asset value multiplied by the liquidation ratio",
        "params": {
          "_lockerTargetAddress": "Address of locker on the target chain"
        },
        "returns": {
          "_0": "The health factor of the locker"
        }
      },
      "getLockerCapacity(address)": {
        "details": "Net minted amount is total minted minus total burnt for the locker",
        "params": {
          "_lockerTargetAddress": "Address of locker on the target chain"
        },
        "returns": {
          "_0": "The net minted of the locker"
        }
      },
      "getLockerLockingScript(address)": {
        "params": {
          "_lockerTargetAddress": "Address of locker on the target chain"
        },
        "returns": {
          "_0": "Bitcoin public key of locker"
        }
      },
      "getMaximumBuyableCollateral(address)": {
        "params": {
          "_lockerTargetAddress": "Address of locker on the target chain"
        },
        "returns": {
          "_0": "The maximum buyable collateral amount of the locker"
        }
      },
      "getNeededCoreBTCToBuyCollateral(address,uint256)": {
        "params": {
          "_collateralAmount": "Amount of collateral that someone intends to buy with discount",
          "_lockerTargetAddress": "Address of locker on the target chain"
        },
        "returns": {
          "_0": "The amount of coreBTC"
        }
      },
      "initForMultipleCollateralsFeature(address[])": {
        "details": "The function can only be called when the logic contract is upgraded to feature `multiple collaterals`                             Only current owner can invoke it through a delegated call",
        "params": {
          "_initialCandidates": "The target address list of candidate lockers"
        }
      },
      "isBurner(address)": {
        "params": {
          "account": "The account which intended to be checked"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "isCollateralUnused(address)": {
        "params": {
          "_token": "Address of collateral"
        },
        "returns": {
          "_0": "True if collateral is unused"
        }
      },
      "isLocker(bytes)": {
        "params": {
          "_lockerLockingScript": "Locking script of locker on the target chain"
        },
        "returns": {
          "_0": "True if a locking script is locker"
        }
      },
      "isLockerActive(address)": {
        "details": "We check a locker status in below cases:                                     1. Minting CoreBTC                                     2. Removing locker's collateral                                     3. Removing locker",
        "params": {
          "_lockerTargetAddress": "Address of locker on the target chain"
        },
        "returns": {
          "_0": "True if the locker is active"
        }
      },
      "isMinter(address)": {
        "params": {
          "account": "The account which intended to be checked"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "liquidateLocker(address,uint256)": {
        "details": "Anyone can liquidate a locker whose health factor                                   is less than 10000 (100%) by providing a sufficient amount of coreBTC",
        "params": {
          "_collateralAmount": "Amount of collateral that someone intends to buy with discount",
          "_lockerTargetAddress": "Locker's target chain address"
        },
        "returns": {
          "_0": "True if liquidation was successful"
        }
      },
      "mint(bytes,address,bytes32,uint256)": {
        "details": "Mint coreBTC for an account and the locker fee as well",
        "params": {
          "_amount": "Amount of the coreBTC which is minted, including the locker's fee",
          "_lockerLockingScript": "Locking script of a locker",
          "_receiver": "Address of the receiver of the minted coreBTCs",
          "_txId": "The id of bitcoin transaction"
        },
        "returns": {
          "_0": "uint                  The amount of coreBTC minted for the receiver"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseLocker()": {
        "details": "Only owner can pause"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "priceOfOneUnitOfCollateralInBTC(address)": {
        "details": "Returns the price of one collateral token (1*10^18) in coreBTC",
        "params": {
          "_collateralToken": "The address of collateral token"
        },
        "returns": {
          "_0": "uint The price of one unit of collateral token"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "removeBurner(address)": {
        "details": "Remove an account's access to burn."
      },
      "removeCollateral(uint256)": {
        "params": {
          "_removingCollateralAmount": "Amount of removed collateral"
        },
        "returns": {
          "_0": "True if collateral is removed successfully"
        }
      },
      "removeMinter(address)": {
        "details": "Remove an account's access to mint."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestActivation()": {
        "details": "Activates the locker so users can mint by this locker                        note: inactivationTimestamp == 0 means that the locker is active",
        "returns": {
          "_0": "True if activated successfully"
        }
      },
      "requestInactivation()": {
        "details": "Deactivates the locker so that no one can mint by this locker:                        1. Locker can be removed after inactivation                        2. Locker can withdraw extra collateral after inactivation",
        "returns": {
          "_0": "True if deactivated successfully"
        }
      },
      "requestToBecomeLocker(bytes,uint256,uint8,bytes,address)": {
        "details": "Users mint CoreBTC by sending BTC to locker's locking script                                         In case of liquidation of locker's bond, the burn CoreBTC is sent to                                         locker's rescue script                                         A user should lock enough collateral token to become candidate",
        "params": {
          "_candidateLockingScript": "Locking script of the candidate",
          "_lockedAmount": "Bond amount of locker",
          "_lockedToken": "Address of locked token",
          "_lockerRescueScript": "Rescue script of the locker",
          "_lockerRescueType": "Type of locker's rescue script (e.g. P2SH)"
        },
        "returns": {
          "_0": "True if candidate is added successfully"
        }
      },
      "revokeRequest()": {
        "details": "A user who is still a candidate can revoke his/her request",
        "returns": {
          "_0": "True if candidate is removed successfully"
        }
      },
      "selfRemoveLocker()": {
        "details": "Only locker can call this function",
        "returns": {
          "_0": "True if locker is removed successfully"
        }
      },
      "setCCBurnRouter(address)": {
        "details": "Only current owner can call this",
        "params": {
          "_ccBurnRouter": "The new cc burn router contract address"
        }
      },
      "setCollateralRatio(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_collateralRatio": "The new collateral ratio"
        }
      },
      "setCollaterals(address)": {
        "details": "Only owner can call this",
        "params": {
          "_collaterals": "The address of collaterals contract"
        }
      },
      "setCoreBTC(address)": {
        "details": "Only owner can call this",
        "params": {
          "_coreBTC": "The new wrapped token contract address"
        }
      },
      "setLiquidationRatio(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_liquidationRatio": "The new liquidation ratio"
        }
      },
      "setLockerPercentageFee(uint256)": {
        "details": "Only current owner can call this",
        "params": {
          "_lockerPercentageFee": "The new locker percentage fee"
        }
      },
      "setPriceOracle(address)": {
        "details": "Only current owner can call this",
        "params": {
          "_priceOracle": "The new price oracle"
        }
      },
      "setPriceWithDiscountRatio(uint256)": {
        "details": "Only current owner can call this",
        "params": {
          "_priceWithDiscountRatio": "The new price with discount ratio"
        }
      },
      "setSlashCompensationRatio(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_slashCompensationRatio": "The new slash compensation ratio"
        }
      },
      "slashIdleLocker(address,uint256,address,uint256,address)": {
        "details": "Only cc burn router can call this                                   Locker is slashed since doesn't provide burn proof                                   before a cc burn request deadline.                                   User who made the cc burn request will receive the slashed bond",
        "params": {
          "_amount": "Amount of CoreBTC that is slashed from lockers",
          "_lockerTargetAddress": "Locker's target chain address",
          "_recipient": "Address of user who receives the slashed amount",
          "_rewardAmount": "Amount of CoreBTC that slasher receives",
          "_rewardRecipient": "Address of slasher who receives reward"
        },
        "returns": {
          "_0": "True if the locker is slashed successfully"
        }
      },
      "slashThiefLocker(address,uint256,address,uint256)": {
        "details": "Only cc burn router can call this                                   Locker is slashed because he/she moved BTC from                                   locker's Bitcoin address without any corresponding burn req                                   The slashed bond will be sold with discount",
        "params": {
          "_amount": "Value of slashed collateral (in CoreBTC)",
          "_lockerTargetAddress": "Locker's target chain address",
          "_rewardAmount": "Value of slashed reward (in CoreBTC)",
          "_rewardRecipient": "Address of slasher who receives reward"
        },
        "returns": {
          "_0": "True if the locker is slashed successfully"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unPauseLocker()": {
        "details": "Only owner can pause"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCollateral(address,uint256)": {
        "notice": "Increases collateral of the locker"
      },
      "addLocker(address)": {
        "notice": "Approves a candidate request to become locker"
      },
      "burn(bytes,uint256)": {
        "notice": "Burn coreBTC of an account"
      },
      "buySlashedCollateralOfLocker(address,uint256)": {
        "notice": "Sells lockers slashed collateral"
      },
      "getHealthFactor(address)": {
        "notice": "Get health factor of the locker"
      },
      "getLockerCapacity(address)": {
        "notice": "Get how much the locker can mint"
      },
      "getLockerLockingScript(address)": {
        "notice": "Give Bitcoin public key of locker"
      },
      "getMaximumBuyableCollateral(address)": {
        "notice": "Get maximum buyable collateral amount of the locker"
      },
      "getNeededCoreBTCToBuyCollateral(address,uint256)": {
        "notice": "Get how much coreBTC needed for buying the collateral"
      },
      "initForMultipleCollateralsFeature(address[])": {
        "notice": "Init candidate locker list and locker’s lockedToken"
      },
      "isBurner(address)": {
        "notice": "Check if an account is burner"
      },
      "isCollateralUnused(address)": {
        "notice": "Checks whether a token is used as collateral by locker"
      },
      "isLocker(bytes)": {
        "notice": "Checks whether a locking script is locker"
      },
      "isLockerActive(address)": {
        "notice": "Returns the Locker status"
      },
      "isMinter(address)": {
        "notice": "Check if an account is minter"
      },
      "liquidateLocker(address,uint256)": {
        "notice": "Liquidates the locker whose collateral is unhealthy"
      },
      "mint(bytes,address,bytes32,uint256)": {
        "notice": "Mint coreBTC for an account"
      },
      "pauseLocker()": {
        "notice": "Pause the locker, so only the functions can be called which are whenPaused"
      },
      "removeCollateral(uint256)": {
        "notice": "Decreases collateral of the locker"
      },
      "requestActivation()": {
        "notice": "Requests to activate a locker"
      },
      "requestInactivation()": {
        "notice": "Requests to inactivate a locker"
      },
      "requestToBecomeLocker(bytes,uint256,uint8,bytes,address)": {
        "notice": "Adds user to candidates list"
      },
      "revokeRequest()": {
        "notice": "Removes a candidate from candidates list"
      },
      "selfRemoveLocker()": {
        "notice": "Removes a locker from lockers list"
      },
      "setCCBurnRouter(address)": {
        "notice": "Changes cc burn router contract"
      },
      "setCollateralRatio(uint256)": {
        "notice": "Changes collateral ratio"
      },
      "setCollaterals(address)": {
        "notice": "Changes collaterals contract address"
      },
      "setCoreBTC(address)": {
        "notice": "Changes wrapped token contract address"
      },
      "setLiquidationRatio(uint256)": {
        "notice": "Changes liquidation ratio"
      },
      "setLockerPercentageFee(uint256)": {
        "notice": "Changes percentage fee of locker"
      },
      "setPriceOracle(address)": {
        "notice": "Changes the price oracle"
      },
      "setPriceWithDiscountRatio(uint256)": {
        "notice": "Changes price with discount ratio"
      },
      "setSlashCompensationRatio(uint256)": {
        "notice": "Changes slash compensation ratio"
      },
      "slashIdleLocker(address,uint256,address,uint256,address)": {
        "notice": "Slashes lockers for not executing a cc burn req"
      },
      "slashThiefLocker(address,uint256,address,uint256)": {
        "notice": "Slashes lockers for moving BTC without a good reason"
      },
      "unPauseLocker()": {
        "notice": "Un-pause the locker, so only the functions can be called which are whenNotPaused"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17763,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "coreBTC",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17766,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "ccBurnRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 17769,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "priceOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 17772,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "collaterals",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17775,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "lockerPercentageFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 17778,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "collateralRatio",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 17781,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "liquidationRatio",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 17784,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "priceWithDiscountRatio",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 17787,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "slashCompensationRatio",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 17790,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "totalNumberOfCandidates",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 17793,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "totalNumberOfLockers",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 17797,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "approvedLockers",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17802,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "lockersMapping",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(locker)23894_storage)"
      },
      {
        "astId": 17806,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "lockerInactivationTimestamp",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17810,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "lockerLeavingAcceptance",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17814,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "lockerTargetAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes_memory_ptr,t_address)"
      },
      {
        "astId": 17818,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "minters",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17822,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "burners",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17825,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "libConstants",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(lockersLibConstants)23907_storage"
      },
      {
        "astId": 17828,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "libParams",
        "offset": 0,
        "slot": "24",
        "type": "t_struct(lockersLibParam)23928_storage"
      },
      {
        "astId": 633,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "_initialized",
        "offset": 0,
        "slot": "34",
        "type": "t_uint8"
      },
      {
        "astId": 636,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "_initializing",
        "offset": 1,
        "slot": "34",
        "type": "t_bool"
      },
      {
        "astId": 2171,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "35",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "85",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "86",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "135",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "136",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1072,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "_status",
        "offset": 0,
        "slot": "185",
        "type": "t_uint256"
      },
      {
        "astId": 1130,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "186",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 952,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "_paused",
        "offset": 0,
        "slot": "235",
        "type": "t_bool"
      },
      {
        "astId": 1057,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "236",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 615,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "285",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 930,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "335",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15621,
        "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
        "label": "candidateLockers",
        "offset": 0,
        "slot": "385",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(ScriptTypes)12047": {
        "encoding": "inplace",
        "label": "enum ScriptTypes",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(locker)23894_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.locker)",
        "numberOfBytes": "32",
        "value": "t_struct(locker)23894_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(locker)23894_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.locker",
        "members": [
          {
            "astId": 23870,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "lockerLockingScript",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 23873,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "lockerRescueType",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(ScriptTypes)12047"
          },
          {
            "astId": 23875,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "lockerRescueScript",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 23877,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "lockedAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 23879,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "netMinted",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23881,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "slashingCoreBTCAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 23883,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "reservedTokenForSlash",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 23885,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "isLocker",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 23887,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "isCandidate",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 23889,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "isScriptHash",
            "offset": 2,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 23891,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "lockedToken",
            "offset": 3,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 23893,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "inactivationTimestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(lockersLibConstants)23907_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.lockersLibConstants",
        "members": [
          {
            "astId": 23896,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "OneHundredPercent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23898,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "HealthFactor",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23900,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "UpperHealthFactor",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 23902,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "MaxLockerFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 23904,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "NativeTokenDecimal",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23906,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "NativeToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(lockersLibParam)23928_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.lockersLibParam",
        "members": [
          {
            "astId": 23909,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "coreBTC",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 23911,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "ccBurnRouter",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 23913,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "exchangeConnector",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 23915,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "priceOracle",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 23917,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "collaterals",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 23919,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "lockerPercentageFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 23921,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "collateralRatio",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 23923,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "liquidationRatio",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 23925,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "priceWithDiscountRatio",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 23927,
            "contract": "contracts/lockers/LockersLogic.sol:LockersLogic",
            "label": "slashCompensationRatio",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}